// Generated by Haxe 4.1.4
(function ($hx_exports, $global) { "use strict";
$hx_exports["blub"] = $hx_exports["blub"] || {};
$hx_exports["blub"]["prolog"] = $hx_exports["blub"]["prolog"] || {};
$hx_exports["blub"]["prolog"]["terms"] = $hx_exports["blub"]["prolog"]["terms"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.escape = function(s) {
	return s.replace(EReg.escapeRe,"\\$&");
};
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var EnumValue = {};
EnumValue.match = function(this1,pattern) {
	return false;
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) {
			i = 0;
		}
	}
	while(i < len) {
		if(((a[i]) === obj)) {
			return i;
		}
		++i;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) {
		i = len - 1;
	} else if(i < 0) {
		i += len;
	}
	while(i >= 0) {
		if(((a[i]) === obj)) {
			return i;
		}
		--i;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
HxOverrides.keyValueIter = function(a) {
	return new haxe_iterators_ArrayKeyValueIterator(a);
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.is = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.isOfType = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.downcast = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.instance = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCodePoint(c);
	}
	,addSub: function(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var haxe_SysTools = function() { };
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
haxe_SysTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	}
	if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	}
	return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
};
haxe_SysTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
		var result_b = "";
		var needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += bs == null ? "null" : "" + bs;
					result_b += bs == null ? "null" : "" + bs;
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument;
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.contains = function(s,value) {
	return s.indexOf(value) != -1;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.iterator = function(s) {
	return new haxe_iterators_StringIterator(s);
};
StringTools.keyValueIterator = function(s) {
	return new haxe_iterators_StringKeyValueIterator(s);
};
StringTools.isEof = function(c) {
	return c != c;
};
StringTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	} else {
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
};
StringTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	var argument1 = argument;
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument1)) {
		var result_b = "";
		var needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument1,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += Std.string(bs);
					result_b += Std.string(bs);
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument1 = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument1,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument1;
	}
};
StringTools.utf16CodePointAt = function(s,index) {
	var c = s.charCodeAt(index);
	if(c >= 55296 && c <= 56319) {
		c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
	}
	return c;
};
var TimingTests = $hx_exports["TimingTests"] = function(theory) {
	this.db = new blub_prolog_Database();
	this.db.loadString(theory,true);
};
$hxClasses["TimingTests"] = TimingTests;
TimingTests.__name__ = "TimingTests";
TimingTests.log = function(v) {
	haxe_Log.trace(v,{ fileName : "src/TimingTests.hx", lineNumber : 26, className : "TimingTests", methodName : "log"});
};
TimingTests.clear = function() {
	var traceDiv = window.document.getElementById("haxe:trace");
	while(true) {
		var child = traceDiv.firstChild;
		if(child == null) {
			break;
		}
		traceDiv.removeChild(child);
	}
};
TimingTests.stressTestQueens = function(count) {
	haxe_Log.trace("Running 8 Queens * " + count + " ...",{ fileName : "src/TimingTests.hx", lineNumber : 41, className : "TimingTests", methodName : "stressTestQueens"});
	var solutions = TimingTests.stressTest(TimingTests.queens_theory,"run_queens",count);
	if(count == 1) {
		haxe_Log.trace("solution count = " + solutions.length,{ fileName : "src/TimingTests.hx", lineNumber : 44, className : "TimingTests", methodName : "stressTestQueens"});
		var _g = 0;
		while(_g < solutions.length) {
			var solution = solutions[_g];
			++_g;
			haxe_Log.trace(solution.toString(),{ fileName : "src/TimingTests.hx", lineNumber : 46, className : "TimingTests", methodName : "stressTestQueens"});
		}
	}
};
TimingTests.stressTestOKeefeQueens = function(count) {
	haxe_Log.trace("Running O'Keefe 8 Queens * " + count + " ...",{ fileName : "src/TimingTests.hx", lineNumber : 52, className : "TimingTests", methodName : "stressTestOKeefeQueens"});
	var solutions = TimingTests.stressTest(TimingTests.okeefe_queens_theory,"run_queens",count);
	if(count == 1) {
		haxe_Log.trace("solution count = " + solutions.length,{ fileName : "src/TimingTests.hx", lineNumber : 55, className : "TimingTests", methodName : "stressTestOKeefeQueens"});
		var _g = 0;
		while(_g < solutions.length) {
			var solution = solutions[_g];
			++_g;
			haxe_Log.trace(solution.toString(),{ fileName : "src/TimingTests.hx", lineNumber : 57, className : "TimingTests", methodName : "stressTestOKeefeQueens"});
		}
	}
};
TimingTests.stressTestZebra = function(count) {
	haxe_Log.trace("Running Zebra * " + count + " ...",{ fileName : "src/TimingTests.hx", lineNumber : 63, className : "TimingTests", methodName : "stressTestZebra"});
	TimingTests.stressTest(TimingTests.zebra_theory,"zebra",count);
};
TimingTests.stressTest = function(theory,predName,count) {
	var test = new TimingTests(theory);
	var time = 0.0;
	var solutions = [];
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		var timestamp = HxOverrides.now() / 1000;
		solutions = test.run(predName);
		time += HxOverrides.now() / 1000 - timestamp;
	}
	haxe_Log.trace("Average time = " + time / count,{ fileName : "src/TimingTests.hx", lineNumber : 79, className : "TimingTests", methodName : "stressTest"});
	return solutions;
};
TimingTests.main = function() {
	haxe_Log.trace = function(v,infos) {
		var traceDiv = window.document.getElementById("haxe:trace");
		var logLine = window.document.createElement("p");
		logLine.innerText = "" + infos.className + "[" + infos.lineNumber + "]: " + Std.string(v);
		logLine.className = "log-line";
		traceDiv.appendChild(logLine);
	};
	haxe_Timer.delay(function() {
		haxe_Log.trace("Starting....",{ fileName : "src/TimingTests.hx", lineNumber : 112, className : "TimingTests", methodName : "main"});
		var zebra = new TimingTests(TimingTests.zebra_theory);
		var timestamp = HxOverrides.now() / 1000;
		var solutions = zebra.run("zebra");
		haxe_Log.trace("Zebra in " + (HxOverrides.now() / 1000 - timestamp) + " seconds",{ fileName : "src/TimingTests.hx", lineNumber : 116, className : "TimingTests", methodName : "main"});
		haxe_Log.trace("solution count = " + solutions.length,{ fileName : "src/TimingTests.hx", lineNumber : 117, className : "TimingTests", methodName : "main"});
		var _g = 0;
		while(_g < solutions.length) {
			var solution = solutions[_g];
			++_g;
			haxe_Log.trace(solution.toString(),{ fileName : "src/TimingTests.hx", lineNumber : 119, className : "TimingTests", methodName : "main"});
		}
		TimingTests.stressTestOKeefeQueens(10);
		var queens = new TimingTests(TimingTests.queens_theory);
		timestamp = HxOverrides.now() / 1000;
		var solutions = queens.run("run_queens");
		haxe_Log.trace("8 queens in " + (HxOverrides.now() / 1000 - timestamp) + " seconds",{ fileName : "src/TimingTests.hx", lineNumber : 128, className : "TimingTests", methodName : "main"});
		haxe_Log.trace("solution count = " + solutions.length,{ fileName : "src/TimingTests.hx", lineNumber : 129, className : "TimingTests", methodName : "main"});
		var _g = 0;
		while(_g < solutions.length) {
			var solution = solutions[_g];
			++_g;
			haxe_Log.trace(solution.toString(),{ fileName : "src/TimingTests.hx", lineNumber : 134, className : "TimingTests", methodName : "main"});
		}
	},500);
};
TimingTests.prototype = {
	db: null
	,query: null
	,run: function(predName) {
		var qterm = new blub_prolog_terms_Structure(this.db.context.getAtom(predName),[new blub_prolog_terms_Variable("Result")]);
		this.query = new blub_prolog_Query(this.db,qterm);
		var solutions = [];
		var result = this.query;
		while(result.hasNext()) {
			var result1 = result.next();
			if(blub_prolog_ResultUtil.isSuccess(result1)) {
				solutions.push(blub_prolog_ResultUtil.getBindings(result1).h["Result"]);
			}
		}
		return solutions;
	}
	,__class__: TimingTests
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getClass = function(o) {
	return js_Boot.getClass(o);
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.getEnumName = function(e) {
	return e.__ename__;
};
Type.resolveClass = function(name) {
	return $hxClasses[name];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEmptyInstance = function(cl) {
	return Object.create(cl.prototype);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return $hxEnums[e.__enum__].__constructs__[e._hx_index];
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
Type.enumIndex = function(e) {
	return e._hx_index;
};
Type.allEnums = function(e) {
	return e.__empty_constructs__.slice();
};
var haxe_ds_Map = {};
haxe_ds_Map.set = function(this1,key,value) {
	this1.set(key,value);
};
haxe_ds_Map.get = function(this1,key) {
	return this1.get(key);
};
haxe_ds_Map.exists = function(this1,key) {
	return this1.exists(key);
};
haxe_ds_Map.remove = function(this1,key) {
	return this1.remove(key);
};
haxe_ds_Map.keys = function(this1) {
	return this1.keys();
};
haxe_ds_Map.iterator = function(this1) {
	return this1.iterator();
};
haxe_ds_Map.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
haxe_ds_Map.copy = function(this1) {
	return this1.copy();
};
haxe_ds_Map.toString = function(this1) {
	return this1.toString();
};
haxe_ds_Map.clear = function(this1) {
	this1.clear();
};
haxe_ds_Map.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
haxe_ds_Map.toStringMap = function(t) {
	return new haxe_ds_StringMap();
};
haxe_ds_Map.toIntMap = function(t) {
	return new haxe_ds_IntMap();
};
haxe_ds_Map.toEnumValueMapMap = function(t) {
	return new haxe_ds_EnumValueMap();
};
haxe_ds_Map.toObjectMap = function(t) {
	return new haxe_ds_ObjectMap();
};
haxe_ds_Map.fromStringMap = function(map) {
	return map;
};
haxe_ds_Map.fromIntMap = function(map) {
	return map;
};
haxe_ds_Map.fromObjectMap = function(map) {
	return map;
};
var blub_prolog_AtomContext = function() {
	this.atoms = new haxe_ds_StringMap();
};
$hxClasses["blub.prolog.AtomContext"] = blub_prolog_AtomContext;
blub_prolog_AtomContext.__name__ = "blub.prolog.AtomContext";
blub_prolog_AtomContext.prototype = {
	atoms: null
	,getAtom: function(text) {
		var atom = this.lookupAtom(text);
		if(atom == null) {
			atom = this.createAtom(text);
			this.atoms.h[text] = atom;
		}
		return atom;
	}
	,lookupAtom: function(text,checkGlobals) {
		if(checkGlobals == null) {
			checkGlobals = true;
		}
		var atom = this.atoms.h[text];
		if(atom == null && checkGlobals && this != blub_prolog_AtomContext.GLOBALS) {
			return blub_prolog_AtomContext.GLOBALS.lookupAtom(text,false);
		}
		return atom;
	}
	,createAtom: function(text) {
		return blub_prolog_terms_Atom.unregisteredAtom(text);
	}
	,__class__: blub_prolog_AtomContext
};
var blub_prolog_Clause = function(predicate,clause) {
	this.predicate = predicate;
	this.term = clause;
	this.listeners = new blub_prolog_Listeners();
	this.variableContext = ((clause) instanceof blub_prolog_terms_Structure) ? (js_Boot.__cast(clause , blub_prolog_terms_Structure)).get_variableContext() : blub_prolog_terms_VariableContext.EMPTY;
	this.head = clause.getHead();
	this.body = clause.getBody();
};
$hxClasses["blub.prolog.Clause"] = blub_prolog_Clause;
blub_prolog_Clause.__name__ = "blub.prolog.Clause";
blub_prolog_Clause.prototype = {
	predicate: null
	,listeners: null
	,code: null
	,term: null
	,variableContext: null
	,head: null
	,body: null
	,possibleMatch: function(args) {
		var headStruct = this.head.asStructure();
		var arity = headStruct.getArity();
		var _g = 0;
		var _g1 = arity;
		while(_g < _g1) {
			var i = _g++;
			if(!headStruct.argAt(i).couldMatch(args[i])) {
				return false;
			}
		}
		return true;
	}
	,headArg: function(index) {
		if(((this.head) instanceof blub_prolog_terms_Structure)) {
			return (js_Boot.__cast(this.head , blub_prolog_terms_Structure)).argAt(index);
		}
		return null;
	}
	,retract: function() {
		this.predicate.retractClause(this);
	}
	,isRetracted: function() {
		var lis = this.listeners.iterator();
		while(lis.hasNext()) {
			var lis1 = lis.next();
			lis1.clauseRetracted(this);
		}
	}
	,compile: function() {
		this.code = new blub_prolog_compiler_ClauseCompiler(this.predicate.database).compile(this);
	}
	,setCode: function(code) {
		this.code = code;
	}
	,__class__: blub_prolog_Clause
};
var blub_prolog_Database = $hx_exports["blub"]["prolog"]["Database"] = function(context,operators) {
	this.context = context != null ? context : new blub_prolog_AtomContext();
	this.predicates = new haxe_ds_StringMap();
	this.listeners = new blub_prolog_Listeners();
	if(operators == null) {
		operators = new blub_prolog_stopgap_parse_Operators();
		operators.addStandardOps();
	}
	this.operators = operators;
	blub_prolog_builtins_Builtins.register(this);
	this.globals = new haxe_ds_StringMap();
};
$hxClasses["blub.prolog.Database"] = blub_prolog_Database;
blub_prolog_Database.__name__ = "blub.prolog.Database";
blub_prolog_Database.prototype = {
	operators: null
	,context: null
	,listeners: null
	,preprocessor: null
	,predicates: null
	,lazyPredicates: null
	,compileQueue: null
	,globals: null
	,setGlobal: function(key,value) {
		var atom = blub_prolog_terms_Atom.unregisteredAtom(key);
		atom.object = value;
		this.globals.h[key] = atom;
	}
	,getGlobal: function(key) {
		var atom = this.globals.h[key];
		if(atom == null || atom.asAtom() == null) {
			return null;
		}
		return atom.asAtom().object;
	}
	,addPredicate: function(indicator,isDynamic) {
		if(isDynamic == null) {
			isDynamic = false;
		}
		var pred = new blub_prolog_Predicate(this,indicator,isDynamic);
		var this1 = this.predicates;
		var key = indicator.toString();
		this1.h[key] = pred;
		var lis = this.listeners.iterator();
		while(lis.hasNext()) {
			var lis1 = lis.next();
			lis1.predicateAdded(pred);
		}
		return pred;
	}
	,addPredicateSrc: function(functor,src,filename) {
		if(filename == null) {
			filename = "lazy-load";
		}
		var parser = new blub_prolog_stopgap_parse_Parser(this.context,this.operators,src,filename);
		var pred = null;
		while(true) {
			var t = parser.nextTerm();
			if(t == null) {
				break;
			}
			if(js_Boot.__implements(t,blub_prolog_terms_ClauseTerm)) {
				var clause = js_Boot.__cast(t , blub_prolog_terms_ClauseTerm);
				if(pred == null) {
					var head = clause.getHead();
					pred = this.addPredicate(head.getIndicator(),false);
				}
				pred.appendClause(clause);
				continue;
			} else {
				throw haxe_Exception.thrown(new blub_prolog_PrologError("Invalid top-level clause: " + Std.string(t)));
			}
		}
		if(this.compileQueue != null && pred != null) {
			this.compileQueue.add(pred);
		}
		return pred;
	}
	,lookup: function(indicator) {
		var this1 = this.predicates;
		var key = indicator.toString();
		var pred = this1.h[key];
		if(pred == null && this.compileQueue != null) {
			if(this.lazyPredicates == null) {
				this.lazyPredicates = new blub_prolog_builtins_lazy_LazyLoadPredicates(this);
			}
			if(this.lazyPredicates.load(indicator)) {
				var this1 = this.predicates;
				var key = indicator.toString();
				pred = this1.h[key];
			}
		}
		return pred;
	}
	,compile: function() {
		this.compileQueue = new haxe_ds_List();
		var pred = haxe_ds_StringMap.valueIterator(this.predicates.h);
		while(pred.hasNext()) {
			var pred1 = pred.next();
			this.compileQueue.add(pred1);
		}
		while(!this.compileQueue.isEmpty()) {
			var pred = this.compileQueue.pop();
			pred.compile();
		}
		this.compileQueue = null;
	}
	,assertA: function(term,isQuery) {
		if(isQuery == null) {
			isQuery = false;
		}
		this.assert(term,true,isQuery);
	}
	,assertZ: function(term,isQuery) {
		if(isQuery == null) {
			isQuery = false;
		}
		this.assert(term,false,isQuery);
	}
	,assert: function(clause,atFront,isQuery) {
		var head = clause.getHead();
		var indic = head.getIndicator();
		var pred = this.lookup(indic);
		if(pred == null) {
			pred = this.addPredicate(indic,isQuery);
		} else if(isQuery && !pred.isDynamic) {
			throw haxe_Exception.thrown(new blub_prolog_PrologError("Cannot assert clauses to a non-dynamic predicate: " + Std.string(indic)));
		}
		var c = atFront ? pred.prependClause(clause) : pred.appendClause(clause);
		if(isQuery) {
			c.compile();
		}
	}
	,abolish: function(indicator) {
		var this1 = this.predicates;
		var key = indicator.toString();
		var pred = this1.h[key];
		if(pred != null) {
			var this1 = this.predicates;
			var key = indicator.toString();
			var _this = this1;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			pred.isAbolished();
			var lis = this.listeners.iterator();
			while(lis.hasNext()) {
				var lis1 = lis.next();
				lis1.predicateAbolished(pred);
			}
		}
	}
	,loadString: function(source,compileAll,filename,preprocessor) {
		if(filename == null) {
			filename = "<unknown>";
		}
		if(compileAll == null) {
			compileAll = true;
		}
		var parser = new blub_prolog_stopgap_parse_Parser(this.context,this.operators,source,filename);
		if(preprocessor == null) {
			preprocessor = this.preprocessor;
		}
		if(preprocessor == null) {
			this.preprocessor = blub_prolog_Preprocessor.getAStandardPreprocessor();
			preprocessor = this.preprocessor;
		}
		while(true) {
			var t = parser.nextTerm();
			if(t == null) {
				break;
			}
			var stru = t.asStructure();
			if(stru != null && stru.getNameText() == ":-" && stru.getArity() == 1 && stru.argAt(0).asStructure() != null) {
				var directive = stru.argAt(0).asStructure();
				if(directive.getNameText() == "op" && directive.getArity() == 3) {
					this.processDirective(stru.argAt(0).asStructure());
					continue;
				}
			}
			var terms = preprocessor.process(this,t);
			var _g = 0;
			while(_g < terms.length) {
				var t1 = terms[_g];
				++_g;
				this.loadTerm(t1);
			}
		}
		if(compileAll) {
			this.compile();
		}
	}
	,loadTerm: function(t) {
		var stru = t.asStructure();
		if(stru != null && stru.getNameText() == ":-" && stru.getArity() == 1 && stru.argAt(0).asStructure() != null) {
			this.processDirective(stru.argAt(0).asStructure());
			return;
		}
		if(js_Boot.__implements(t,blub_prolog_terms_ClauseTerm)) {
			var ct = t;
			this.assertZ(ct);
			return;
		}
		throw haxe_Exception.thrown(new blub_prolog_PrologError("Invalid top-level clause: " + Std.string(t)));
	}
	,declareDynamic: function(indicator) {
		var pred = this.lookup(indicator);
		if(pred == null) {
			pred = this.addPredicate(indicator,true);
		} else {
			throw haxe_Exception.thrown(new blub_prolog_PrologError("cannot declare existing predicate to be dynamic: " + Std.string(indicator)));
		}
	}
	,processDirective: function(directive) {
		var text = directive.getNameText();
		if(text == "op") {
			var op = directive;
			if(op.getArity() != 3) {
				throw haxe_Exception.thrown(new blub_prolog_PrologError("op/3 directive requires 3 args: " + Std.string(op)));
			}
			var priority = js_Boot.__cast(op.argAt(0) , blub_prolog_terms_NumberTerm);
			if(priority == null) {
				throw haxe_Exception.thrown(new blub_prolog_PrologError("op/3 directive requires numeric priority as first arg: " + Std.string(op)));
			}
			if(priority.value < 0 || priority.value > 1200) {
				throw haxe_Exception.thrown(new blub_prolog_PrologError("op/3 directive requires numeric priority from 0 to 1200: " + Std.string(op)));
			}
			if((priority.value | 0) != priority.value) {
				throw haxe_Exception.thrown(new blub_prolog_PrologError("op/3 directive requires integer priority: " + Std.string(op)));
			}
			if(!((op.argAt(1)) instanceof blub_prolog_terms_Atom)) {
				throw haxe_Exception.thrown(new blub_prolog_PrologError("op/3 directive requires spec as 2nd arg: " + Std.string(op)));
			}
			if(!((op.argAt(2)) instanceof blub_prolog_terms_Atom)) {
				throw haxe_Exception.thrown(new blub_prolog_PrologError("op/3 directive requires operator as 3rd arg: " + Std.string(op)));
			}
			this.operators.newOp((js_Boot.__cast(op.argAt(2) , blub_prolog_terms_Atom)).text,blub_prolog_stopgap_parse_Operator.opSpec((js_Boot.__cast(op.argAt(1) , blub_prolog_terms_Atom)).text),priority.value | 0,this.context);
			return;
		} else if(text == "dynamic") {
			var preds = directive.argAt(0).asStructure();
			if(preds == null) {
				throw haxe_Exception.thrown(new blub_prolog_PrologError("dynamic/1 directive requires one or more predicate specs: " + Std.string(directive)));
			}
			var specs = preds.commaList();
			var _g = 0;
			while(_g < specs.length) {
				var spec = specs[_g];
				++_g;
				var indic = blub_prolog_PredicateIndicator.fromTerm(spec);
				this.declareDynamic(indic);
			}
		}
	}
	,listing: function(logger) {
		var pred = haxe_ds_StringMap.valueIterator(this.predicates.h);
		while(pred.hasNext()) {
			var pred1 = pred.next();
			if(!pred1.isBuiltin) {
				pred1.listing(logger);
			}
		}
	}
	,query: function(term) {
		var t = blub_prolog_terms_TermParse.parse(term,this.context,this.operators);
		if(!js_Boot.__implements(t,blub_prolog_terms_ClauseTerm)) {
			throw haxe_Exception.thrown(new blub_prolog_PrologError("Query is not a valid atom or structure: " + term));
		}
		return new blub_prolog_Query(this,js_Boot.__cast(t , blub_prolog_terms_ClauseTerm));
	}
	,__class__: blub_prolog_Database
};
var blub_prolog_Listeners = function() {
	this.listeners = [];
};
$hxClasses["blub.prolog.Listeners"] = blub_prolog_Listeners;
blub_prolog_Listeners.__name__ = "blub.prolog.Listeners";
blub_prolog_Listeners.prototype = {
	listeners: null
	,add: function(listener) {
		this.listeners.push(listener);
	}
	,remove: function(listener) {
		HxOverrides.remove(this.listeners,listener);
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.listeners);
	}
	,__class__: blub_prolog_Listeners
};
var blub_prolog_PredicateListener = function() { };
$hxClasses["blub.prolog.PredicateListener"] = blub_prolog_PredicateListener;
blub_prolog_PredicateListener.__name__ = "blub.prolog.PredicateListener";
blub_prolog_PredicateListener.__isInterface__ = true;
blub_prolog_PredicateListener.prototype = {
	predicateAdded: null
	,predicateAbolished: null
	,__class__: blub_prolog_PredicateListener
};
var blub_prolog_AssertionListener = function() { };
$hxClasses["blub.prolog.AssertionListener"] = blub_prolog_AssertionListener;
blub_prolog_AssertionListener.__name__ = "blub.prolog.AssertionListener";
blub_prolog_AssertionListener.__isInterface__ = true;
blub_prolog_AssertionListener.prototype = {
	clauseAsserted: null
	,__class__: blub_prolog_AssertionListener
};
var blub_prolog_RetractionListener = function() { };
$hxClasses["blub.prolog.RetractionListener"] = blub_prolog_RetractionListener;
blub_prolog_RetractionListener.__name__ = "blub.prolog.RetractionListener";
blub_prolog_RetractionListener.__isInterface__ = true;
blub_prolog_RetractionListener.prototype = {
	clauseRetracted: null
	,__class__: blub_prolog_RetractionListener
};
var blub_prolog_Marshal = function() { };
$hxClasses["blub.prolog.Marshal"] = blub_prolog_Marshal;
blub_prolog_Marshal.__name__ = "blub.prolog.Marshal";
blub_prolog_Marshal.newAtom = function() {
	return blub_prolog_terms_Atom.unregisteredAtom("object#" + blub_prolog_Marshal.object_atom_id++);
};
blub_prolog_Marshal.valueToTerm = function(value) {
	if(value == null) {
		return blub_prolog_AtomContext.GLOBALS.getAtom("null");
	}
	if(js_Boot.__implements(value,blub_prolog_terms_Term)) {
		var t = js_Boot.__cast(value , blub_prolog_terms_Term);
		var vt = t.asValueTerm();
		if(vt != null) {
			return vt.dereference();
		}
	}
	if(typeof(value) == "boolean") {
		var b = value;
		if(b) {
			return blub_prolog_AtomContext.GLOBALS.getAtom("true");
		} else {
			return blub_prolog_AtomContext.GLOBALS.getAtom("false");
		}
	}
	if(typeof(value) == "number") {
		return new blub_prolog_terms_NumberTerm(value);
	}
	if(((value) instanceof Array)) {
		var array = value;
		var terms = [];
		var _g = 0;
		while(_g < array.length) {
			var el = array[_g];
			++_g;
			terms.push(blub_prolog_Marshal.valueToTerm(el));
		}
		return blub_prolog_terms_Structure.makeList(terms);
	}
	if(((value) instanceof haxe_ds_StringMap)) {
		var hashAtom = blub_prolog_Marshal.newAtom();
		var hash = value;
		hashAtom.object = new blub_prolog_builtins_objects_HashObjectWrapper(hashAtom,hash);
		return hashAtom;
	}
	var atom = typeof(value) == "string" ? blub_prolog_terms_Atom.unregisteredAtom(value) : blub_prolog_Marshal.newAtom();
	atom.object = new blub_prolog_builtins_objects_JavascriptObjectWrapper(value,atom);
	return atom;
};
blub_prolog_Marshal.termToValue = function(term) {
	if(term == null) {
		return null;
	}
	var atom = term.asAtom();
	if(atom != null) {
		if(atom.object != null) {
			var object = atom.object;
			if(js_Boot.__implements(object,blub_prolog_builtins_objects_ObjectWrapper)) {
				var wrapper = object;
				return wrapper.getObject();
			}
			return object;
		}
		switch(atom.text) {
		case "false":
			return false;
		case "null":
			return null;
		case "true":
			return true;
		default:
			return atom.text;
		}
	}
	var num = term.asNumber();
	if(num != null) {
		return num.value;
	}
	var struc = term.asStructure();
	if(struc != null) {
		if(struc.getArity() == 1 && struc.getNameText() == "term") {
			return struc.argAt(0);
		}
		var array = struc.toArray();
		if(array == null) {
			return struc.toString();
		}
		var resultArray = [];
		var _g = 0;
		while(_g < array.length) {
			var t = array[_g];
			++_g;
			resultArray.push(blub_prolog_Marshal.termToValue(t.asValueTerm()));
		}
		return resultArray;
	}
	term = term.dereference();
	if(term.asReference() != null) {
		return null;
	}
	return blub_prolog_Marshal.termToValue(term);
};
var blub_prolog_PredicateIndicator = function(name,arity) {
	this.name = name;
	this.arity = arity;
};
$hxClasses["blub.prolog.PredicateIndicator"] = blub_prolog_PredicateIndicator;
blub_prolog_PredicateIndicator.__name__ = "blub.prolog.PredicateIndicator";
blub_prolog_PredicateIndicator.fromString = function(text,context) {
	var slash = text.lastIndexOf("/");
	var atom = text;
	var arity = 0;
	if(slash >= 0) {
		atom = HxOverrides.substr(text,0,slash);
		arity = Std.parseInt(HxOverrides.substr(text,slash + 1,null));
	}
	return new blub_prolog_PredicateIndicator((context != null ? context : blub_prolog_AtomContext.GLOBALS).getAtom(atom),arity);
};
blub_prolog_PredicateIndicator.fromTerm = function(term,clauseContext) {
	var structure = term.asStructure();
	if(structure == null || structure.getArity() != 2 || !structure.getName().equals(blub_prolog_PredicateIndicator.SLASH) || structure.argAt(0).asAtom() == null || structure.argAt(1).asNumber() == null) {
		throw haxe_Exception.thrown(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_predicate_indicator,term,clauseContext));
	}
	return new blub_prolog_PredicateIndicator(structure.argAt(0).asAtom(),structure.argAt(1).asNumber().value | 0);
};
blub_prolog_PredicateIndicator.prototype = {
	name: null
	,arity: null
	,term: null
	,_string: null
	,toString: function() {
		if(this._string == null) {
			this._string = this.name.text + "/" + this.arity;
		}
		return this._string;
	}
	,_term: null
	,get_term: function() {
		if(this._term == null) {
			this._term = new blub_prolog_terms_Structure(blub_prolog_PredicateIndicator.SLASH,[this.name,new blub_prolog_terms_NumberTerm(this.arity)]);
		}
		return this._term;
	}
	,__class__: blub_prolog_PredicateIndicator
	,__properties__: {get_term:"get_term"}
};
var blub_prolog_Predicate = function(database,indicator,isDynamic) {
	this.database = database;
	this.indicator = indicator;
	this.isDynamic = isDynamic;
	this.isBuiltin = false;
	this.listeners = new blub_prolog_Listeners();
	this.clauseList = [];
};
$hxClasses["blub.prolog.Predicate"] = blub_prolog_Predicate;
blub_prolog_Predicate.__name__ = "blub.prolog.Predicate";
blub_prolog_Predicate.prototype = {
	database: null
	,isDynamic: null
	,isBuiltin: null
	,indicator: null
	,listeners: null
	,builtin: null
	,code: null
	,clauseList: null
	,findMatchingClauses: function(args) {
		if(this.indicator.arity == 0) {
			return this.clauseList;
		}
		var result = [];
		var _g = 0;
		var _g1 = this.clauseList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.possibleMatch(args)) {
				result.push(c);
			}
		}
		return result;
	}
	,appendClause: function(clause) {
		if(this.isBuiltin) {
			throw haxe_Exception.thrown("cannot add clauses to a built-in predicate: " + this.indicator.toString());
		}
		var c = new blub_prolog_Clause(this,clause);
		this.clauseList.push(c);
		var lis = this.listeners.iterator();
		while(lis.hasNext()) {
			var lis1 = lis.next();
			lis1.clauseAsserted(c,false);
		}
		return c;
	}
	,prependClause: function(clause) {
		if(this.isBuiltin) {
			throw haxe_Exception.thrown("cannot add clauses to a built-in predicate: " + this.indicator.toString());
		}
		var c = new blub_prolog_Clause(this,clause);
		this.clauseList.unshift(c);
		var lis = this.listeners.iterator();
		while(lis.hasNext()) {
			var lis1 = lis.next();
			lis1.clauseAsserted(c,true);
		}
		return c;
	}
	,retractClause: function(clause) {
		HxOverrides.remove(this.clauseList,clause);
		clause.isRetracted();
	}
	,clauseAt: function(index) {
		return this.clauseList[index];
	}
	,clauseCount: function() {
		return this.clauseList.length;
	}
	,clauses: function() {
		return new haxe_iterators_ArrayIterator(this.clauseList);
	}
	,compile: function() {
		if(this.isBuiltin) {
			return;
		}
		var _g = 0;
		var _g1 = this.clauseList;
		while(_g < _g1.length) {
			var clause = _g1[_g];
			++_g;
			clause.compile();
		}
		this.code = new blub_prolog_compiler_PredicateCompiler(this.database).compile(this);
	}
	,toString: function() {
		return this.indicator.toString();
	}
	,setBuiltin: function(builtin) {
		this.builtin = builtin;
		this.isBuiltin = true;
	}
	,abolish: function() {
		this.database.abolish(this.indicator);
	}
	,isAbolished: function() {
		var _g = 0;
		var _g1 = this.clauseList;
		while(_g < _g1.length) {
			var clause = _g1[_g];
			++_g;
			clause.isRetracted();
		}
	}
	,listing: function(logger) {
		var _g = 0;
		var _g1 = this.clauseList;
		while(_g < _g1.length) {
			var clause = _g1[_g];
			++_g;
			logger(clause.term.toString());
		}
	}
	,__class__: blub_prolog_Predicate
};
var blub_prolog_Preprocessor = function(macroDatabase) {
	this.macroDatabase = macroDatabase;
};
$hxClasses["blub.prolog.Preprocessor"] = blub_prolog_Preprocessor;
blub_prolog_Preprocessor.__name__ = "blub.prolog.Preprocessor";
blub_prolog_Preprocessor.nullPreprocessor = null;
blub_prolog_Preprocessor.getAStandardPreprocessor = function() {
	var standardPreprocessor = new blub_prolog_Preprocessor(new blub_prolog_Database(blub_prolog_AtomContext.GLOBALS));
	standardPreprocessor.loadStandardTheories();
	return standardPreprocessor;
};
blub_prolog_Preprocessor.getNullPreprocessor = function() {
	if(blub_prolog_Preprocessor.nullPreprocessor == null) {
		blub_prolog_Preprocessor.nullPreprocessor = new blub_prolog_Preprocessor(null);
	}
	return blub_prolog_Preprocessor.nullPreprocessor;
};
blub_prolog_Preprocessor.prototype = {
	macroDatabase: null
	,preprocessorPredicates: null
	,loadStandardTheories: function() {
		var _g = 0;
		var _g1 = blub_prolog_Preprocessor.THEORIES;
		while(_g < _g1.length) {
			var theory = _g1[_g];
			++_g;
			var source = haxe_Resource.getString(theory);
			this.macroDatabase.loadString(source,true,theory,blub_prolog_Preprocessor.getNullPreprocessor());
		}
	}
	,getPreprocessorNames: function() {
		if(this.preprocessorPredicates == null) {
			var preprocAtom = this.macroDatabase.context.getAtom("preprocessor");
			this.preprocessorPredicates = [];
			if(this.macroDatabase.lookup(new blub_prolog_PredicateIndicator(preprocAtom,1)) == null) {
				return this.preprocessorPredicates;
			}
			var nameVar = "Name";
			var query = new blub_prolog_Query(this.macroDatabase,blub_prolog_terms_Structure.make(preprocAtom,new blub_prolog_terms_Variable(nameVar)));
			var bindings = query.allBindings();
			if(bindings != null) {
				var _g = 0;
				while(_g < bindings.length) {
					var binding = bindings[_g];
					++_g;
					var name = binding.h[nameVar].asAtom();
					if(name != null) {
						this.preprocessorPredicates.push(name.text);
					}
				}
			}
		}
		return this.preprocessorPredicates;
	}
	,process: function(db,clause) {
		if(this.macroDatabase == null) {
			return [clause];
		}
		var procNames = this.getPreprocessorNames();
		if(procNames.length == 0) {
			return [clause];
		}
		var dbWrapper = blub_prolog_Marshal.valueToTerm(db);
		if(clause.asStructure() != null) {
			clause = clause.asStructure().varsToReferences();
		}
		var termQ = [clause];
		var _g = 0;
		while(_g < procNames.length) {
			var procName = procNames[_g];
			++_g;
			var outQ = [];
			var _g1 = 0;
			while(_g1 < termQ.length) {
				var c = termQ[_g1];
				++_g1;
				var clausesOut = this.callPreprocessor(procName,dbWrapper,c);
				var _g2 = 0;
				while(_g2 < clausesOut.length) {
					var out = clausesOut[_g2];
					++_g2;
					outQ.push(out);
				}
			}
			termQ = outQ;
		}
		var results = [];
		var _g = 0;
		while(_g < termQ.length) {
			var t = termQ[_g];
			++_g;
			var stru = t.asStructure();
			if(stru != null) {
				results.push(stru.variablize());
			} else {
				results.push(t);
			}
		}
		return results;
	}
	,callPreprocessor: function(name,dbWrapper,clause) {
		var varOut = new blub_prolog_terms_Variable();
		var queryTerm = new blub_prolog_terms_Structure(this.macroDatabase.context.getAtom(name),[dbWrapper,clause,varOut]);
		var query = new blub_prolog_Query(this.macroDatabase,queryTerm);
		if(!query.get_engine().findSolution()) {
			return [clause];
		}
		var result = query.environment[varOut.index].dereference();
		if(result.asReference() != null) {
			return [];
		}
		var list = result.asStructure();
		if(list == null) {
			return [result];
		}
		return list.commaList();
	}
	,__class__: blub_prolog_Preprocessor
};
var blub_prolog_PrologError = function(msg) {
	this.message = msg;
};
$hxClasses["blub.prolog.PrologError"] = blub_prolog_PrologError;
blub_prolog_PrologError.__name__ = "blub.prolog.PrologError";
blub_prolog_PrologError.prototype = {
	message: null
	,toString: function() {
		return this.message;
	}
	,__class__: blub_prolog_PrologError
};
var blub_prolog_PrologException = function(errorTerm,context) {
	blub_prolog_PrologError.call(this,errorTerm.toString());
	this.errorTerm = errorTerm;
	this.context = context;
};
$hxClasses["blub.prolog.PrologException"] = blub_prolog_PrologException;
blub_prolog_PrologException.__name__ = "blub.prolog.PrologException";
blub_prolog_PrologException.__super__ = blub_prolog_PrologError;
blub_prolog_PrologException.prototype = $extend(blub_prolog_PrologError.prototype,{
	context: null
	,errorTerm: null
	,__class__: blub_prolog_PrologException
});
var blub_prolog_RuntimeError = function(term,context) {
	blub_prolog_PrologException.call(this,new blub_prolog_terms_Structure(blub_prolog_RuntimeError.ERROR,[term,new blub_prolog_terms_Structure(blub_prolog_RuntimeError.CONTEXT,[context != null ? context.head : blub_prolog_RuntimeError.NONE])]),context);
};
$hxClasses["blub.prolog.RuntimeError"] = blub_prolog_RuntimeError;
blub_prolog_RuntimeError.__name__ = "blub.prolog.RuntimeError";
blub_prolog_RuntimeError.instantiationError = function(context) {
	return new blub_prolog_RuntimeError(blub_prolog_RuntimeError.INSTANTIATION_ERROR,context);
};
blub_prolog_RuntimeError.existenceError = function(type,culprit,context) {
	var tmp;
	switch(type._hx_index) {
	case 0:
		tmp = blub_prolog_RuntimeError.EXIST_PROCEDURE;
		break;
	case 1:
		tmp = blub_prolog_RuntimeError.EXIST_SRC_SINK;
		break;
	case 2:
		tmp = blub_prolog_RuntimeError.EXIST_STREAM;
		break;
	}
	return new blub_prolog_RuntimeError(new blub_prolog_terms_Structure(blub_prolog_RuntimeError.EXISTENCE_ERROR,[tmp,culprit]),context);
};
blub_prolog_RuntimeError.typeError = function(validType,culprit,context) {
	return new blub_prolog_RuntimeError(new blub_prolog_terms_Structure(blub_prolog_RuntimeError.TYPE_ERROR,[validType,culprit]),context);
};
blub_prolog_RuntimeError.domainError = function(msg,culprit,context) {
	return new blub_prolog_RuntimeError(new blub_prolog_terms_Structure(blub_prolog_RuntimeError.DOMAIN_ERROR,[blub_prolog_terms_Atom.unregisteredAtom(msg),culprit]),context);
};
blub_prolog_RuntimeError.__super__ = blub_prolog_PrologException;
blub_prolog_RuntimeError.prototype = $extend(blub_prolog_PrologException.prototype,{
	__class__: blub_prolog_RuntimeError
});
var blub_prolog_ExistenceError = $hxEnums["blub.prolog.ExistenceError"] = { __ename__ : "blub.prolog.ExistenceError", __constructs__ : ["ee_procedure","ee_source_sink","ee_stream"]
	,ee_procedure: {_hx_index:0,__enum__:"blub.prolog.ExistenceError",toString:$estr}
	,ee_source_sink: {_hx_index:1,__enum__:"blub.prolog.ExistenceError",toString:$estr}
	,ee_stream: {_hx_index:2,__enum__:"blub.prolog.ExistenceError",toString:$estr}
};
blub_prolog_ExistenceError.__empty_constructs__ = [blub_prolog_ExistenceError.ee_procedure,blub_prolog_ExistenceError.ee_source_sink,blub_prolog_ExistenceError.ee_stream];
var blub_prolog_TypeError = function(term,context) {
	blub_prolog_RuntimeError.call(this,term,context);
};
$hxClasses["blub.prolog.TypeError"] = blub_prolog_TypeError;
blub_prolog_TypeError.__name__ = "blub.prolog.TypeError";
blub_prolog_TypeError.__super__ = blub_prolog_RuntimeError;
blub_prolog_TypeError.prototype = $extend(blub_prolog_RuntimeError.prototype,{
	__class__: blub_prolog_TypeError
});
var blub_prolog_Query = $hx_exports["blub"]["prolog"]["Query"] = function(database,term,autocommit) {
	if(autocommit == null) {
		autocommit = true;
	}
	this.database = database;
	this.term = term;
	this.autocommit = autocommit;
	this.variableContext = ((term) instanceof blub_prolog_terms_Structure) ? (js_Boot.__cast(term , blub_prolog_terms_Structure)).get_variableContext() : blub_prolog_terms_VariableContext.EMPTY;
};
$hxClasses["blub.prolog.Query"] = blub_prolog_Query;
blub_prolog_Query.__name__ = "blub.prolog.Query";
blub_prolog_Query.timestamp = function() {
	return HxOverrides.now() / 1000;
};
blub_prolog_Query.prototype = {
	autocommit: null
	,committed: null
	,hadResults: null
	,database: null
	,term: null
	,nextResult: null
	,_code: null
	,code: null
	,environment: null
	,variableContext: null
	,_engine: null
	,engine: null
	,setCode: function(code) {
		this._code = code;
		this._engine = null;
	}
	,get_code: function() {
		if(this._code == null) {
			this._code = new blub_prolog_compiler_QueryCompiler(this.database).compile(this.term);
		}
		return this._code;
	}
	,get_engine: function() {
		if(this._engine == null) {
			this._engine = new blub_prolog_engine_QueryEngine(this.database,this.get_code());
			var _this = this._engine;
			var size = this.variableContext.get_count();
			_this.environment = [];
			var _g = 0;
			var _g1 = size;
			while(_g < _g1) {
				var i = _g++;
				_this.environment.push(new blub_prolog_terms_Reference());
			}
			this.environment = this._engine.environment;
		}
		return this._engine;
	}
	,iterator: function() {
		return this;
	}
	,putBack: function(solution) {
		this.nextResult = solution;
	}
	,hasNext: function() {
		if(this.nextResult != null) {
			return true;
		}
		this.nextResult = this.nextSolution();
		if(this.nextResult != null) {
			return true;
		}
		return false;
	}
	,next: function() {
		if(this.nextResult != null) {
			var result = this.nextResult;
			this.nextResult = null;
			return result;
		}
		return this.nextSolution();
	}
	,complete: function() {
		while(this.nextSolution() != null) {
		}
	}
	,allResults: function() {
		var res = [];
		var result;
		while(true) {
			result = this.nextSolution();
			if(!(result != null)) {
				break;
			}
			res.push(result);
		}
		return res;
	}
	,commit: function() {
		this.complete();
		this._commit();
	}
	,allSolutions: function() {
		var res = [];
		var result;
		while(true) {
			result = this.nextSolution();
			if(!(result != null)) {
				break;
			}
			if(!blub_prolog_ResultUtil.isSuccess(result)) {
				break;
			}
			res.push(result);
		}
		return res;
	}
	,allBindings: function() {
		var res = [];
		var result;
		while(true) {
			result = this.nextSolution();
			if(!(result != null)) {
				break;
			}
			if(!blub_prolog_ResultUtil.isSuccess(result)) {
				return null;
			}
			var binds = blub_prolog_ResultUtil.getBindings(result);
			if(binds == null) {
				return res;
			}
			res.push(binds);
		}
		return res;
	}
	,nextSolution: function() {
		if(this.nextResult != null) {
			var r = this.nextResult;
			this.nextResult = null;
			return r;
		}
		var result;
		if(!this.get_engine().findSolution()) {
			if(this.autocommit) {
				this._commit();
			}
			if(this.hadResults) {
				return null;
			}
			result = blub_prolog_Result.failure;
		} else {
			result = this.grabCurrentSolution();
		}
		this.hadResults = true;
		return result;
	}
	,grabCurrentSolution: function() {
		if(this.variableContext.get_count() == 0) {
			return blub_prolog_Result.success;
		} else {
			var binds = this.makeBindings();
			return blub_prolog_Result.bindings(binds);
		}
	}
	,makeBindings: function() {
		if(this.variableContext.get_count() == 0) {
			return null;
		}
		var binds = new haxe_ds_StringMap();
		var refVars = new haxe_ds_ObjectMap();
		var v = this.variableContext.variables();
		while(v.hasNext()) {
			var v1 = v.next();
			var value = this.environment[v1.index].dereference();
			var ref = value.asReference();
			if(ref != null) {
				var v2 = refVars.h[ref.__id__];
				if(v2 == null) {
					v2 = new blub_prolog_terms_Variable();
					refVars.set(ref,v2);
				}
				value = v2;
			}
			var s = value.asStructure();
			if(s != null && s.hasReferences()) {
				value = s.variablize(refVars);
			}
			var key = v1.get_name();
			binds.h[key] = value;
		}
		return binds;
	}
	,_commit: function() {
		if(this.committed) {
			return;
		}
		if(this._engine.transaction != null) {
			this._engine.transaction.commit();
		}
		this.committed = true;
	}
	,__class__: blub_prolog_Query
	,__properties__: {get_engine:"get_engine",get_code:"get_code"}
};
var blub_prolog_Result = $hxEnums["blub.prolog.Result"] = { __ename__ : "blub.prolog.Result", __constructs__ : ["failure","success","bindings"]
	,failure: {_hx_index:0,__enum__:"blub.prolog.Result",toString:$estr}
	,success: {_hx_index:1,__enum__:"blub.prolog.Result",toString:$estr}
	,bindings: ($_=function(binds) { return {_hx_index:2,binds:binds,__enum__:"blub.prolog.Result",toString:$estr}; },$_.__params__ = ["binds"],$_)
};
blub_prolog_Result.__empty_constructs__ = [blub_prolog_Result.failure,blub_prolog_Result.success];
var blub_prolog_ResultUtil = $hx_exports["blub"]["prolog"]["ResultUtil"] = function() { };
$hxClasses["blub.prolog.ResultUtil"] = blub_prolog_ResultUtil;
blub_prolog_ResultUtil.__name__ = "blub.prolog.ResultUtil";
blub_prolog_ResultUtil.toString = function(result) {
	switch(result._hx_index) {
	case 0:
		return "false";
	case 1:
		return "true";
	case 2:
		var b = result.binds;
		return blub_prolog_ResultUtil.bindingsToString(b);
	}
};
blub_prolog_ResultUtil.bindingsToString = function(bindings) {
	if(bindings == null) {
		return "{null}";
	}
	var s = "{ ";
	var first = true;
	var key = haxe_ds_StringMap.keysIterator(bindings.h);
	while(key.hasNext()) {
		var key1 = key.next();
		if(first) {
			first = false;
		} else {
			s += ", ";
		}
		var t = bindings.h[key1];
		s += key1 + "=" + (t != null ? t.toString() : "<null>");
	}
	s += " }";
	return s;
};
blub_prolog_ResultUtil.getBindings = function(result) {
	switch(result._hx_index) {
	case 0:
		return null;
	case 1:
		return null;
	case 2:
		var b = result.binds;
		return b;
	}
};
blub_prolog_ResultUtil.isSuccess = function(result) {
	switch(result._hx_index) {
	case 0:
		return false;
	case 1:
		return true;
	case 2:
		var _g = result.binds;
		return true;
	}
};
blub_prolog_ResultUtil.equals = function(r1,r2) {
	var binds1;
	var binds2;
	switch(r1._hx_index) {
	case 0:
		if(r2._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(r2._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	case 2:
		var b1 = r1.binds;
		if(r2._hx_index == 2) {
			var b2 = r2.binds;
			binds1 = b1;
			binds2 = b2;
		} else {
			return false;
		}
		break;
	}
	return blub_prolog_ResultUtil.compareBindings(binds1,binds2);
};
blub_prolog_ResultUtil.equalsBindings = function(result,binds) {
	switch(result._hx_index) {
	case 0:
		return false;
	case 1:
		return false;
	case 2:
		var b1 = result.binds;
		return blub_prolog_ResultUtil.compareBindings(b1,binds);
	}
};
blub_prolog_ResultUtil.compareBindings = function(binds1,binds2) {
	var key = haxe_ds_StringMap.keysIterator(binds2.h);
	while(key.hasNext()) {
		var key1 = key.next();
		var val = binds2.h[key1];
		if(val == null) {
			return false;
		}
		var bind = binds1.h[key1];
		if(bind == null || !bind.equals(val)) {
			return false;
		}
	}
	var key = haxe_ds_StringMap.keysIterator(binds1.h);
	while(key.hasNext()) {
		var key1 = key.next();
		var bind = binds1.h[key1];
		var val = binds2.h[key1];
		if(val == null) {
			return false;
		}
		if(!bind.equals(val)) {
			return false;
		}
	}
	return true;
};
var blub_prolog_async_AsyncQuery = function(database,term,autocommit) {
	if(autocommit == null) {
		autocommit = true;
	}
	blub_prolog_Query.call(this,database,term,autocommit);
};
$hxClasses["blub.prolog.async.AsyncQuery"] = blub_prolog_async_AsyncQuery;
blub_prolog_async_AsyncQuery.__name__ = "blub.prolog.async.AsyncQuery";
blub_prolog_async_AsyncQuery.__super__ = blub_prolog_Query;
blub_prolog_async_AsyncQuery.prototype = $extend(blub_prolog_Query.prototype,{
	execute: function(resultCallback) {
		var _gthis = this;
		if(resultCallback == null) {
			this.get_engine().executeAsync();
			return;
		}
		this.get_engine().executeAsync(function(eng,type) {
			switch(type._hx_index) {
			case 0:
				if(!_gthis.get_engine().solutionFound) {
					resultCallback.asyncFail(_gthis);
				} else {
					resultCallback.asyncSolution(_gthis,_gthis.makeBindings());
				}
				break;
			case 1:
				resultCallback.asyncDone(_gthis);
				break;
			case 2:
				resultCallback.asyncHalt(_gthis);
				break;
			case 3:
				resultCallback.asyncOperation(_gthis);
				break;
			}
		});
	}
	,__class__: blub_prolog_async_AsyncQuery
});
var blub_prolog_async_AsyncResults = function() { };
$hxClasses["blub.prolog.async.AsyncResults"] = blub_prolog_async_AsyncResults;
blub_prolog_async_AsyncResults.__name__ = "blub.prolog.async.AsyncResults";
blub_prolog_async_AsyncResults.__isInterface__ = true;
blub_prolog_async_AsyncResults.prototype = {
	asyncSolution: null
	,asyncFail: null
	,asyncDone: null
	,asyncOperation: null
	,asyncHalt: null
	,__class__: blub_prolog_async_AsyncResults
};
var blub_prolog_async_AsyncResultsImpl = function() {
};
$hxClasses["blub.prolog.async.AsyncResultsImpl"] = blub_prolog_async_AsyncResultsImpl;
blub_prolog_async_AsyncResultsImpl.__name__ = "blub.prolog.async.AsyncResultsImpl";
blub_prolog_async_AsyncResultsImpl.__interfaces__ = [blub_prolog_async_AsyncResults];
blub_prolog_async_AsyncResultsImpl.prototype = {
	asyncSolution: function(query,bindings) {
	}
	,asyncFail: function(query) {
	}
	,asyncDone: function(query) {
		this.doneOrHalted(query);
	}
	,asyncOperation: function(query) {
	}
	,asyncHalt: function(query) {
		this.doneOrHalted(query);
	}
	,doneOrHalted: function(query) {
	}
	,__class__: blub_prolog_async_AsyncResultsImpl
};
var blub_prolog_builtins_BuiltinPredicate = function(name,arity) {
	this.arity = arity;
	this.name = name;
};
$hxClasses["blub.prolog.builtins.BuiltinPredicate"] = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_BuiltinPredicate.__name__ = "blub.prolog.builtins.BuiltinPredicate";
blub_prolog_builtins_BuiltinPredicate.prototype = {
	name: null
	,arity: null
	,register: function(database) {
		var nameAtom = database.context.getAtom(this.name);
		var pred = database.addPredicate(new blub_prolog_PredicateIndicator(nameAtom,this.arity),false);
		pred.setBuiltin(this);
	}
	,compile: function(compiler,pred,term) {
		var stru = term.asStructure();
		var args = stru != null ? stru.getArgs() : null;
		compiler.add(blub_prolog_compiler_Instruction.call_builtin(pred.indicator.toString(),args));
	}
	,execute: function(engine,args) {
	}
	,__class__: blub_prolog_builtins_BuiltinPredicate
};
var blub_prolog_builtins_Abolish = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"abolish",1);
};
$hxClasses["blub.prolog.builtins.Abolish"] = blub_prolog_builtins_Abolish;
blub_prolog_builtins_Abolish.__name__ = "blub.prolog.builtins.Abolish";
blub_prolog_builtins_Abolish.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Abolish.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var term = args[0].toValue(env).dereference();
		var stru = term.asStructure();
		var indicator = blub_prolog_PredicateIndicator.fromTerm(term,engine.context);
		var predicate = engine.database.lookup(indicator);
		if(predicate == null) {
			return;
		}
		engine.makeTransaction().abolish(predicate);
	}
	,__class__: blub_prolog_builtins_Abolish
});
var blub_prolog_builtins_Arg = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"arg",3);
};
$hxClasses["blub.prolog.builtins.Arg"] = blub_prolog_builtins_Arg;
blub_prolog_builtins_Arg.__name__ = "blub.prolog.builtins.Arg";
blub_prolog_builtins_Arg.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Arg.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var arg = args[0].toValue(env);
		var term = args[1].toValue(env);
		var value = args[2].toValue(env);
		var atom = term.asAtom();
		if(atom != null) {
			engine.fail();
			return;
		}
		var stru = term.asStructure();
		if(stru == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_compound,term,engine.context));
			return;
		}
		var argNum = arg.asNumber();
		if(argNum != null) {
			this.executeIndex(engine,argNum,stru,value);
			return;
		}
		var argRef = arg.asReference();
		if(argRef == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_variable,arg,engine.context));
			return;
		}
		this.executeChoices(engine,argRef,stru,value);
	}
	,executeChoices: function(engine,argRef,stru,value) {
		var arity = stru.getArity();
		var _g = 0;
		var _g1 = arity;
		while(_g < _g1) {
			var i = _g++;
			var arg = stru.argAt(i).asValueTerm();
			var binds = engine.bindings;
			if(arg.unify(value,engine)) {
				argRef.unify(new blub_prolog_terms_NumberTerm(i + 1),engine);
				if(i < arity - 1) {
					var cp = new blub_prolog_builtins_ArgChoicePoint(engine,i + 1,argRef,stru,value);
					cp.bindings = binds;
				}
				return;
			}
		}
		engine.fail();
	}
	,executeIndex: function(engine,argNum,stru,value) {
		var index = argNum.value | 0;
		if(index < 0) {
			engine.raiseException(blub_prolog_RuntimeError.domainError("not_less_than_zero",argNum,engine.context));
			return;
		}
		if(index == 0 || index > stru.getArity()) {
			engine.fail();
			return;
		}
		var arg = stru.argAt(index - 1).asValueTerm();
		engine.unify(arg,value);
	}
	,__class__: blub_prolog_builtins_Arg
});
var blub_prolog_engine_parts_ChoicePoint = function(eng,frame) {
	this.frame = frame != null ? frame : new blub_prolog_engine_parts_CodeFrame(eng);
	this.bindings = eng.bindings;
	this.prev = eng.choiceStack;
	eng.choiceStack = this;
	this.engine = eng;
};
$hxClasses["blub.prolog.engine.parts.ChoicePoint"] = blub_prolog_engine_parts_ChoicePoint;
blub_prolog_engine_parts_ChoicePoint.__name__ = "blub.prolog.engine.parts.ChoicePoint";
blub_prolog_engine_parts_ChoicePoint.prototype = {
	bindings: null
	,frame: null
	,prev: null
	,engine: null
	,nextChoice: function() {
		this.frame.restore();
		this.popThisChoicePoint();
		return true;
	}
	,undoBindings: function() {
		var _this = this.engine;
		var prevBind = this.bindings;
		var bind = _this.bindings;
		while(bind != null && bind != prevBind) {
			bind.ref.unbind(bind.old);
			bind = bind.next;
		}
		_this.bindings = prevBind;
	}
	,popThisChoicePoint: function() {
		this.engine.choiceStack = this.prev;
	}
	,halt: function() {
	}
	,toString: function() {
		return "Choicepoint: " + Std.string(this.frame);
	}
	,getId: function() {
		if(this._id < 1) {
			this._id = blub_prolog_engine_parts_ChoicePoint.ID++;
		}
		return this._id;
	}
	,_id: null
	,__class__: blub_prolog_engine_parts_ChoicePoint
};
var blub_prolog_builtins_ArgChoicePoint = function(eng,index,argRef,stru,value) {
	blub_prolog_engine_parts_ChoicePoint.call(this,eng,eng.codeStack);
	this.index = index;
	this.argRef = argRef;
	this.stru = stru;
	this.value = value;
};
$hxClasses["blub.prolog.builtins.ArgChoicePoint"] = blub_prolog_builtins_ArgChoicePoint;
blub_prolog_builtins_ArgChoicePoint.__name__ = "blub.prolog.builtins.ArgChoicePoint";
blub_prolog_builtins_ArgChoicePoint.__super__ = blub_prolog_engine_parts_ChoicePoint;
blub_prolog_builtins_ArgChoicePoint.prototype = $extend(blub_prolog_engine_parts_ChoicePoint.prototype,{
	index: null
	,argRef: null
	,stru: null
	,value: null
	,nextChoice: function() {
		this.frame.restore();
		var arity = this.stru.getArity();
		var _g = this.index;
		var _g1 = arity;
		while(_g < _g1) {
			var i = _g++;
			var arg = this.stru.argAt(i).asValueTerm();
			if(arg.unify(this.value,this.engine)) {
				this.argRef.unify(new blub_prolog_terms_NumberTerm(i + 1),this.engine);
				if(i == arity - 1) {
					this.popThisChoicePoint();
				} else {
					this.index = i + 1;
				}
				return true;
			}
		}
		this.popThisChoicePoint();
		return false;
	}
	,toString: function() {
		return "arg/3: " + Std.string(this.frame);
	}
	,__class__: blub_prolog_builtins_ArgChoicePoint
});
var blub_prolog_builtins_AssertA = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"asserta",1);
};
$hxClasses["blub.prolog.builtins.AssertA"] = blub_prolog_builtins_AssertA;
blub_prolog_builtins_AssertA.__name__ = "blub.prolog.builtins.AssertA";
blub_prolog_builtins_AssertA.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_AssertA.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var term = args[0].toValue(env).dereference();
		if(!js_Boot.__implements(term,blub_prolog_terms_ClauseTerm)) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_callable,term,engine.context));
			return;
		}
		var clauseTerm = term;
		var stru = clauseTerm.asStructure();
		if(stru != null) {
			clauseTerm = stru.variablize();
		}
		engine.makeTransaction().preAssert(clauseTerm);
	}
	,__class__: blub_prolog_builtins_AssertA
});
var blub_prolog_builtins_AssertZ = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"assertz",1);
};
$hxClasses["blub.prolog.builtins.AssertZ"] = blub_prolog_builtins_AssertZ;
blub_prolog_builtins_AssertZ.__name__ = "blub.prolog.builtins.AssertZ";
blub_prolog_builtins_AssertZ.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_AssertZ.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var term = args[0].toValue(env).dereference();
		if(!js_Boot.__implements(term,blub_prolog_terms_ClauseTerm)) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_callable,term,engine.context));
			return;
		}
		var clauseTerm = term;
		var stru = clauseTerm.asStructure();
		if(stru != null) {
			clauseTerm = stru.variablize();
		}
		engine.makeTransaction().postAssert(clauseTerm);
	}
	,__class__: blub_prolog_builtins_AssertZ
});
var blub_prolog_builtins_AtomCodes = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"atom_codes",2);
};
$hxClasses["blub.prolog.builtins.AtomCodes"] = blub_prolog_builtins_AtomCodes;
blub_prolog_builtins_AtomCodes.__name__ = "blub.prolog.builtins.AtomCodes";
blub_prolog_builtins_AtomCodes.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_AtomCodes.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var atomArg = args[0].toValue(env);
		var stringArg = args[1].toValue(env);
		var atom = atomArg.asAtom();
		if(atom != null) {
			var text = atom.text;
			var len = text.length;
			var codes = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				codes.push(new blub_prolog_terms_NumberTerm(HxOverrides.cca(text,i)));
			}
			engine.unify(blub_prolog_terms_Structure.makeList(codes),stringArg);
			return;
		}
		var atomRef = atomArg.asReference();
		if(atomRef == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_atom,atomArg,engine.context));
			return;
		}
		var codeList = stringArg.asStructure();
		if(codeList == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_list,stringArg,engine.context));
			return;
		}
		var codes = codeList.toArray();
		if(codes == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_list,codeList,engine.context));
			return;
		}
		var buf_b = "";
		var _g = 0;
		while(_g < codes.length) {
			var t = codes[_g];
			++_g;
			var code = t.asNumber();
			if(code == null) {
				engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_number,t,engine.context));
				return;
			}
			var c = code.value | 0;
			buf_b += String.fromCodePoint(c);
		}
		engine.unify(blub_prolog_terms_Atom.unregisteredAtom(buf_b),atomRef);
	}
	,__class__: blub_prolog_builtins_AtomCodes
});
var blub_prolog_builtins_BinaryArithmeticPred = function(functor,fn) {
	blub_prolog_builtins_BuiltinPredicate.call(this,functor,2);
	this.fn = fn;
};
$hxClasses["blub.prolog.builtins.BinaryArithmeticPred"] = blub_prolog_builtins_BinaryArithmeticPred;
blub_prolog_builtins_BinaryArithmeticPred.__name__ = "blub.prolog.builtins.BinaryArithmeticPred";
blub_prolog_builtins_BinaryArithmeticPred.get = function() {
	return [new blub_prolog_builtins_BinaryArithmeticPred("=:=",function(a,b) {
		return a == b;
	}),new blub_prolog_builtins_BinaryArithmeticPred("=\\=",function(a,b) {
		return a != b;
	}),new blub_prolog_builtins_BinaryArithmeticPred(">",function(a,b) {
		return a > b;
	}),new blub_prolog_builtins_BinaryArithmeticPred("<",function(a,b) {
		return a < b;
	}),new blub_prolog_builtins_BinaryArithmeticPred(">=",function(a,b) {
		return a >= b;
	}),new blub_prolog_builtins_BinaryArithmeticPred("=<",function(a,b) {
		return a <= b;
	})];
};
blub_prolog_builtins_BinaryArithmeticPred.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_BinaryArithmeticPred.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	fn: null
	,execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env);
		var b = args[1].toValue(env);
		var numA = a.asNumber();
		var numB = b.asNumber();
		var valA = numA == null ? engine.get_arithmetic().evaluate(a) : numA.value;
		var valB = numB == null ? engine.get_arithmetic().evaluate(b) : numB.value;
		if(!this.fn(valA,valB)) {
			engine.fail();
		}
	}
	,__class__: blub_prolog_builtins_BinaryArithmeticPred
});
var blub_prolog_builtins_Breakpoint = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"break",0);
};
$hxClasses["blub.prolog.builtins.Breakpoint"] = blub_prolog_builtins_Breakpoint;
blub_prolog_builtins_Breakpoint.__name__ = "blub.prolog.builtins.Breakpoint";
blub_prolog_builtins_Breakpoint.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Breakpoint.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		engine.breakpoint();
	}
	,__class__: blub_prolog_builtins_Breakpoint
});
var blub_prolog_builtins_True = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"true",0);
};
$hxClasses["blub.prolog.builtins.True"] = blub_prolog_builtins_True;
blub_prolog_builtins_True.__name__ = "blub.prolog.builtins.True";
blub_prolog_builtins_True.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_True.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
	}
	,__class__: blub_prolog_builtins_True
});
var blub_prolog_builtins_Fail = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"fail",0);
};
$hxClasses["blub.prolog.builtins.Fail"] = blub_prolog_builtins_Fail;
blub_prolog_builtins_Fail.__name__ = "blub.prolog.builtins.Fail";
blub_prolog_builtins_Fail.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Fail.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		engine.fail();
	}
	,__class__: blub_prolog_builtins_Fail
});
var blub_prolog_builtins_Repeat = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"repeat",0);
};
$hxClasses["blub.prolog.builtins.Repeat"] = blub_prolog_builtins_Repeat;
blub_prolog_builtins_Repeat.__name__ = "blub.prolog.builtins.Repeat";
blub_prolog_builtins_Repeat.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Repeat.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		new blub_prolog_engine_parts_RepeatingChoicePoint(engine);
	}
	,__class__: blub_prolog_builtins_Repeat
});
var blub_prolog_builtins_Is = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"is",2);
};
$hxClasses["blub.prolog.builtins.Is"] = blub_prolog_builtins_Is;
blub_prolog_builtins_Is.__name__ = "blub.prolog.builtins.Is";
blub_prolog_builtins_Is.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Is.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env);
		var b = args[1].toValue(env);
		var num = b.asNumber();
		if(num == null) {
			num = new blub_prolog_terms_NumberTerm(engine.get_arithmetic().evaluate(b));
		}
		engine.unify(a,num);
	}
	,__class__: blub_prolog_builtins_Is
});
var blub_prolog_builtins_Unify = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"=",2);
};
$hxClasses["blub.prolog.builtins.Unify"] = blub_prolog_builtins_Unify;
blub_prolog_builtins_Unify.__name__ = "blub.prolog.builtins.Unify";
blub_prolog_builtins_Unify.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Unify.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		engine.unify(args[0].toValue(env),args[1].toValue(env));
	}
	,__class__: blub_prolog_builtins_Unify
});
var blub_prolog_builtins_Identical = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"==",2);
};
$hxClasses["blub.prolog.builtins.Identical"] = blub_prolog_builtins_Identical;
blub_prolog_builtins_Identical.__name__ = "blub.prolog.builtins.Identical";
blub_prolog_builtins_Identical.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Identical.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		if(!args[0].toValue(env).equals(args[1].toValue(env))) {
			engine.fail();
		}
	}
	,__class__: blub_prolog_builtins_Identical
});
var blub_prolog_builtins_NotIdentical = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"\\==",2);
};
$hxClasses["blub.prolog.builtins.NotIdentical"] = blub_prolog_builtins_NotIdentical;
blub_prolog_builtins_NotIdentical.__name__ = "blub.prolog.builtins.NotIdentical";
blub_prolog_builtins_NotIdentical.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_NotIdentical.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		if(args[0].toValue(env).equals(args[1].toValue(env))) {
			engine.fail();
		}
	}
	,__class__: blub_prolog_builtins_NotIdentical
});
var blub_prolog_builtins_Cut = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"!",0);
};
$hxClasses["blub.prolog.builtins.Cut"] = blub_prolog_builtins_Cut;
blub_prolog_builtins_Cut.__name__ = "blub.prolog.builtins.Cut";
blub_prolog_builtins_Cut.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Cut.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		engine.cut();
	}
	,__class__: blub_prolog_builtins_Cut
});
var blub_prolog_builtins_Call = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"call",1);
};
$hxClasses["blub.prolog.builtins.Call"] = blub_prolog_builtins_Call;
blub_prolog_builtins_Call.__name__ = "blub.prolog.builtins.Call";
blub_prolog_builtins_Call.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Call.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var goal = args[0].toValue(engine.environment).dereference();
		try {
			var instruction = new blub_prolog_builtins_CallCompiler(engine).compileCall(goal);
			engine.codeStack = new blub_prolog_engine_parts_CodeFrame(engine);
			var cp = new blub_prolog_engine_parts_CutPoint(engine);
			engine.cutBarrier = { prev : engine.cutBarrier, choice : cp};
			engine.codePointer = instruction;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof blub_prolog_builtins_NotCallable)) {
				var ex = _g1;
				engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_callable,ex.culprit,engine.context));
			} else {
				throw _g;
			}
		}
	}
	,__class__: blub_prolog_builtins_Call
});
var blub_prolog_builtins_Once = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"once",1);
};
$hxClasses["blub.prolog.builtins.Once"] = blub_prolog_builtins_Once;
blub_prolog_builtins_Once.__name__ = "blub.prolog.builtins.Once";
blub_prolog_builtins_Once.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Once.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	compile: function(compiler,pred,term) {
		var call = compiler.database.lookup(blub_prolog_builtins_Call.INDICATOR);
		compiler.add(blub_prolog_compiler_Instruction.cut_point);
		compiler.add(blub_prolog_compiler_Instruction.call_builtin("call/1",term.asStructure().getArgs()));
		compiler.add(blub_prolog_compiler_Instruction.cut);
	}
	,__class__: blub_prolog_builtins_Once
});
var blub_prolog_builtins_NotUnifiable = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"\\=",2);
};
$hxClasses["blub.prolog.builtins.NotUnifiable"] = blub_prolog_builtins_NotUnifiable;
blub_prolog_builtins_NotUnifiable.__name__ = "blub.prolog.builtins.NotUnifiable";
blub_prolog_builtins_NotUnifiable.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_NotUnifiable.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env);
		var b = args[1].toValue(env);
		if(a.unify(b,engine)) {
			engine.fail();
		}
	}
	,__class__: blub_prolog_builtins_NotUnifiable
});
var blub_prolog_builtins_NotProvable = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"\\+",1);
};
$hxClasses["blub.prolog.builtins.NotProvable"] = blub_prolog_builtins_NotProvable;
blub_prolog_builtins_NotProvable.__name__ = "blub.prolog.builtins.NotProvable";
blub_prolog_builtins_NotProvable.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_NotProvable.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	compile: function(compiler,pred,term) {
		var atoms = compiler.database.context;
		var trueAtom = atoms.getAtom("true");
		var failAtom = atoms.getAtom("fail");
		var cutAtom = atoms.getAtom("!");
		var conjunc2 = new blub_prolog_terms_Structure(atoms.getAtom(","));
		conjunc2.addArg(cutAtom);
		conjunc2.addArg(failAtom);
		var conjunc1 = new blub_prolog_terms_Structure(atoms.getAtom(","));
		conjunc1.addArg(term.asStructure().argAt(0));
		conjunc1.addArg(conjunc2);
		var disjunc = new blub_prolog_terms_Structure(atoms.getAtom(";"));
		disjunc.addArg(conjunc1);
		disjunc.addArg(trueAtom);
		compiler.compileNestedTerm(disjunc,true);
	}
	,__class__: blub_prolog_builtins_NotProvable
});
var blub_prolog_builtins_IfThen = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"->",2);
};
$hxClasses["blub.prolog.builtins.IfThen"] = blub_prolog_builtins_IfThen;
blub_prolog_builtins_IfThen.__name__ = "blub.prolog.builtins.IfThen";
blub_prolog_builtins_IfThen.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_IfThen.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	compile: function(compiler,pred,term) {
		var ifThen = term.asStructure();
		var ifTerm = compiler.clauseTerm(ifThen.argAt(0));
		var thenTerm = compiler.clauseTerm(ifThen.argAt(1));
		compiler.add(blub_prolog_compiler_Instruction.cut_point);
		compiler.compileTerm(ifTerm);
		compiler.add(blub_prolog_compiler_Instruction.cut);
		compiler.compileTerm(thenTerm);
	}
	,__class__: blub_prolog_builtins_IfThen
});
var blub_prolog_builtins_IfThenElse = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"#if_then_else",3);
};
$hxClasses["blub.prolog.builtins.IfThenElse"] = blub_prolog_builtins_IfThenElse;
blub_prolog_builtins_IfThenElse.__name__ = "blub.prolog.builtins.IfThenElse";
blub_prolog_builtins_IfThenElse.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_IfThenElse.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	compile: function(compiler,pred,term) {
		var ifThen = term.asStructure();
		var ifTerm = ifThen.argAt(0);
		var thenTerm = ifThen.argAt(1);
		var elseTerm = ifThen.argAt(2);
		var atoms = compiler.database.context;
		var cutAtom = atoms.getAtom("!");
		var conjunc2 = new blub_prolog_terms_Structure(atoms.getAtom(","));
		conjunc2.addArg(cutAtom);
		conjunc2.addArg(thenTerm);
		var conjunc1 = new blub_prolog_terms_Structure(atoms.getAtom(","));
		conjunc1.addArg(ifTerm);
		conjunc1.addArg(conjunc2);
		var disjunc = new blub_prolog_terms_Structure(atoms.getAtom(";"));
		disjunc.addArg(conjunc1);
		disjunc.addArg(elseTerm);
		compiler.compileNestedTerm(disjunc,true);
	}
	,__class__: blub_prolog_builtins_IfThenElse
});
var blub_prolog_builtins_Retract = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"retract",1);
};
$hxClasses["blub.prolog.builtins.Retract"] = blub_prolog_builtins_Retract;
blub_prolog_builtins_Retract.__name__ = "blub.prolog.builtins.Retract";
blub_prolog_builtins_Retract.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Retract.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var term = args[0].toValue(env).dereference();
		if(!js_Boot.__implements(term,blub_prolog_terms_ClauseTerm)) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_callable,term,engine.context));
			return;
		}
		var ct = term;
		var functor = ct.getIndicator();
		var predicate = engine.database.lookup(functor);
		if(predicate == null) {
			return;
		}
		var clause = predicate.clauses();
		while(clause.hasNext()) {
			var clause1 = clause.next();
			var cterm = clause1.term;
			var env = clause1.variableContext.createEnvironment();
			var vterm = cterm.toValue(env);
			if(vterm.unify(term,null)) {
				engine.makeTransaction().retract(clause1);
				return;
			}
		}
	}
	,__class__: blub_prolog_builtins_Retract
});
var blub_prolog_builtins_Timestamp = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"timestamp",1);
};
$hxClasses["blub.prolog.builtins.Timestamp"] = blub_prolog_builtins_Timestamp;
blub_prolog_builtins_Timestamp.__name__ = "blub.prolog.builtins.Timestamp";
blub_prolog_builtins_Timestamp.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Timestamp.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		engine.unify(args[0].toValue(engine.environment),new blub_prolog_terms_NumberTerm(HxOverrides.now() / 1000));
	}
	,__class__: blub_prolog_builtins_Timestamp
});
var blub_prolog_builtins_Gensym = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"gensym",2);
};
$hxClasses["blub.prolog.builtins.Gensym"] = blub_prolog_builtins_Gensym;
blub_prolog_builtins_Gensym.__name__ = "blub.prolog.builtins.Gensym";
blub_prolog_builtins_Gensym.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Gensym.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var base = args[0].toValue(env);
		var baseAtom = base.asAtom();
		if(baseAtom == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_atom,base,engine.context));
		}
		engine.unify(args[1].toValue(env),blub_prolog_terms_Atom.unregisteredAtom(baseAtom.text + blub_prolog_builtins_Gensym.count++));
	}
	,__class__: blub_prolog_builtins_Gensym
});
var blub_prolog_builtins_Univ = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"=..",2);
};
$hxClasses["blub.prolog.builtins.Univ"] = blub_prolog_builtins_Univ;
blub_prolog_builtins_Univ.__name__ = "blub.prolog.builtins.Univ";
blub_prolog_builtins_Univ.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Univ.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env);
		var b = args[1].toValue(env);
		var refA = a.asReference();
		var refB = b.asReference();
		if(refA != null && refB != null) {
			engine.raiseException(blub_prolog_RuntimeError.instantiationError(engine.context));
			return;
		}
		if(refA != null) {
			var struB = b.asStructure();
			if(struB == null || struB.getName() != blub_prolog_terms_Structure.CONS_LIST) {
				engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_list,b,engine.context));
				return;
			}
			var args = [];
			var s = struB;
			while(s != null) {
				var tail = s.argAt(1);
				if(tail == blub_prolog_terms_Structure.EMPTY_LIST) {
					break;
				}
				var tailStru = tail.asStructure();
				if(tailStru == null || tailStru.getName() != blub_prolog_terms_Structure.CONS_LIST) {
					engine.raiseException(blub_prolog_RuntimeError.instantiationError(engine.context));
					return;
				}
				args.push(tailStru.argAt(0));
				s = tailStru;
			}
			if(args.length == 0) {
				engine.unify(refA,struB.argAt(0));
				return;
			}
			var name = struB.argAt(0).asAtom();
			if(name == null) {
				engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_atom,struB.argAt(0),engine.context));
				return;
			}
			var newStru = new blub_prolog_terms_Structure(name,args);
			engine.unify(refA,newStru);
			return;
		}
		var lhsList = null;
		var lhsAtom = a.asAtom();
		if(lhsAtom != null) {
			lhsList = blub_prolog_terms_Structure.makeList([lhsAtom]);
		} else {
			var lhsStru = a.asStructure();
			if(lhsStru == null) {
				engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_compound,a,engine.context));
				return;
			}
			var elems = [];
			elems.push(lhsStru.getName());
			var _g = 0;
			var _g1 = lhsStru.getArgs();
			while(_g < _g1.length) {
				var arg = _g1[_g];
				++_g;
				elems.push(arg);
			}
			lhsList = blub_prolog_terms_Structure.makeList(elems);
		}
		engine.unify(lhsList,b);
	}
	,__class__: blub_prolog_builtins_Univ
});
var blub_prolog_builtins_Write = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"write",1);
};
$hxClasses["blub.prolog.builtins.Write"] = blub_prolog_builtins_Write;
blub_prolog_builtins_Write.__name__ = "blub.prolog.builtins.Write";
blub_prolog_builtins_Write.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Write.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		haxe_Log.trace(args[0].toValue(env).dereference().toString(),{ fileName : "src/blub/prolog/builtins/Write.hx", lineNumber : 20, className : "blub.prolog.builtins.Write", methodName : "execute"});
	}
	,__class__: blub_prolog_builtins_Write
});
var blub_prolog_builtins_Clear = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"clear",0);
};
$hxClasses["blub.prolog.builtins.Clear"] = blub_prolog_builtins_Clear;
blub_prolog_builtins_Clear.__name__ = "blub.prolog.builtins.Clear";
blub_prolog_builtins_Clear.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Clear.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
	}
	,__class__: blub_prolog_builtins_Clear
});
var blub_prolog_builtins_Stop = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"stop",0);
};
$hxClasses["blub.prolog.builtins.Stop"] = blub_prolog_builtins_Stop;
blub_prolog_builtins_Stop.__name__ = "blub.prolog.builtins.Stop";
blub_prolog_builtins_Stop.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Stop.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		engine.halt();
	}
	,__class__: blub_prolog_builtins_Stop
});
var blub_prolog_builtins_Functor = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"functor",3);
};
$hxClasses["blub.prolog.builtins.Functor"] = blub_prolog_builtins_Functor;
blub_prolog_builtins_Functor.__name__ = "blub.prolog.builtins.Functor";
blub_prolog_builtins_Functor.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Functor.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var term = args[0].toValue(env);
		var name = args[1].toValue(env);
		var arity = args[2].toValue(env);
		var termVar = term.asReference();
		if(termVar != null) {
			var nameAtom = name.asAtom();
			var arityNum = arity.asNumber();
			if(nameAtom == null || arityNum == null || arityNum.value < 0) {
				engine.raiseException(blub_prolog_RuntimeError.instantiationError(engine.context));
				return;
			}
			var newTerm = null;
			var arityVal = arityNum.value | 0;
			if(arityVal == 0) {
				newTerm = nameAtom;
			} else {
				var newStru = new blub_prolog_terms_Structure(nameAtom);
				var _g = 0;
				var _g1 = arityVal;
				while(_g < _g1) {
					var i = _g++;
					newStru.addArg(new blub_prolog_terms_Reference());
				}
				newTerm = newStru;
			}
			engine.unify(term,newTerm);
			return;
		}
		var termAtom = term.asAtom();
		if(termAtom != null) {
			if(!engine.unify(name,termAtom)) {
				return;
			}
			engine.unify(arity,new blub_prolog_terms_NumberTerm(0));
			return;
		}
		var termStru = term.asStructure();
		if(termStru != null) {
			if(!engine.unify(name,termStru.getName())) {
				return;
			}
			engine.unify(arity,new blub_prolog_terms_NumberTerm(termStru.getArity()));
			return;
		}
		engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_compound,term,engine.context));
	}
	,__class__: blub_prolog_builtins_Functor
});
var blub_prolog_builtins_ListSlice = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"list_slice",3);
};
$hxClasses["blub.prolog.builtins.ListSlice"] = blub_prolog_builtins_ListSlice;
blub_prolog_builtins_ListSlice.__name__ = "blub.prolog.builtins.ListSlice";
blub_prolog_builtins_ListSlice.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_ListSlice.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env);
		var b = args[1].toValue(env);
		var c = args[2].toValue(env);
		var listA = a.asStructure();
		var listB = b.asStructure();
		var listC = c.asReference();
		if(listA == null) {
			var emptyA = a.asAtom();
			if(emptyA != null && emptyA == blub_prolog_terms_Structure.EMPTY_LIST) {
				engine.unify(blub_prolog_terms_Structure.EMPTY_LIST,c);
				return;
			}
		}
		if(listB == null) {
			var emptyB = b.asAtom();
			if(emptyB != null && emptyB == blub_prolog_terms_Structure.EMPTY_LIST) {
				engine.unify(a,c);
				return;
			}
		}
		if(listA == null || listB == null || listC == null) {
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom("list_slice/3 requires (In,In,Out)"),engine.context));
			return;
		}
		var elems = [];
		var s = listA.listStructureIterator();
		while(s.hasNext()) {
			var s1 = s.next();
			if(s1 == listB) {
				break;
			}
			elems.push(s1.argAt(0));
		}
		engine.unify(blub_prolog_terms_Structure.makeList(elems),listC);
	}
	,__class__: blub_prolog_builtins_ListSlice
});
var blub_prolog_builtins_Stack = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"stack",2);
};
$hxClasses["blub.prolog.builtins.Stack"] = blub_prolog_builtins_Stack;
blub_prolog_builtins_Stack.__name__ = "blub.prolog.builtins.Stack";
blub_prolog_builtins_Stack.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Stack.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var h = args[0].toValue(env);
		var t = args[1].toValue(env);
		var headRef = h.asReference();
		var tailRef = t.asReference();
		if(headRef == null || tailRef == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_variable,headRef == null ? h : t,engine.context));
			return;
		}
		var head = new blub_prolog_builtins__$Stack_StackHead();
		var tail = new blub_prolog_builtins__$Stack_StackTail(head);
		engine.unify(headRef,head);
		engine.unify(tailRef,tail);
	}
	,__class__: blub_prolog_builtins_Stack
});
var blub_prolog_builtins_Member = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"member",2);
};
$hxClasses["blub.prolog.builtins.Member"] = blub_prolog_builtins_Member;
blub_prolog_builtins_Member.__name__ = "blub.prolog.builtins.Member";
blub_prolog_builtins_Member.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Member.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var elem = args[0].toValue(env);
		var list = args[1].toValue(env);
		var cp = new blub_prolog_builtins_MemberChoicePoint(engine,new blub_prolog_engine_parts_CodeFrame(engine),elem,list);
		engine.processBuiltinChoices();
	}
	,__class__: blub_prolog_builtins_Member
});
var blub_prolog_builtins_Listing = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"listing",0);
};
$hxClasses["blub.prolog.builtins.Listing"] = blub_prolog_builtins_Listing;
blub_prolog_builtins_Listing.__name__ = "blub.prolog.builtins.Listing";
blub_prolog_builtins_Listing.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_Listing.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		engine.database.listing(function(s) {
			haxe_Log.trace(s,{ fileName : "src/blub/prolog/builtins/Listing.hx", lineNumber : 15, className : "blub.prolog.builtins.Listing", methodName : "execute"});
		});
	}
	,__class__: blub_prolog_builtins_Listing
});
var blub_prolog_builtins_ThrowUp = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"throw_up",1);
};
$hxClasses["blub.prolog.builtins.ThrowUp"] = blub_prolog_builtins_ThrowUp;
blub_prolog_builtins_ThrowUp.__name__ = "blub.prolog.builtins.ThrowUp";
blub_prolog_builtins_ThrowUp.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_ThrowUp.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		throw haxe_Exception.thrown(new blub_prolog_PrologException(args[0].toValue(env).dereference(),engine.context));
	}
	,__class__: blub_prolog_builtins_ThrowUp
});
var blub_prolog_builtins_TermTypes = function(functor,fn) {
	blub_prolog_builtins_BuiltinPredicate.call(this,functor,1);
	this.fn = fn;
};
$hxClasses["blub.prolog.builtins.TermTypes"] = blub_prolog_builtins_TermTypes;
blub_prolog_builtins_TermTypes.__name__ = "blub.prolog.builtins.TermTypes";
blub_prolog_builtins_TermTypes.get = function() {
	return [new blub_prolog_builtins_TermTypes("var",function(t) {
		return t.asReference() != null;
	}),new blub_prolog_builtins_TermTypes("nonvar",function(t) {
		return t.asReference() == null;
	}),new blub_prolog_builtins_TermTypes("number",function(t) {
		return t.asNumber() != null;
	}),new blub_prolog_builtins_TermTypes("atom",function(t) {
		return t.asAtom() != null;
	}),new blub_prolog_builtins_TermTypes("atomic",function(t) {
		if(t.asAtom() == null) {
			return t.asNumber() != null;
		} else {
			return true;
		}
	}),new blub_prolog_builtins_TermTypes("compound",function(t) {
		return t.asStructure() != null;
	}),new blub_prolog_builtins_TermTypes("callable",function(t) {
		if(t.asAtom() == null) {
			return t.asStructure() != null;
		} else {
			return true;
		}
	}),new blub_prolog_builtins_TermTypes("ground",function(t) {
		return t.isGround();
	}),new blub_prolog_builtins_TermTypes("integer",function(t) {
		var num = t.asNumber();
		if(num == null) {
			return false;
		}
		var v = num.value;
		if(typeof(v) == "number") {
			return ((v | 0) === v);
		} else {
			return false;
		}
	}),new blub_prolog_builtins_TermTypes("is_list",function(t) {
		var empty = t.asAtom();
		if(empty != null) {
			return empty.isList();
		}
		var str = t.asStructure();
		if(str == null) {
			return false;
		}
		return str.isList();
	}),new blub_prolog_builtins_TermTypes("float",function(t) {
		var num = t.asNumber();
		if(num == null) {
			return false;
		}
		var v = num.value;
		return !(typeof(v) == "number" && ((v | 0) === v));
	})];
};
blub_prolog_builtins_TermTypes.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_TermTypes.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	fn: null
	,execute: function(engine,args) {
		var env = engine.environment;
		var term = args[0].toValue(env).dereference();
		if(!this.fn(term)) {
			engine.fail();
		}
	}
	,__class__: blub_prolog_builtins_TermTypes
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isInterface = function(o) {
	return o.__isInterface__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var blub_prolog_builtins_Globals = function() { };
$hxClasses["blub.prolog.builtins.Globals"] = blub_prolog_builtins_Globals;
blub_prolog_builtins_Globals.__name__ = "blub.prolog.builtins.Globals";
blub_prolog_builtins_Globals.get = function() {
	return [new blub_prolog_builtins_GetGlobal(),new blub_prolog_builtins_SetGlobal()];
};
var blub_prolog_builtins_GetGlobal = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"from_global",2);
};
$hxClasses["blub.prolog.builtins.GetGlobal"] = blub_prolog_builtins_GetGlobal;
blub_prolog_builtins_GetGlobal.__name__ = "blub.prolog.builtins.GetGlobal";
blub_prolog_builtins_GetGlobal.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_GetGlobal.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env).dereference();
		var b = args[1].toValue(env).dereference();
		var key = b.asAtom();
		if(b == null) {
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom("RHS of from_global must be atom key"),engine.context));
			return;
		}
		var this1 = engine.database.globals;
		var key = b.asAtom().text;
		var value = this1.h[key];
		if(value == null) {
			value = blub_prolog_AtomContext.GLOBALS.getAtom("null");
		}
		engine.unify(a,value);
	}
	,__class__: blub_prolog_builtins_GetGlobal
});
var blub_prolog_builtins_SetGlobal = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"to_global",2);
};
$hxClasses["blub.prolog.builtins.SetGlobal"] = blub_prolog_builtins_SetGlobal;
blub_prolog_builtins_SetGlobal.__name__ = "blub.prolog.builtins.SetGlobal";
blub_prolog_builtins_SetGlobal.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_SetGlobal.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env).dereference();
		var b = args[1].toValue(env).dereference();
		var key = b.asAtom();
		if(b == null) {
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom("RHS of to_global must be atom key"),engine.context));
			return;
		}
		engine.database.globals.h[key.text] = a;
	}
	,__class__: blub_prolog_builtins_SetGlobal
});
var blub_prolog_builtins_RebindVar = function(name) {
	blub_prolog_builtins_BuiltinPredicate.call(this,name,2);
};
$hxClasses["blub.prolog.builtins.RebindVar"] = blub_prolog_builtins_RebindVar;
blub_prolog_builtins_RebindVar.__name__ = "blub.prolog.builtins.RebindVar";
blub_prolog_builtins_RebindVar.get = function() {
	return [new blub_prolog_builtins_NonBacktrackingRebindVar(),new blub_prolog_builtins_BacktrackingRebindVar(),new blub_prolog_builtins_NonBacktrackingArithmeticRebind(),new blub_prolog_builtins_BacktrackingArithmeticRebind()];
};
blub_prolog_builtins_RebindVar.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_RebindVar.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var ref = args[0].toValue(env);
		var val = args[1].toValue(env).dereference();
		var targetRef = ref.asUnchasedReference();
		if(targetRef == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_variable,ref,engine.context));
			return;
		}
		this.bind(targetRef,val,engine);
	}
	,bind: function(targetRef,value,engine) {
		targetRef.rebindLast(value);
	}
	,__class__: blub_prolog_builtins_RebindVar
});
var blub_prolog_builtins_NonBacktrackingRebindVar = function() {
	blub_prolog_builtins_RebindVar.call(this,"<=");
};
$hxClasses["blub.prolog.builtins.NonBacktrackingRebindVar"] = blub_prolog_builtins_NonBacktrackingRebindVar;
blub_prolog_builtins_NonBacktrackingRebindVar.__name__ = "blub.prolog.builtins.NonBacktrackingRebindVar";
blub_prolog_builtins_NonBacktrackingRebindVar.__super__ = blub_prolog_builtins_RebindVar;
blub_prolog_builtins_NonBacktrackingRebindVar.prototype = $extend(blub_prolog_builtins_RebindVar.prototype,{
	__class__: blub_prolog_builtins_NonBacktrackingRebindVar
});
var blub_prolog_builtins_BacktrackingRebindVar = function() {
	blub_prolog_builtins_RebindVar.call(this,"<=&");
};
$hxClasses["blub.prolog.builtins.BacktrackingRebindVar"] = blub_prolog_builtins_BacktrackingRebindVar;
blub_prolog_builtins_BacktrackingRebindVar.__name__ = "blub.prolog.builtins.BacktrackingRebindVar";
blub_prolog_builtins_BacktrackingRebindVar.__super__ = blub_prolog_builtins_RebindVar;
blub_prolog_builtins_BacktrackingRebindVar.prototype = $extend(blub_prolog_builtins_RebindVar.prototype,{
	bind: function(targetRef,value,engine) {
		targetRef.rebindLast(value,engine);
	}
	,__class__: blub_prolog_builtins_BacktrackingRebindVar
});
var blub_prolog_builtins_ArithmeticRebind = function(name) {
	blub_prolog_builtins_RebindVar.call(this,name);
};
$hxClasses["blub.prolog.builtins.ArithmeticRebind"] = blub_prolog_builtins_ArithmeticRebind;
blub_prolog_builtins_ArithmeticRebind.__name__ = "blub.prolog.builtins.ArithmeticRebind";
blub_prolog_builtins_ArithmeticRebind.__super__ = blub_prolog_builtins_RebindVar;
blub_prolog_builtins_ArithmeticRebind.prototype = $extend(blub_prolog_builtins_RebindVar.prototype,{
	bind: function(targetRef,value,engine) {
		var num = value.asNumber();
		if(num == null) {
			num = new blub_prolog_terms_NumberTerm(engine.get_arithmetic().evaluate(value));
		}
		this.bindNum(targetRef,num,engine);
	}
	,bindNum: function(targetRef,value,engine) {
		targetRef.rebindLast(value);
	}
	,__class__: blub_prolog_builtins_ArithmeticRebind
});
var blub_prolog_builtins_NonBacktrackingArithmeticRebind = function() {
	blub_prolog_builtins_ArithmeticRebind.call(this,"<#");
};
$hxClasses["blub.prolog.builtins.NonBacktrackingArithmeticRebind"] = blub_prolog_builtins_NonBacktrackingArithmeticRebind;
blub_prolog_builtins_NonBacktrackingArithmeticRebind.__name__ = "blub.prolog.builtins.NonBacktrackingArithmeticRebind";
blub_prolog_builtins_NonBacktrackingArithmeticRebind.__super__ = blub_prolog_builtins_ArithmeticRebind;
blub_prolog_builtins_NonBacktrackingArithmeticRebind.prototype = $extend(blub_prolog_builtins_ArithmeticRebind.prototype,{
	__class__: blub_prolog_builtins_NonBacktrackingArithmeticRebind
});
var blub_prolog_builtins_BacktrackingArithmeticRebind = function() {
	blub_prolog_builtins_ArithmeticRebind.call(this,"<#&");
};
$hxClasses["blub.prolog.builtins.BacktrackingArithmeticRebind"] = blub_prolog_builtins_BacktrackingArithmeticRebind;
blub_prolog_builtins_BacktrackingArithmeticRebind.__name__ = "blub.prolog.builtins.BacktrackingArithmeticRebind";
blub_prolog_builtins_BacktrackingArithmeticRebind.__super__ = blub_prolog_builtins_ArithmeticRebind;
blub_prolog_builtins_BacktrackingArithmeticRebind.prototype = $extend(blub_prolog_builtins_ArithmeticRebind.prototype,{
	bindNum: function(targetRef,value,engine) {
		targetRef.rebindLast(value,engine);
	}
	,__class__: blub_prolog_builtins_BacktrackingArithmeticRebind
});
var blub_prolog_builtins_objects_ObjectBuiltins = function() { };
$hxClasses["blub.prolog.builtins.objects.ObjectBuiltins"] = blub_prolog_builtins_objects_ObjectBuiltins;
blub_prolog_builtins_objects_ObjectBuiltins.__name__ = "blub.prolog.builtins.objects.ObjectBuiltins";
blub_prolog_builtins_objects_ObjectBuiltins.get = function() {
	return [new blub_prolog_builtins_objects_DotAccessor(),new blub_prolog_builtins_objects_ArrowAssigner()];
};
var blub_prolog_builtins_objects_DotAccessor = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,".",2);
};
$hxClasses["blub.prolog.builtins.objects.DotAccessor"] = blub_prolog_builtins_objects_DotAccessor;
blub_prolog_builtins_objects_DotAccessor.__name__ = "blub.prolog.builtins.objects.DotAccessor";
blub_prolog_builtins_objects_DotAccessor.evalDot = function(engine,termA,termB) {
	var stru = termA.asStructure();
	if(stru != null && stru.getName().text == "." && stru.getArity() == 2) {
		termA = blub_prolog_Marshal.valueToTerm(blub_prolog_builtins_objects_DotAccessor.evalDot(engine,stru.argAt(0),stru.argAt(1)));
	}
	var atom = termA.asAtom();
	if(atom == null) {
		throw haxe_Exception.thrown("is not an atom: " + Std.string(termA) + " in " + Std.string(termA) + "." + Std.string(termB));
	}
	if(atom.object == null) {
		atom.object = new blub_prolog_builtins_objects_HashObjectWrapper(atom);
	}
	if(!js_Boot.__implements(atom.object,blub_prolog_builtins_objects_ObjectWrapper)) {
		throw haxe_Exception.thrown("is not an atom wrapping a native object: " + Std.string(termA) + " in " + Std.string(termA) + "." + Std.string(termB));
	}
	var wrapper = atom.object;
	var nameAtom = termB.asAtom();
	if(nameAtom != null) {
		var name = nameAtom.text;
		return wrapper.getProperty(name);
	}
	var method = termB.asStructure();
	if(method != null) {
		var args = blub_prolog_builtins_objects_DotAccessor.makeArgs(engine,method.getArgs());
		return wrapper.callMethod(method.getName().text,args);
	}
	throw haxe_Exception.thrown("is not a field name or method call: " + Std.string(termB) + " in " + Std.string(termA) + "." + Std.string(termB));
};
blub_prolog_builtins_objects_DotAccessor.eval = function(engine,expr) {
	var stru = expr.asStructure();
	if(stru != null) {
		if(stru.getArity() == 1 && stru.getNameText() == "term") {
			return stru.argAt(0);
		}
		if(blub_prolog_engine_ArithmeticEvaluator.isArithmetic(stru)) {
			return engine.get_arithmetic().evalFunc(stru);
		}
		if(stru.getName().text == "." && stru.getArity() == 2) {
			return blub_prolog_builtins_objects_DotAccessor.evalDot(engine,stru.argAt(0),stru.argAt(1));
		} else {
			var className = stru.getName().text;
			var clazz = $hxClasses[className];
			if(clazz == null) {
				throw haxe_Exception.thrown("Could not find class " + className);
			}
			var args = blub_prolog_builtins_objects_DotAccessor.makeArgs(engine,stru.getArgs());
			return Type.createInstance(clazz,args);
		}
	}
	return blub_prolog_Marshal.termToValue(expr);
};
blub_prolog_builtins_objects_DotAccessor.makeArgs = function(engine,terms) {
	var args = [];
	if(terms.length == 1) {
		var arg1 = terms[0].asAtom();
		if(arg1 != null && arg1.text == "void") {
			return args;
		}
	}
	var _g = 0;
	while(_g < terms.length) {
		var t = terms[_g];
		++_g;
		args.push(blub_prolog_builtins_objects_DotAccessor.eval(engine,t.asValueTerm()));
	}
	return args;
};
blub_prolog_builtins_objects_DotAccessor.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_objects_DotAccessor.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env).dereference();
		var b = args[1].toValue(env).dereference();
		blub_prolog_builtins_objects_DotAccessor.evalDot(engine,a,b);
	}
	,__class__: blub_prolog_builtins_objects_DotAccessor
});
var blub_prolog_builtins_objects_ArrowAssigner = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"<-",2);
};
$hxClasses["blub.prolog.builtins.objects.ArrowAssigner"] = blub_prolog_builtins_objects_ArrowAssigner;
blub_prolog_builtins_objects_ArrowAssigner.__name__ = "blub.prolog.builtins.objects.ArrowAssigner";
blub_prolog_builtins_objects_ArrowAssigner.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_objects_ArrowAssigner.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var a = args[0].toValue(env).dereference();
		var b = args[1].toValue(env).dereference();
		var value = null;
		try {
			value = blub_prolog_builtins_objects_DotAccessor.eval(engine,b);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom(Std.string(e)),engine.context));
			return;
		}
		if(a.asReference() != null) {
			var valTerm = blub_prolog_Marshal.valueToTerm(value);
			engine.unify(a,valTerm);
			return;
		}
		var target = a.asStructure();
		if(target == null || target.getName().text != "." || target.getArity() != 2) {
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom("target of <- must be a var or dot-accessor: " + a.toString()),engine.context));
			return;
		}
		var atom = null;
		var lhsRef = target.argAt(0).asReference();
		if(lhsRef != null) {
			atom = blub_prolog_Marshal.newAtom();
			engine.unify(lhsRef,atom);
		} else {
			atom = target.argAt(0).asAtom();
		}
		if(atom == null) {
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom("is not an atom: " + Std.string(target.argAt(0)) + " in " + target.toString()),engine.context));
			return;
		}
		if(atom.object == null) {
			atom.object = new blub_prolog_builtins_objects_HashObjectWrapper(atom);
		}
		if(!js_Boot.__implements(atom.object,blub_prolog_builtins_objects_ObjectWrapper)) {
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom("is not an atom wrapping a native object: " + Std.string(atom) + " in " + target.toString()),engine.context));
			return;
		}
		var nameAtom = target.argAt(1).asAtom();
		if(nameAtom == null) {
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom("is not an atom representing a field name: " + Std.string(target.argAt(1)) + " in " + target.toString()),engine.context));
			return;
		}
		var name = nameAtom.text;
		var wrapper = atom.object;
		wrapper.setProperty(name,value);
	}
	,__class__: blub_prolog_builtins_objects_ArrowAssigner
});
var blub_prolog_builtins_async_AsyncBuiltins = function() { };
$hxClasses["blub.prolog.builtins.async.AsyncBuiltins"] = blub_prolog_builtins_async_AsyncBuiltins;
blub_prolog_builtins_async_AsyncBuiltins.__name__ = "blub.prolog.builtins.async.AsyncBuiltins";
blub_prolog_builtins_async_AsyncBuiltins.get = function() {
	var send = new blub_prolog_builtins_async_messages_Send();
	var receive = new blub_prolog_builtins_async_messages_Receive(send.channels);
	return [new blub_prolog_builtins_async_Sleep(),send,receive,new blub_prolog_builtins_async_Spawn(),new blub_prolog_builtins_async_Spawns(),new blub_prolog_builtins_async_Stop()];
};
var blub_prolog_builtins_async_messages_Send = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"send",2);
	this.channels = new haxe_ds_StringMap();
};
$hxClasses["blub.prolog.builtins.async.messages.Send"] = blub_prolog_builtins_async_messages_Send;
blub_prolog_builtins_async_messages_Send.__name__ = "blub.prolog.builtins.async.messages.Send";
blub_prolog_builtins_async_messages_Send.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_async_messages_Send.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	channels: null
	,execute: function(engine,args) {
		var env = engine.environment;
		var channel = args[0].toValue(env).asAtom();
		var msg = args[1].toValue(env).dereference();
		if(channel == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_atom,channel,engine.context));
		}
		if(msg.isGround()) {
			var msgChannel = this.channels.h[channel.text];
			if(msgChannel == null) {
				return;
			}
			msgChannel.send(msg);
			return;
		}
		engine.raiseException(blub_prolog_RuntimeError.instantiationError(engine.context));
	}
	,__class__: blub_prolog_builtins_async_messages_Send
});
var blub_prolog_builtins_async_messages_Receive = function(channels) {
	blub_prolog_builtins_BuiltinPredicate.call(this,"receive",2);
	this.channels = channels;
};
$hxClasses["blub.prolog.builtins.async.messages.Receive"] = blub_prolog_builtins_async_messages_Receive;
blub_prolog_builtins_async_messages_Receive.__name__ = "blub.prolog.builtins.async.messages.Receive";
blub_prolog_builtins_async_messages_Receive.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_async_messages_Receive.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	channels: null
	,execute: function(engine,args) {
		var env = engine.environment;
		var channel = args[0].toValue(env).asAtom();
		var msg = args[1].toValue(env).dereference();
		if(channel == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_atom,channel,engine.context));
		}
		var msgChannel = this.channels.h[channel.text];
		if(msgChannel == null) {
			msgChannel = new blub_prolog_builtins_async_messages_MessageChannel(channel.text,this.channels);
		}
		var listener = msgChannel.listen(engine,msg);
		engine.beginAsync(new blub_prolog_builtins_async_AsyncOperationImpl("receive(" + channel.text + "," + Std.string($bind(msg,msg.toString)) + ")",function() {
			msgChannel.unlisten(listener);
		}));
	}
	,__class__: blub_prolog_builtins_async_messages_Receive
});
var blub_prolog_builtins_async_Sleep = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"sleep",1);
};
$hxClasses["blub.prolog.builtins.async.Sleep"] = blub_prolog_builtins_async_Sleep;
blub_prolog_builtins_async_Sleep.__name__ = "blub.prolog.builtins.async.Sleep";
blub_prolog_builtins_async_Sleep.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_async_Sleep.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var time = args[0].toValue(env).asNumber();
		if(time == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_number,time,engine.context));
		}
		var millis = time.value | 0;
		engine.beginAsync(new blub_prolog_builtins_async_AsyncOperationImpl("sleep(" + millis + ")",null));
		haxe_Timer.delay(function() {
			engine.continueAsync();
		},millis);
	}
	,__class__: blub_prolog_builtins_async_Sleep
});
var blub_prolog_builtins_async_Spawn = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"spawn",1);
};
$hxClasses["blub.prolog.builtins.async.Spawn"] = blub_prolog_builtins_async_Spawn;
blub_prolog_builtins_async_Spawn.__name__ = "blub.prolog.builtins.async.Spawn";
blub_prolog_builtins_async_Spawn.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_async_Spawn.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var queryArg = args[0].toValue(env).dereference();
		var stru = queryArg.asStructure();
		if(stru != null) {
			if(stru.getName().text == "{}") {
				queryArg = stru.argAt(0).asValueTerm();
				stru = queryArg.asStructure();
				if(stru != null) {
					queryArg = stru.variablize();
				}
			} else {
				queryArg = stru.variablize();
			}
		}
		if(!js_Boot.__implements(queryArg,blub_prolog_terms_ClauseTerm)) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_callable,queryArg,engine.context));
		}
		var query = new blub_prolog_async_AsyncQuery(engine.database,queryArg);
		query.execute();
	}
	,__class__: blub_prolog_builtins_async_Spawn
});
var blub_prolog_builtins_async_Spawns = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"spawns",2);
	this.count = 0;
};
$hxClasses["blub.prolog.builtins.async.Spawns"] = blub_prolog_builtins_async_Spawns;
blub_prolog_builtins_async_Spawns.__name__ = "blub.prolog.builtins.async.Spawns";
blub_prolog_builtins_async_Spawns.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_async_Spawns.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	count: null
	,execute: function(engine,args) {
		var env = engine.environment;
		var ref = args[0].toValue(env).asReference();
		var queryArg = args[1].toValue(env).dereference();
		if(ref == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_variable,args[0],engine.context));
		}
		var stru = queryArg.asStructure();
		if(stru != null) {
			if(stru.getName().text == "{}") {
				queryArg = stru.argAt(0).asValueTerm();
				stru = queryArg.asStructure();
				if(stru != null) {
					queryArg = stru.variablize();
				}
			} else {
				queryArg = stru.variablize();
			}
		}
		if(!js_Boot.__implements(queryArg,blub_prolog_terms_ClauseTerm)) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_callable,queryArg,engine.context));
		}
		var query = new blub_prolog_async_AsyncQuery(engine.database,queryArg);
		query.execute();
		var atom = blub_prolog_terms_Atom.unregisteredAtom("spawned-query#" + this.count++);
		atom.object = query.get_engine();
		engine.unify(ref,atom);
	}
	,__class__: blub_prolog_builtins_async_Spawns
});
var blub_prolog_builtins_async_Stop = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"stop",1);
};
$hxClasses["blub.prolog.builtins.async.Stop"] = blub_prolog_builtins_async_Stop;
blub_prolog_builtins_async_Stop.__name__ = "blub.prolog.builtins.async.Stop";
blub_prolog_builtins_async_Stop.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_async_Stop.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var atom = args[0].toValue(env).asAtom();
		if(atom == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_atom,args[0],engine.context));
		}
		if(atom.object == null || !((atom.object) instanceof blub_prolog_engine_QueryEngine)) {
			engine.raiseException(new blub_prolog_PrologException(blub_prolog_terms_Atom.unregisteredAtom("atom must contain a spawned query: " + Std.string(atom)),engine.context));
			return;
		}
		var eng2 = atom.object;
		eng2.halt();
	}
	,__class__: blub_prolog_builtins_async_Stop
});
var blub_prolog_builtins_meta_MetaBuiltins = function() { };
$hxClasses["blub.prolog.builtins.meta.MetaBuiltins"] = blub_prolog_builtins_meta_MetaBuiltins;
blub_prolog_builtins_meta_MetaBuiltins.__name__ = "blub.prolog.builtins.meta.MetaBuiltins";
blub_prolog_builtins_meta_MetaBuiltins.get = function() {
	return [new blub_prolog_builtins_meta_MetaAbort(),new blub_prolog_builtins_meta_MetaQuery(),new blub_prolog_builtins_meta_MetaSolution()];
};
var blub_prolog_builtins_meta_MetaAbort = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"abort",1);
};
$hxClasses["blub.prolog.builtins.meta.MetaAbort"] = blub_prolog_builtins_meta_MetaAbort;
blub_prolog_builtins_meta_MetaAbort.__name__ = "blub.prolog.builtins.meta.MetaAbort";
blub_prolog_builtins_meta_MetaAbort.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_meta_MetaAbort.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var atom = args[0].toValue(env).dereference().asAtom();
		if(atom == null || atom.object == null) {
			return;
		}
		if(!((atom.object) instanceof blub_prolog_builtins_meta_TemplateQuery)) {
			return;
		}
		var query = atom.object;
		query.halt();
		atom.object = null;
	}
	,__class__: blub_prolog_builtins_meta_MetaAbort
});
var blub_prolog_builtins_meta_MetaQuery = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"query",3);
};
$hxClasses["blub.prolog.builtins.meta.MetaQuery"] = blub_prolog_builtins_meta_MetaQuery;
blub_prolog_builtins_meta_MetaQuery.__name__ = "blub.prolog.builtins.meta.MetaQuery";
blub_prolog_builtins_meta_MetaQuery.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_meta_MetaQuery.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var queryTerm = args[0].toValue(env).dereference();
		var template = args[1].toValue(env).dereference();
		var queryVar = args[2].toValue(env).dereference();
		if(queryVar.asReference() == null) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_variable,queryVar,engine.context));
			return;
		}
		if(!js_Boot.__implements(queryTerm,blub_prolog_terms_ClauseTerm)) {
			engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_callable,queryTerm,engine.context));
			return;
		}
		var queryClause = queryTerm;
		var query = new blub_prolog_builtins_meta_TemplateQuery(engine,queryClause,template);
		var atom = blub_prolog_terms_Atom.unregisteredAtom("query:");
		atom.object = query;
		engine.unify(queryVar,atom);
	}
	,__class__: blub_prolog_builtins_meta_MetaQuery
});
var blub_prolog_builtins_meta_MetaSolution = function() {
	blub_prolog_builtins_BuiltinPredicate.call(this,"solution",2);
};
$hxClasses["blub.prolog.builtins.meta.MetaSolution"] = blub_prolog_builtins_meta_MetaSolution;
blub_prolog_builtins_meta_MetaSolution.__name__ = "blub.prolog.builtins.meta.MetaSolution";
blub_prolog_builtins_meta_MetaSolution.__super__ = blub_prolog_builtins_BuiltinPredicate;
blub_prolog_builtins_meta_MetaSolution.prototype = $extend(blub_prolog_builtins_BuiltinPredicate.prototype,{
	execute: function(engine,args) {
		var env = engine.environment;
		var queryAtom = args[0].toValue(env).dereference().asAtom();
		var soln = args[1].toValue(env).dereference();
		if(queryAtom == null || queryAtom.object == null || !((queryAtom.object) instanceof blub_prolog_builtins_meta_TemplateQuery)) {
			engine.fail();
			return;
		}
		var query = queryAtom.object;
		if(!query.nextSolution(engine,soln)) {
			engine.fail();
		}
	}
	,__class__: blub_prolog_builtins_meta_MetaSolution
});
var blub_prolog_builtins_Builtins = function() { };
$hxClasses["blub.prolog.builtins.Builtins"] = blub_prolog_builtins_Builtins;
blub_prolog_builtins_Builtins.__name__ = "blub.prolog.builtins.Builtins";
blub_prolog_builtins_Builtins.register = function(database) {
	var _g = 0;
	var _g1 = blub_prolog_builtins_Builtins.builtins;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		b.register(database);
	}
};
var blub_prolog_builtins_NotCallable = function(culprit) {
	this.culprit = culprit;
};
$hxClasses["blub.prolog.builtins.NotCallable"] = blub_prolog_builtins_NotCallable;
blub_prolog_builtins_NotCallable.__name__ = "blub.prolog.builtins.NotCallable";
blub_prolog_builtins_NotCallable.prototype = {
	culprit: null
	,__class__: blub_prolog_builtins_NotCallable
};
var blub_prolog_compiler_CompilerBase = function(database) {
	this.database = database;
	this.instructions = [];
};
$hxClasses["blub.prolog.compiler.CompilerBase"] = blub_prolog_compiler_CompilerBase;
blub_prolog_compiler_CompilerBase.__name__ = "blub.prolog.compiler.CompilerBase";
blub_prolog_compiler_CompilerBase.prototype = {
	database: null
	,instructions: null
	,assemble: function() {
		var asm = new blub_prolog_compiler_Assembler(this.database);
		asm.translateList(this.instructions);
		return asm.operations;
	}
	,clauseTerm: function(term) {
		if(!js_Boot.__implements(term,blub_prolog_terms_ClauseTerm)) {
			throw haxe_Exception.thrown(new blub_prolog_PrologError("Bad clause term: " + Std.string(term)));
		}
		return term;
	}
	,compileTerm: function(term,tail) {
		if(tail == null) {
			tail = false;
		}
		var stru = term.asStructure();
		var args = null;
		if(stru != null) {
			switch(term.getIndicator().toString()) {
			case ",/2":
				this.compileConjunction(stru,tail);
				return;
			case ";/2":
				this.compileDisjunction(stru,tail);
				return;
			default:
			}
			args = stru.getArgs();
		}
		var pred = this.database.lookup(term.getIndicator());
		if(pred != null) {
			if(pred.isBuiltin) {
				pred.builtin.compile(this,pred,term);
				if(tail) {
					this.add(blub_prolog_compiler_Instruction.succeed);
				}
				return;
			}
		}
		if(tail) {
			this.add(blub_prolog_compiler_Instruction.tail_call(term.getIndicator().toString(),args));
		} else {
			this.add(blub_prolog_compiler_Instruction.call_pred(term.getIndicator().toString(),args));
		}
	}
	,compileNestedTerm: function(term,cutBarrier) {
		if(cutBarrier == null) {
			cutBarrier = false;
		}
		var nestedCode = this.compileOther(this.clauseTerm(term),true);
		if(cutBarrier) {
			nestedCode.unshift(blub_prolog_compiler_Instruction.cut_point);
		}
		this.add(blub_prolog_compiler_Instruction.call_nested(nestedCode));
	}
	,compileConjunction: function(stru,tail) {
		if(tail == null) {
			tail = false;
		}
		var t1 = this.clauseTerm(stru.argAt(0));
		var t2 = this.clauseTerm(stru.argAt(1));
		var t1s = t1.asStructure();
		if(t1s != null && t1s.isDisjunction()) {
			this.compileNestedTerm(t1);
		} else {
			this.compileTerm(t1,false);
		}
		this.compileTerm(t2,tail);
	}
	,compileDisjunction: function(stru,tail) {
		if(tail == null) {
			tail = false;
		}
		var t1 = this.clauseTerm(stru.argAt(0));
		var t2 = this.clauseTerm(stru.argAt(1));
		var alternative = this.compileOther(t2,tail);
		this.add(blub_prolog_compiler_Instruction.choice_point(alternative));
		this.compileTerm(t1,tail);
	}
	,compileOther: function(term,tail) {
		if(tail == null) {
			tail = false;
		}
		var altCompiler = new blub_prolog_compiler_CompilerBase(this.database);
		altCompiler.compileTerm(term,tail);
		return altCompiler.instructions;
	}
	,add: function(instruction) {
		this.instructions.push(instruction);
	}
	,logOp: function(msg) {
		if(blub_prolog_compiler_CompilerBase.ADD_LOGGING) {
			this.add(blub_prolog_compiler_Instruction.log(msg));
		}
	}
	,__class__: blub_prolog_compiler_CompilerBase
};
var blub_prolog_builtins_CallCompiler = function(engine) {
	blub_prolog_compiler_CompilerBase.call(this,engine.database);
	this.eng = engine;
};
$hxClasses["blub.prolog.builtins.CallCompiler"] = blub_prolog_builtins_CallCompiler;
blub_prolog_builtins_CallCompiler.__name__ = "blub.prolog.builtins.CallCompiler";
blub_prolog_builtins_CallCompiler.__super__ = blub_prolog_compiler_CompilerBase;
blub_prolog_builtins_CallCompiler.prototype = $extend(blub_prolog_compiler_CompilerBase.prototype,{
	eng: null
	,compileCall: function(term) {
		var clause = this.clauseTerm(term);
		var stru = clause.asStructure();
		this.compileTerm(clause,true);
		return this.assemble();
	}
	,clauseTerm: function(term) {
		if(!js_Boot.__implements(term,blub_prolog_terms_ClauseTerm)) {
			throw haxe_Exception.thrown(new blub_prolog_builtins_NotCallable(term));
		}
		return term;
	}
	,__class__: blub_prolog_builtins_CallCompiler
});
var blub_prolog_builtins_MemberChoicePoint = function(eng,frame,arg1,arg2) {
	blub_prolog_engine_parts_ChoicePoint.call(this,eng,frame);
	this.arg1 = arg1;
	this.arg2 = arg2;
	this.clause = 0;
};
$hxClasses["blub.prolog.builtins.MemberChoicePoint"] = blub_prolog_builtins_MemberChoicePoint;
blub_prolog_builtins_MemberChoicePoint.__name__ = "blub.prolog.builtins.MemberChoicePoint";
blub_prolog_builtins_MemberChoicePoint.__super__ = blub_prolog_engine_parts_ChoicePoint;
blub_prolog_builtins_MemberChoicePoint.prototype = $extend(blub_prolog_engine_parts_ChoicePoint.prototype,{
	clause: null
	,arg1: null
	,arg2: null
	,clause1: function() {
		var param2 = new blub_prolog_terms_Structure(blub_prolog_terms_Structure.CONS_LIST);
		param2.addArg(this.arg1);
		param2.addArg(new blub_prolog_terms_Reference());
		var result = param2.unify(this.arg2,this.engine);
		return result;
	}
	,clause2: function() {
		var refB = new blub_prolog_terms_Reference();
		var param2 = new blub_prolog_terms_Structure(blub_prolog_terms_Structure.CONS_LIST);
		param2.addArg(new blub_prolog_terms_Reference());
		param2.addArg(refB);
		var result = param2.unify(this.arg2,this.engine);
		if(result) {
			new blub_prolog_builtins_MemberChoicePoint(this.engine,this.frame,this.arg1,refB);
		}
	}
	,nextChoice: function() {
		this.clause++;
		switch(this.clause) {
		case 1:
			if(this.clause1()) {
				this.frame.restore();
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			this.clause2();
			return false;
		default:
			this.popThisChoicePoint();
			return false;
		}
	}
	,toString: function() {
		return "member/2 [" + (this.clause + 1) + "] (" + Std.string(this.arg1) + "," + Std.string(this.arg2) + ")";
	}
	,__class__: blub_prolog_builtins_MemberChoicePoint
});
var blub_prolog_terms_Term = function() { };
$hxClasses["blub.prolog.terms.Term"] = blub_prolog_terms_Term;
blub_prolog_terms_Term.__name__ = "blub.prolog.terms.Term";
blub_prolog_terms_Term.__isInterface__ = true;
blub_prolog_terms_Term.prototype = {
	toString: null
	,equals: null
	,isGround: null
	,hasReferences: null
	,hasVariables: null
	,toValue: null
	,asReference: null
	,asUnchasedReference: null
	,asAtom: null
	,asStructure: null
	,asNumber: null
	,asValueTerm: null
	,commaSeparated: null
	,couldMatch: null
	,match: null
	,__class__: blub_prolog_terms_Term
};
var blub_prolog_terms_ValueTerm = function() { };
$hxClasses["blub.prolog.terms.ValueTerm"] = blub_prolog_terms_ValueTerm;
blub_prolog_terms_ValueTerm.__name__ = "blub.prolog.terms.ValueTerm";
blub_prolog_terms_ValueTerm.__isInterface__ = true;
blub_prolog_terms_ValueTerm.__interfaces__ = [blub_prolog_terms_Term];
blub_prolog_terms_ValueTerm.prototype = {
	unify: null
	,dereference: null
	,gatherReferences: null
	,__class__: blub_prolog_terms_ValueTerm
};
var blub_prolog_terms_Reference = function(name) {
	this.reference = null;
	this._name = name;
};
$hxClasses["blub.prolog.terms.Reference"] = blub_prolog_terms_Reference;
blub_prolog_terms_Reference.__name__ = "blub.prolog.terms.Reference";
blub_prolog_terms_Reference.__interfaces__ = [blub_prolog_terms_ValueTerm];
blub_prolog_terms_Reference.prototype = {
	name: null
	,reference: null
	,asAtom_nochase: function() {
		if(this.reference == null) {
			return null;
		} else {
			return this.reference.asAtom();
		}
	}
	,asStructure_nochase: function() {
		if(this.reference == null) {
			return null;
		} else {
			return this.reference.asStructure();
		}
	}
	,asNumber_nochase: function() {
		if(this.reference == null) {
			return null;
		} else {
			return this.reference.asNumber();
		}
	}
	,asReference_nochase: function() {
		if(this.reference == null) {
			return this;
		} else {
			return null;
		}
	}
	,asValueTerm: function() {
		return this;
	}
	,asAtom: function() {
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		return ref.asAtom_nochase();
	}
	,asStructure: function() {
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		return ref.asStructure_nochase();
	}
	,asNumber: function() {
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		return ref.asNumber_nochase();
	}
	,asReference: function() {
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		return ref.asReference_nochase();
	}
	,asUnchasedReference: function() {
		return this;
	}
	,commaSeparated: function() {
		if(this.reference != null) {
			return this.reference.commaSeparated();
		} else {
			return [this];
		}
	}
	,gatherReferences: function(refs) {
		if(this.reference == null) {
			if(refs == null) {
				return [this];
			}
			refs.push(this);
			return refs;
		}
		return this.reference.gatherReferences(refs);
	}
	,isGround: function() {
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		var ref1 = ref;
		var val = ref1.reference;
		if(val != null) {
			return val.isGround();
		}
		return false;
	}
	,hasReferences: function() {
		return true;
	}
	,hasVariables: function() {
		return false;
	}
	,toValue: function(env) {
		return this;
	}
	,toString: function() {
		var val = this.dereference();
		if(val == this) {
			return "_" + this.get_name();
		} else {
			return this.get_name() + "=" + val.toString();
		}
	}
	,match: function(other,env,trail) {
		var val = this.dereference();
		if(val == this) {
			if(trail != null) {
				trail.newBinding(this,this.reference);
			}
			this.bind(other);
			return true;
		} else {
			return val.equals(other);
		}
	}
	,equals: function(other) {
		if(this == other) {
			return true;
		}
		var otherVal = other.asValueTerm();
		if(otherVal == null) {
			return false;
		}
		otherVal = otherVal.dereference();
		var thisVal = this.dereference();
		var otherRef = otherVal.asReference();
		var thisRef = thisVal.asReference();
		if(otherRef != null && thisRef != null) {
			return otherRef == thisRef;
		}
		if(otherRef != null || thisRef != null) {
			return false;
		}
		return thisVal.equals(otherVal);
	}
	,_name: null
	,get_name: function() {
		if(this._name == null) {
			this._name = "V_" + blub_prolog_terms_Reference.nameGen++;
		}
		return this._name;
	}
	,couldMatch: function(arg) {
		return false;
	}
	,unify: function(other,trail) {
		var here = this.dereferenceReferences();
		var hereRef = here.asReference();
		var thereRef = other.asReference();
		var there = thereRef != null ? thereRef.dereferenceReferences() : other;
		thereRef = there.asReference();
		if(hereRef == null && thereRef == null) {
			return here.unify(there,trail);
		}
		var ref;
		var value;
		if(hereRef != null) {
			ref = hereRef;
			value = there;
		} else {
			ref = thereRef;
			value = here;
		}
		if(trail != null) {
			trail.newBinding(ref,ref.reference);
		}
		ref = ref.bind(value);
		return true;
	}
	,bind: function(term,allowRebinding) {
		if(allowRebinding == null) {
			allowRebinding = false;
		}
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		var target = ref;
		if(target.reference != null && !allowRebinding) {
			throw haxe_Exception.thrown("Cannot bind already bound var " + target.toString());
		}
		if(target == term) {
			return target;
		}
		target.reference = term;
		return target;
	}
	,unbind: function(oldValue) {
		this.reference = oldValue;
	}
	,rebindLast: function(value,trail) {
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		var ref1 = ref;
		if(trail != null) {
			trail.newBinding(ref1,ref1.reference);
		}
		ref1.rebind(value);
	}
	,rebind: function(value) {
		this.reference = value;
	}
	,chaseReferences: function() {
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		return ref;
	}
	,dereference: function() {
		if(this.reference == null) {
			return this;
		}
		return this.reference.dereference();
	}
	,dereferenceReferences: function() {
		var ref = this;
		var val = this.reference;
		while(val != null) {
			var nextRef = val.asUnchasedReference();
			if(nextRef != null) {
				ref = nextRef;
				val = ref.reference;
			} else {
				break;
			}
		}
		var ref1 = ref;
		if(ref1.reference == null) {
			return ref1;
		}
		return ref1.reference;
	}
	,__class__: blub_prolog_terms_Reference
	,__properties__: {get_name:"get_name"}
};
var blub_prolog_builtins__$Stack_StackTail = function(head) {
	blub_prolog_terms_Reference.call(this);
	this.head = head;
};
$hxClasses["blub.prolog.builtins._Stack.StackTail"] = blub_prolog_builtins__$Stack_StackTail;
blub_prolog_builtins__$Stack_StackTail.__name__ = "blub.prolog.builtins._Stack.StackTail";
blub_prolog_builtins__$Stack_StackTail.__super__ = blub_prolog_terms_Reference;
blub_prolog_builtins__$Stack_StackTail.prototype = $extend(blub_prolog_terms_Reference.prototype,{
	head: null
	,bind: function(term,allowRebinding) {
		if(allowRebinding == null) {
			allowRebinding = false;
		}
		var ref = term.asReference();
		if(ref != null) {
			ref.reference = this;
			return ref;
		}
		this.head.push(term);
		return this;
	}
	,unbind: function(oldValue) {
		this.head.pop();
	}
	,__class__: blub_prolog_builtins__$Stack_StackTail
});
var blub_prolog_terms_ValueTermImpl = function() {
};
$hxClasses["blub.prolog.terms.ValueTermImpl"] = blub_prolog_terms_ValueTermImpl;
blub_prolog_terms_ValueTermImpl.__name__ = "blub.prolog.terms.ValueTermImpl";
blub_prolog_terms_ValueTermImpl.__interfaces__ = [blub_prolog_terms_ValueTerm];
blub_prolog_terms_ValueTermImpl.prototype = {
	toValue: function(env) {
		return this;
	}
	,equals: function(other) {
		return this == other;
	}
	,toString: function() {
		return "<ValueTermImpl>";
	}
	,isGround: function() {
		return true;
	}
	,hasReferences: function() {
		return false;
	}
	,hasVariables: function() {
		return false;
	}
	,asReference: function() {
		return null;
	}
	,asUnchasedReference: function() {
		return null;
	}
	,asAtom: function() {
		return null;
	}
	,asStructure: function() {
		return null;
	}
	,asNumber: function() {
		return null;
	}
	,couldMatch: function(arg) {
		return false;
	}
	,commaSeparated: function() {
		return [this];
	}
	,unify: function(other,trail) {
		return false;
	}
	,match: function(other,env,trail) {
		return false;
	}
	,dereference: function() {
		return this;
	}
	,asValueTerm: function() {
		return this;
	}
	,gatherReferences: function(refs) {
		return [];
	}
	,__class__: blub_prolog_terms_ValueTermImpl
};
var blub_prolog_terms_ClauseTerm = function() { };
$hxClasses["blub.prolog.terms.ClauseTerm"] = blub_prolog_terms_ClauseTerm;
blub_prolog_terms_ClauseTerm.__name__ = "blub.prolog.terms.ClauseTerm";
blub_prolog_terms_ClauseTerm.__isInterface__ = true;
blub_prolog_terms_ClauseTerm.__interfaces__ = [blub_prolog_terms_ValueTerm];
blub_prolog_terms_ClauseTerm.prototype = {
	getIndicator: null
	,getHead: null
	,getBody: null
	,getNameText: null
	,getFunctor: null
	,getArgs: null
	,__class__: blub_prolog_terms_ClauseTerm
};
var blub_prolog_terms_ClauseTermImpl = function(payload) {
	blub_prolog_terms_ValueTermImpl.call(this);
	this.payload = payload;
};
$hxClasses["blub.prolog.terms.ClauseTermImpl"] = blub_prolog_terms_ClauseTermImpl;
blub_prolog_terms_ClauseTermImpl.__name__ = "blub.prolog.terms.ClauseTermImpl";
blub_prolog_terms_ClauseTermImpl.__interfaces__ = [blub_prolog_terms_ClauseTerm];
blub_prolog_terms_ClauseTermImpl.__super__ = blub_prolog_terms_ValueTermImpl;
blub_prolog_terms_ClauseTermImpl.prototype = $extend(blub_prolog_terms_ValueTermImpl.prototype,{
	payload: null
	,getIndicator: function() {
		return this.payload.getIndicator();
	}
	,getHead: function() {
		return this.payload.getHead();
	}
	,getBody: function() {
		return this.payload.getBody();
	}
	,getFunctor: function() {
		return this.payload.getFunctor();
	}
	,getArgs: function() {
		return this.payload.getArgs();
	}
	,getNameText: function() {
		return this.payload.getNameText();
	}
	,equals: function(other) {
		return this.payload.equals(other);
	}
	,toString: function() {
		return this.payload.toString();
	}
	,isGround: function() {
		return this.payload.isGround();
	}
	,hasReferences: function() {
		return this.payload.hasReferences();
	}
	,hasVariables: function() {
		return this.payload.hasVariables();
	}
	,asAtom: function() {
		return this.payload.asAtom();
	}
	,asStructure: function() {
		return this.payload.asStructure();
	}
	,couldMatch: function(arg) {
		return this.payload.couldMatch(arg);
	}
	,unify: function(other,trail) {
		return this.payload.unify(other,trail);
	}
	,dereference: function() {
		return this.payload.dereference();
	}
	,__class__: blub_prolog_terms_ClauseTermImpl
});
var blub_prolog_builtins__$Stack_StackHead = function() {
	blub_prolog_terms_ClauseTermImpl.call(this,blub_prolog_terms_Structure.EMPTY_LIST);
	this.elems = new haxe_ds_List();
};
$hxClasses["blub.prolog.builtins._Stack.StackHead"] = blub_prolog_builtins__$Stack_StackHead;
blub_prolog_builtins__$Stack_StackHead.__name__ = "blub.prolog.builtins._Stack.StackHead";
blub_prolog_builtins__$Stack_StackHead.__super__ = blub_prolog_terms_ClauseTermImpl;
blub_prolog_builtins__$Stack_StackHead.prototype = $extend(blub_prolog_terms_ClauseTermImpl.prototype,{
	elems: null
	,push: function(term) {
		var s = new blub_prolog_terms_Structure(blub_prolog_terms_Structure.CONS_LIST);
		s.addArg(term);
		s.addArg(blub_prolog_terms_Structure.EMPTY_LIST);
		s.forceHasRefs();
		if(this.elems.isEmpty()) {
			this.payload = s;
		} else {
			this.elems.first().getArgs()[1] = s;
		}
		this.elems.push(s);
	}
	,pop: function() {
		if(this.elems.isEmpty()) {
			return;
		}
		this.elems.pop();
		if(this.elems.isEmpty()) {
			this.payload = blub_prolog_terms_Structure.EMPTY_LIST;
			return;
		}
		this.elems.first().getArgs()[1] = blub_prolog_terms_Structure.EMPTY_LIST;
	}
	,__class__: blub_prolog_builtins__$Stack_StackHead
});
var blub_prolog_builtins_async_AsyncOperation = function() { };
$hxClasses["blub.prolog.builtins.async.AsyncOperation"] = blub_prolog_builtins_async_AsyncOperation;
blub_prolog_builtins_async_AsyncOperation.__name__ = "blub.prolog.builtins.async.AsyncOperation";
blub_prolog_builtins_async_AsyncOperation.__isInterface__ = true;
blub_prolog_builtins_async_AsyncOperation.prototype = {
	cancel: null
	,getDescription: null
	,__class__: blub_prolog_builtins_async_AsyncOperation
};
var blub_prolog_builtins_async_AsyncOperationImpl = function(description,cancelFn) {
	this.description = description;
	this.cancelFn = cancelFn;
};
$hxClasses["blub.prolog.builtins.async.AsyncOperationImpl"] = blub_prolog_builtins_async_AsyncOperationImpl;
blub_prolog_builtins_async_AsyncOperationImpl.__name__ = "blub.prolog.builtins.async.AsyncOperationImpl";
blub_prolog_builtins_async_AsyncOperationImpl.__interfaces__ = [blub_prolog_builtins_async_AsyncOperation];
blub_prolog_builtins_async_AsyncOperationImpl.prototype = {
	description: null
	,cancelFn: null
	,cancel: function() {
		if(this.cancelFn != null) {
			this.cancelFn();
		}
	}
	,getDescription: function() {
		return this.description;
	}
	,__class__: blub_prolog_builtins_async_AsyncOperationImpl
};
var blub_prolog_builtins_async_messages_MessageChannel = function(name,channels) {
	this.name = name;
	this.channels = channels;
	channels.h[name] = this;
};
$hxClasses["blub.prolog.builtins.async.messages.MessageChannel"] = blub_prolog_builtins_async_messages_MessageChannel;
blub_prolog_builtins_async_messages_MessageChannel.__name__ = "blub.prolog.builtins.async.messages.MessageChannel";
blub_prolog_builtins_async_messages_MessageChannel.prototype = {
	name: null
	,channels: null
	,listen: function(engine,term) {
		return null;
	}
	,unlisten: function(token) {
		if(token == null) {
			return;
		}
	}
	,send: function(msg) {
	}
	,__class__: blub_prolog_builtins_async_messages_MessageChannel
};
var blub_prolog_builtins_async_messages_MessageListener = function(engine,term) {
	this.engine = engine;
	this.term = term;
};
$hxClasses["blub.prolog.builtins.async.messages.MessageListener"] = blub_prolog_builtins_async_messages_MessageListener;
blub_prolog_builtins_async_messages_MessageListener.__name__ = "blub.prolog.builtins.async.messages.MessageListener";
blub_prolog_builtins_async_messages_MessageListener.prototype = {
	engine: null
	,term: null
	,receive: function(msg) {
		var bindings = this.engine.bindings;
		if(!this.term.unify(msg,this.engine)) {
			var _this = this.engine;
			var bind = _this.bindings;
			while(bind != null && bind != bindings) {
				bind.ref.unbind(bind.old);
				bind = bind.next;
			}
			_this.bindings = bindings;
			return false;
		}
		this.engine.continueAsync();
		return true;
	}
	,__class__: blub_prolog_builtins_async_messages_MessageListener
};
var blub_prolog_builtins_lazy_LazyLoadPredicates = function(database) {
	this.database = database;
	this.init();
};
$hxClasses["blub.prolog.builtins.lazy.LazyLoadPredicates"] = blub_prolog_builtins_lazy_LazyLoadPredicates;
blub_prolog_builtins_lazy_LazyLoadPredicates.__name__ = "blub.prolog.builtins.lazy.LazyLoadPredicates";
blub_prolog_builtins_lazy_LazyLoadPredicates.prototype = {
	database: null
	,preds: null
	,load: function(indicator) {
		var functor = indicator.toString();
		var src = this.preds.h[functor];
		if(src == null) {
			return false;
		}
		this.database.addPredicateSrc(functor,src);
		return true;
	}
	,init: function() {
		this.preds = new haxe_ds_StringMap();
		this.preds.h["map/3"] = " map(Predicate,List,Result) :- Goal =.. [Predicate,In,Out], findall(Out,(member(In,List),Goal),Result).";
		this.preds.h["append/3"] = "append([], L, L). append([X|Ll], L2, [X|L3]) :- append(Ll, L2, L3).";
		this.preds.h["findall/3"] = "findall(Template,Goal,Results) :- query(Goal,Template,Q),findall_gather(Q,Results).";
		this.preds.h["findall_gather/2"] = "findall_gather(Q,R) :- solution( Q, S ) -> R = [S|T], findall_gather(Q,T) ; R=[].";
	}
	,__class__: blub_prolog_builtins_lazy_LazyLoadPredicates
};
var blub_prolog_builtins_meta_TemplateQuery = function(engine,queryTerm,template) {
	var stru = queryTerm.asStructure();
	if(stru != null) {
		queryTerm = stru.variablize();
	}
	this.query = new blub_prolog_Query(engine.database,queryTerm);
	this.template = template.asValueTerm();
	if(stru != null) {
		var env = this.query.get_engine().environment;
		var deref = queryTerm.toValue(env);
		stru.unify(deref,engine);
	}
};
$hxClasses["blub.prolog.builtins.meta.TemplateQuery"] = blub_prolog_builtins_meta_TemplateQuery;
blub_prolog_builtins_meta_TemplateQuery.__name__ = "blub.prolog.builtins.meta.TemplateQuery";
blub_prolog_builtins_meta_TemplateQuery.prototype = {
	query: null
	,template: null
	,halt: function() {
		this.query.get_engine();
	}
	,nextSolution: function(engine,soln) {
		var result = this.query.nextSolution();
		if(result == null) {
			return false;
		}
		switch(result._hx_index) {
		case 0:
			return false;
		case 1:
			return true;
		case 2:
			var b = result.binds;
			var captured = this.template.dereference();
			if(!soln.unify(captured,engine)) {
				this.query.putBack(result);
				return false;
			}
			return true;
		}
	}
	,__class__: blub_prolog_builtins_meta_TemplateQuery
};
var blub_prolog_builtins_objects_ObjectWrapper = function() { };
$hxClasses["blub.prolog.builtins.objects.ObjectWrapper"] = blub_prolog_builtins_objects_ObjectWrapper;
blub_prolog_builtins_objects_ObjectWrapper.__name__ = "blub.prolog.builtins.objects.ObjectWrapper";
blub_prolog_builtins_objects_ObjectWrapper.__isInterface__ = true;
blub_prolog_builtins_objects_ObjectWrapper.prototype = {
	getProperty: null
	,setProperty: null
	,callMethod: null
	,getObject: null
	,addPropListener: null
	,removePropListener: null
	,__class__: blub_prolog_builtins_objects_ObjectWrapper
};
var blub_prolog_builtins_objects_ObjectWrapperImpl = function(object,atom) {
	this.object = object;
	this.atom = atom;
};
$hxClasses["blub.prolog.builtins.objects.ObjectWrapperImpl"] = blub_prolog_builtins_objects_ObjectWrapperImpl;
blub_prolog_builtins_objects_ObjectWrapperImpl.__name__ = "blub.prolog.builtins.objects.ObjectWrapperImpl";
blub_prolog_builtins_objects_ObjectWrapperImpl.__interfaces__ = [blub_prolog_builtins_objects_ObjectWrapper];
blub_prolog_builtins_objects_ObjectWrapperImpl.capitalize = function(name) {
	if(name.length < 2) {
		return name.toUpperCase();
	}
	return HxOverrides.substr(name,0,1).toUpperCase() + HxOverrides.substr(name,1,null);
};
blub_prolog_builtins_objects_ObjectWrapperImpl.prototype = {
	atom: null
	,object: null
	,getProperty: function(name) {
		return Reflect.field(this.object,name);
	}
	,setProperty_final: function(name,value) {
		this.object[name] = value;
	}
	,setProperty: function(name,value) {
		this.set(name,value);
	}
	,set: function(name,value) {
		this.object[name] = value;
	}
	,callMethod: function(name,args) {
		if(args == null) {
			args = [];
		}
		return Reflect.field(this.object,name).apply(this.object,args);
	}
	,getObject: function() {
		return this.object;
	}
	,addPropListener: function(listener) {
		return null;
	}
	,removePropListener: function(token) {
		if(token == null) {
			return;
		}
	}
	,__class__: blub_prolog_builtins_objects_ObjectWrapperImpl
};
var blub_prolog_builtins_objects_HashObjectWrapper = function(atom,hash) {
	blub_prolog_builtins_objects_ObjectWrapperImpl.call(this,hash != null ? hash : new haxe_ds_StringMap(),atom);
};
$hxClasses["blub.prolog.builtins.objects.HashObjectWrapper"] = blub_prolog_builtins_objects_HashObjectWrapper;
blub_prolog_builtins_objects_HashObjectWrapper.__name__ = "blub.prolog.builtins.objects.HashObjectWrapper";
blub_prolog_builtins_objects_HashObjectWrapper.__super__ = blub_prolog_builtins_objects_ObjectWrapperImpl;
blub_prolog_builtins_objects_HashObjectWrapper.prototype = $extend(blub_prolog_builtins_objects_ObjectWrapperImpl.prototype,{
	getProperty: function(name) {
		return this.object.h[name];
	}
	,set: function(name,value) {
		this.object.h[name] = value;
	}
	,callMethod: function(name,args) {
		var prop = this.getProperty(name);
		if(prop != null && Reflect.isFunction(prop)) {
			return prop.apply(this.object,args);
		}
		return null;
	}
	,__class__: blub_prolog_builtins_objects_HashObjectWrapper
});
var blub_prolog_builtins_objects_JavascriptObjectWrapper = function(object,atom) {
	blub_prolog_builtins_objects_ObjectWrapperImpl.call(this,object,atom);
};
$hxClasses["blub.prolog.builtins.objects.JavascriptObjectWrapper"] = blub_prolog_builtins_objects_JavascriptObjectWrapper;
blub_prolog_builtins_objects_JavascriptObjectWrapper.__name__ = "blub.prolog.builtins.objects.JavascriptObjectWrapper";
blub_prolog_builtins_objects_JavascriptObjectWrapper.__super__ = blub_prolog_builtins_objects_ObjectWrapperImpl;
blub_prolog_builtins_objects_JavascriptObjectWrapper.prototype = $extend(blub_prolog_builtins_objects_ObjectWrapperImpl.prototype,{
	getProperty: function(name) {
		var getterName = "jeashGet" + blub_prolog_builtins_objects_ObjectWrapperImpl.capitalize(name);
		var getter = this.object[getterName];
		if(getter != null) {
			return getter.call(this.object);
		}
		return blub_prolog_builtins_objects_ObjectWrapperImpl.prototype.getProperty.call(this,name);
	}
	,set: function(name,value) {
		var setterName = "jeashSet" + blub_prolog_builtins_objects_ObjectWrapperImpl.capitalize(name);
		var setter = this.object[setterName];
		if(setter != null) {
			setter.call(this.object,value);
			return;
		}
		blub_prolog_builtins_objects_ObjectWrapperImpl.prototype.setProperty_final.call(this,name,value);
	}
	,__class__: blub_prolog_builtins_objects_JavascriptObjectWrapper
});
var blub_prolog_builtins_objects_NativeAccess = function() { };
$hxClasses["blub.prolog.builtins.objects.NativeAccess"] = blub_prolog_builtins_objects_NativeAccess;
blub_prolog_builtins_objects_NativeAccess.__name__ = "blub.prolog.builtins.objects.NativeAccess";
blub_prolog_builtins_objects_NativeAccess.__isInterface__ = true;
blub_prolog_builtins_objects_NativeAccess.prototype = {
	get: null
	,set: null
	,__class__: blub_prolog_builtins_objects_NativeAccess
};
var blub_prolog_builtins_objects_PropertyListener = function() { };
$hxClasses["blub.prolog.builtins.objects.PropertyListener"] = blub_prolog_builtins_objects_PropertyListener;
blub_prolog_builtins_objects_PropertyListener.__name__ = "blub.prolog.builtins.objects.PropertyListener";
blub_prolog_builtins_objects_PropertyListener.__isInterface__ = true;
blub_prolog_builtins_objects_PropertyListener.prototype = {
	propertyChanged: null
	,__class__: blub_prolog_builtins_objects_PropertyListener
};
var blub_prolog_compiler_Assembler = function(database) {
	this.db = database;
};
$hxClasses["blub.prolog.compiler.Assembler"] = blub_prolog_compiler_Assembler;
blub_prolog_compiler_Assembler.__name__ = "blub.prolog.compiler.Assembler";
blub_prolog_compiler_Assembler.dumpInstruction = function(i,out,indent) {
	if(indent == null) {
		indent = "";
	}
	switch(i._hx_index) {
	case 0:
		var args = i.args;
		var functor = i.functor;
		out(indent + "call_builtin " + functor + " " + Std.string(args));
		break;
	case 1:
		var args = i.args;
		var functor = i.functor;
		out(indent + "call_pred " + functor + " " + Std.string(args));
		break;
	case 2:
		var args = i.args;
		var functor = i.functor;
		out(indent + "tail_call " + functor + " " + Std.string(args));
		break;
	case 3:
		var functor = i.functor;
		out(indent + "call_clauses " + functor);
		break;
	case 4:
		var eIdx = i.envIndex;
		var aIdx = i.argIndex;
		out(indent + "arg_to_env " + aIdx + " " + eIdx);
		break;
	case 5:
		var terms = i.terms;
		out(indent + "set_args " + Std.string(terms));
		break;
	case 6:
		var terms = i.terms;
		out(indent + "set_arg_values " + Std.string(terms));
		break;
	case 7:
		var head = i.head;
		out(indent + "unify_args " + Std.string(head));
		break;
	case 8:
		var term = i.term;
		var index = i.index;
		out(indent + "unify_arg " + index + " " + Std.string(term));
		break;
	case 9:
		var alt = i.alternative;
		out(indent + "choice_point {");
		blub_prolog_compiler_Assembler.dumpAsm(alt,out,indent + ".   ");
		out(indent + "}");
		break;
	case 10:
		var code = i.code;
		out(indent + "call_nested {");
		blub_prolog_compiler_Assembler.dumpAsm(code,out,indent + ".   ");
		out(indent + "}");
		break;
	case 11:
		var size = i.size;
		out(indent + "new_environment " + size);
		break;
	case 12:
		out(indent + "push_code_frame");
		break;
	case 13:
		out(indent + "pop_code_frame");
		break;
	case 14:
		out(indent + "succeed");
		break;
	case 15:
		out(indent + "no_op");
		break;
	case 16:
		out(indent + "fail");
		break;
	case 17:
		out(indent + "cut");
		break;
	case 18:
		out(indent + "cut_point");
		break;
	case 19:
		var msg = i.msg;
		out(indent + "log '" + msg + "'");
		break;
	case 20:
		var fn = i.fn;
		out(indent + "call_back " + Std.string(fn));
		break;
	case 21:
		out(indent + "dump");
		break;
	case 22:
		out(indent + "halt");
		break;
	case 23:
		var msg = i.msg;
		out(indent + "debug_trace '" + msg + "'");
		break;
	case 24:
		var count = i.count;
		out(indent + "halt_count " + count);
		break;
	}
};
blub_prolog_compiler_Assembler.dumpAsm = function(instructions,out,indent) {
	if(indent == null) {
		indent = "";
	}
	var _g = 0;
	while(_g < instructions.length) {
		var i = instructions[_g];
		++_g;
		blub_prolog_compiler_Assembler.dumpInstruction(i,out,indent);
	}
};
blub_prolog_compiler_Assembler.traceDump = function(instructions,prefix) {
	var traceCount = 0;
	var out = function(msg) {
		traceCount += 1;
		haxe_Log.trace(msg,{ methodName : null, lineNumber : traceCount - 1, fileName : prefix, customParams : null, className : null});
	};
	blub_prolog_compiler_Assembler.dumpAsm(instructions,out);
};
blub_prolog_compiler_Assembler.prototype = {
	operations: null
	,db: null
	,end: null
	,translateList: function(instructions) {
		var _g = 0;
		while(_g < instructions.length) {
			var i = instructions[_g];
			++_g;
			this.translate(i);
		}
	}
	,transOther: function(instructions) {
		var asm = new blub_prolog_compiler_Assembler(this.db);
		asm.translateList(instructions);
		return asm.operations;
	}
	,translate: function(i) {
		switch(i._hx_index) {
		case 0:
			var args = i.args;
			var functor = i.functor;
			this.add(i,blub_prolog_engine_Operations.call_builtin(this.db,blub_prolog_PredicateIndicator.fromString(functor,this.db.context),args));
			break;
		case 1:
			var args = i.args;
			var functor = i.functor;
			this.add(i,blub_prolog_engine_Operations.call_pred(this.db,blub_prolog_PredicateIndicator.fromString(functor,this.db.context),args));
			break;
		case 2:
			var args = i.args;
			var functor = i.functor;
			this.add(i,blub_prolog_engine_Operations.tail_call(this.db,blub_prolog_PredicateIndicator.fromString(functor,this.db.context),args));
			break;
		case 3:
			var functor = i.functor;
			this.add(i,blub_prolog_engine_Operations.call_clauses(this.db,blub_prolog_PredicateIndicator.fromString(functor,this.db.context)));
			break;
		case 4:
			var eIdx = i.envIndex;
			var aIdx = i.argIndex;
			this.add(i,blub_prolog_engine_Operations.arg_to_env(aIdx,eIdx));
			break;
		case 5:
			var terms = i.terms;
			this.add(i,blub_prolog_engine_Operations.set_args(terms));
			break;
		case 6:
			var terms = i.terms;
			this.add(i,blub_prolog_engine_Operations.set_arg_values(terms));
			break;
		case 7:
			var head = i.head;
			this.add(i,blub_prolog_engine_Operations.unify_args(head));
			break;
		case 8:
			var term = i.term;
			var index = i.index;
			this.add(i,blub_prolog_engine_Operations.unify_arg(index,term));
			break;
		case 9:
			var alt = i.alternative;
			this.add(i,blub_prolog_engine_Operations.choice_point(this.transOther(alt)));
			break;
		case 10:
			var code = i.code;
			this.add(i,blub_prolog_engine_Operations.call_nested(this.transOther(code)));
			break;
		case 11:
			var size = i.size;
			this.add(i,blub_prolog_engine_Operations.new_environment(size));
			break;
		case 12:
			this.add(i,blub_prolog_engine_Operations.push_code_frame);
			break;
		case 13:
			this.add(i,blub_prolog_engine_Operations.pop_code_frame);
			break;
		case 14:
			this.add(i,blub_prolog_engine_Operations.succeed);
			break;
		case 15:
			this.add(i,blub_prolog_engine_Operations.no_op);
			break;
		case 16:
			this.add(i,blub_prolog_engine_Operations.fail);
			break;
		case 17:
			this.add(i,blub_prolog_engine_Operations.cut);
			break;
		case 18:
			this.add(i,blub_prolog_engine_Operations.cut_point);
			break;
		case 19:
			var msg = i.msg;
			this.add(i,blub_prolog_engine_Operations.log(msg));
			break;
		case 20:
			var fn = i.fn;
			this.add(i,blub_prolog_engine_Operations.call_back(fn));
			break;
		case 21:
			this.add(i,blub_prolog_engine_Operations.dump);
			break;
		case 22:
			this.add(i,blub_prolog_engine_Operations.halt);
			break;
		case 23:
			var msg = i.msg;
			this.add(i,blub_prolog_engine_Operations.debug_trace(msg));
			break;
		case 24:
			var count = i.count;
			this.add(i,blub_prolog_engine_Operations.halt_count(count));
			break;
		}
	}
	,add: function(i,op) {
		var asm = null;
		if(this.end == null) {
			this.end = { op : op, asm : asm, next : null};
			this.operations = this.end;
		} else {
			var elem = { op : op, asm : asm, next : null};
			this.end.next = elem;
			this.end = elem;
		}
	}
	,__class__: blub_prolog_compiler_Assembler
};
var blub_prolog_compiler_ClauseCompiler = function(database) {
	blub_prolog_compiler_CompilerBase.call(this,database);
};
$hxClasses["blub.prolog.compiler.ClauseCompiler"] = blub_prolog_compiler_ClauseCompiler;
blub_prolog_compiler_ClauseCompiler.__name__ = "blub.prolog.compiler.ClauseCompiler";
blub_prolog_compiler_ClauseCompiler.__super__ = blub_prolog_compiler_CompilerBase;
blub_prolog_compiler_ClauseCompiler.prototype = $extend(blub_prolog_compiler_CompilerBase.prototype,{
	compile: function(clause) {
		if(clause.variableContext.get_count() > 0) {
			this.add(blub_prolog_compiler_Instruction.new_environment(clause.variableContext.get_count()));
		}
		var head = clause.head;
		if(head.getIndicator().arity > 0) {
			this.add(blub_prolog_compiler_Instruction.unify_args(head));
		}
		var body = clause.body;
		if(body != null) {
			this.compileTerm(body,true);
		} else {
			this.add(blub_prolog_compiler_Instruction.succeed);
		}
		return this.assemble();
	}
	,__class__: blub_prolog_compiler_ClauseCompiler
});
var blub_prolog_compiler_Instruction = $hxEnums["blub.prolog.compiler.Instruction"] = { __ename__ : "blub.prolog.compiler.Instruction", __constructs__ : ["call_builtin","call_pred","tail_call","call_clauses","arg_to_env","set_args","set_arg_values","unify_args","unify_arg","choice_point","call_nested","new_environment","push_code_frame","pop_code_frame","succeed","no_op","fail","cut","cut_point","log","call_back","dump","halt","debug_trace","halt_count"]
	,call_builtin: ($_=function(functor,args) { return {_hx_index:0,functor:functor,args:args,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["functor","args"],$_)
	,call_pred: ($_=function(functor,args) { return {_hx_index:1,functor:functor,args:args,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["functor","args"],$_)
	,tail_call: ($_=function(functor,args) { return {_hx_index:2,functor:functor,args:args,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["functor","args"],$_)
	,call_clauses: ($_=function(functor) { return {_hx_index:3,functor:functor,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["functor"],$_)
	,arg_to_env: ($_=function(argIndex,envIndex) { return {_hx_index:4,argIndex:argIndex,envIndex:envIndex,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["argIndex","envIndex"],$_)
	,set_args: ($_=function(terms) { return {_hx_index:5,terms:terms,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["terms"],$_)
	,set_arg_values: ($_=function(terms) { return {_hx_index:6,terms:terms,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["terms"],$_)
	,unify_args: ($_=function(head) { return {_hx_index:7,head:head,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["head"],$_)
	,unify_arg: ($_=function(index,term) { return {_hx_index:8,index:index,term:term,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["index","term"],$_)
	,choice_point: ($_=function(alternative) { return {_hx_index:9,alternative:alternative,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["alternative"],$_)
	,call_nested: ($_=function(code) { return {_hx_index:10,code:code,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["code"],$_)
	,new_environment: ($_=function(size) { return {_hx_index:11,size:size,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["size"],$_)
	,push_code_frame: {_hx_index:12,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,pop_code_frame: {_hx_index:13,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,succeed: {_hx_index:14,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,no_op: {_hx_index:15,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,fail: {_hx_index:16,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,cut: {_hx_index:17,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,cut_point: {_hx_index:18,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,log: ($_=function(msg) { return {_hx_index:19,msg:msg,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,call_back: ($_=function(fn) { return {_hx_index:20,fn:fn,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["fn"],$_)
	,dump: {_hx_index:21,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,halt: {_hx_index:22,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}
	,debug_trace: ($_=function(msg) { return {_hx_index:23,msg:msg,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,halt_count: ($_=function(count) { return {_hx_index:24,count:count,__enum__:"blub.prolog.compiler.Instruction",toString:$estr}; },$_.__params__ = ["count"],$_)
};
blub_prolog_compiler_Instruction.__empty_constructs__ = [blub_prolog_compiler_Instruction.push_code_frame,blub_prolog_compiler_Instruction.pop_code_frame,blub_prolog_compiler_Instruction.succeed,blub_prolog_compiler_Instruction.no_op,blub_prolog_compiler_Instruction.fail,blub_prolog_compiler_Instruction.cut,blub_prolog_compiler_Instruction.cut_point,blub_prolog_compiler_Instruction.dump,blub_prolog_compiler_Instruction.halt];
var blub_prolog_compiler_PredicateCompiler = function(database) {
	blub_prolog_compiler_CompilerBase.call(this,database);
};
$hxClasses["blub.prolog.compiler.PredicateCompiler"] = blub_prolog_compiler_PredicateCompiler;
blub_prolog_compiler_PredicateCompiler.__name__ = "blub.prolog.compiler.PredicateCompiler";
blub_prolog_compiler_PredicateCompiler.__super__ = blub_prolog_compiler_CompilerBase;
blub_prolog_compiler_PredicateCompiler.prototype = $extend(blub_prolog_compiler_CompilerBase.prototype,{
	compile: function(predicate) {
		this.add(blub_prolog_compiler_Instruction.call_clauses(predicate.indicator.toString()));
		return this.assemble();
	}
	,__class__: blub_prolog_compiler_PredicateCompiler
});
var blub_prolog_compiler_QueryCompiler = function(database) {
	blub_prolog_compiler_CompilerBase.call(this,database);
};
$hxClasses["blub.prolog.compiler.QueryCompiler"] = blub_prolog_compiler_QueryCompiler;
blub_prolog_compiler_QueryCompiler.__name__ = "blub.prolog.compiler.QueryCompiler";
blub_prolog_compiler_QueryCompiler.__super__ = blub_prolog_compiler_CompilerBase;
blub_prolog_compiler_QueryCompiler.prototype = $extend(blub_prolog_compiler_CompilerBase.prototype,{
	compile: function(term) {
		this.compileTerm(term,true);
		return this.assemble();
	}
	,__class__: blub_prolog_compiler_QueryCompiler
});
var blub_prolog_engine_ArithmeticEvaluator = function(engine) {
	this.engine = engine;
};
$hxClasses["blub.prolog.engine.ArithmeticEvaluator"] = blub_prolog_engine_ArithmeticEvaluator;
blub_prolog_engine_ArithmeticEvaluator.__name__ = "blub.prolog.engine.ArithmeticEvaluator";
blub_prolog_engine_ArithmeticEvaluator.isArithmetic = function(struct) {
	var this1 = blub_prolog_engine_ArithmeticEvaluator.arithmeticFuncs;
	var key = struct.getIndicator().toString();
	return this1.h[key] == true;
};
blub_prolog_engine_ArithmeticEvaluator.isEvaluable = function(t) {
	if(t.asNumber() != null) {
		return true;
	}
	var s = t.asStructure();
	if(s == null) {
		return false;
	}
	return blub_prolog_engine_ArithmeticEvaluator.isArithmetic(s);
};
blub_prolog_engine_ArithmeticEvaluator.hasAllNumericArgs = function(s) {
	var _g = 0;
	var _g1 = s.getArgs();
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.asNumber() == null) {
			return false;
		}
	}
	return true;
};
blub_prolog_engine_ArithmeticEvaluator.prototype = {
	engine: null
	,evaluate: function(expression) {
		var numTerm = expression.asNumber();
		if(numTerm != null) {
			return numTerm.value;
		}
		var stru = expression.asStructure();
		if(stru != null) {
			return this.evalFunc(stru);
		}
		this.engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_evaluable,expression,this.engine.context));
		return 0.0;
	}
	,evalFunc: function(funcExpression) {
		switch(funcExpression.getIndicator().toString()) {
		case "*/2":
			return this.evaluate(funcExpression.argAt(0)) * this.evaluate(funcExpression.argAt(1));
		case "+/2":
			return this.evaluate(funcExpression.argAt(0)) + this.evaluate(funcExpression.argAt(1));
		case "-/2":
			return this.evaluate(funcExpression.argAt(0)) - this.evaluate(funcExpression.argAt(1));
		case "./2":
			var val = blub_prolog_builtins_objects_DotAccessor.evalDot(this.engine,funcExpression.argAt(0),funcExpression.argAt(1));
			if(typeof(val) == "number") {
				var flt = val;
				return flt;
			}
			break;
		case "//2":
			return this.evaluate(funcExpression.argAt(0)) / this.evaluate(funcExpression.argAt(1));
		default:
		}
		this.engine.raiseException(blub_prolog_RuntimeError.typeError(blub_prolog_TypeError.VALID_TYPE_evaluable,funcExpression,this.engine.context));
		return 0.0;
	}
	,__class__: blub_prolog_engine_ArithmeticEvaluator
};
var blub_prolog_engine_DatabaseTransaction = function(database) {
	this.database = database;
};
$hxClasses["blub.prolog.engine.DatabaseTransaction"] = blub_prolog_engine_DatabaseTransaction;
blub_prolog_engine_DatabaseTransaction.__name__ = "blub.prolog.engine.DatabaseTransaction";
blub_prolog_engine_DatabaseTransaction.prototype = {
	database: null
	,preAsserts: null
	,postAsserts: null
	,retractions: null
	,abolitions: null
	,preAssert: function(term) {
		if(this.preAsserts == null) {
			this.preAsserts = [];
		}
		this.preAsserts.push(term);
	}
	,postAssert: function(term) {
		if(this.postAsserts == null) {
			this.postAsserts = [];
		}
		this.postAsserts.push(term);
	}
	,retract: function(clause) {
		if(this.retractions == null) {
			this.retractions = [];
		}
		this.retractions.push(clause);
	}
	,abolish: function(pred) {
		if(this.abolitions == null) {
			this.abolitions = [];
		}
		this.abolitions.push(pred);
	}
	,commit: function() {
		if(this.preAsserts != null) {
			var _g = 0;
			var _g1 = this.preAsserts;
			while(_g < _g1.length) {
				var term = _g1[_g];
				++_g;
				this.database.assertA(term,true);
			}
		}
		if(this.postAsserts != null) {
			var _g = 0;
			var _g1 = this.postAsserts;
			while(_g < _g1.length) {
				var term = _g1[_g];
				++_g;
				this.database.assertZ(term,true);
			}
		}
		if(this.retractions != null) {
			var _g = 0;
			var _g1 = this.retractions;
			while(_g < _g1.length) {
				var clause = _g1[_g];
				++_g;
				clause.retract();
			}
		}
		if(this.abolitions != null) {
			var _g = 0;
			var _g1 = this.abolitions;
			while(_g < _g1.length) {
				var pred = _g1[_g];
				++_g;
				pred.abolish();
			}
		}
	}
	,__class__: blub_prolog_engine_DatabaseTransaction
};
var blub_prolog_engine_Operations = function() { };
$hxClasses["blub.prolog.engine.Operations"] = blub_prolog_engine_Operations;
blub_prolog_engine_Operations.__name__ = "blub.prolog.engine.Operations";
blub_prolog_engine_Operations.halt_count = function(count) {
	var i = 0;
	return function(eng) {
		if(i >= count) {
			eng.halt();
		}
		i += 1;
	};
};
blub_prolog_engine_Operations.unify_arg = function(index,term) {
	return function(eng) {
		eng.unify(term.toValue(eng.environment),eng.arguments[index]);
	};
};
blub_prolog_engine_Operations.unify_args = function(head) {
	return function(eng) {
		var stru = head.asStructure();
		if(stru == null) {
			return;
		}
		var headArgs = stru.getArgs();
		var args = eng.arguments;
		var numArgs = args.length;
		var env = eng.environment;
		var _g = 0;
		var _g1 = numArgs;
		while(_g < _g1) {
			var i = _g++;
			if(!eng.unify(headArgs[i].toValue(env),args[i])) {
				return;
			}
		}
	};
};
blub_prolog_engine_Operations.set_args = function(terms) {
	return function(eng) {
		if(terms != null) {
			var args = [];
			var env = eng.environment;
			var _g = 0;
			while(_g < terms.length) {
				var t = terms[_g];
				++_g;
				args.push(t.toValue(env));
			}
			eng.arguments = args;
		} else {
			eng.arguments = null;
		}
	};
};
blub_prolog_engine_Operations.arg_to_env = function(argIndex,envIndex) {
	return function(eng) {
		eng.environment[envIndex].bind(eng.arguments[argIndex]);
	};
};
blub_prolog_engine_Operations.set_arg_values = function(terms) {
	return function(eng) {
		eng.arguments = terms;
	};
};
blub_prolog_engine_Operations.call_clauses = function(db,indicator) {
	var predicate = db.lookup(indicator);
	if(predicate != null) {
		return function(eng) {
			var clauses = predicate.findMatchingClauses(eng.arguments);
			var len = clauses.length;
			if(len == 0) {
				eng.fail();
			} else {
				new blub_prolog_engine_parts_ClauseChoices(eng,clauses);
			}
		};
	}
	return function(eng) {
		var predicate = db.lookup(indicator);
		if(predicate == null) {
			eng.raiseException(blub_prolog_RuntimeError.existenceError(blub_prolog_ExistenceError.ee_procedure,blub_prolog_terms_Atom.unregisteredAtom(indicator.toString()),eng.context));
			return;
		}
		var clauses = predicate.findMatchingClauses(eng.arguments);
		var len = clauses.length;
		if(len == 0) {
			eng.fail();
		} else if(len == 1) {
			eng.context = clauses[0];
			eng.codePointer = clauses[0].code;
		} else {
			new blub_prolog_engine_parts_ClauseChoices(eng,clauses);
		}
	};
};
blub_prolog_engine_Operations.call_builtin = function(db,indicator,args) {
	var predicate = db.lookup(indicator);
	if(predicate != null) {
		if(predicate.isBuiltin) {
			return function(eng) {
				predicate.builtin.execute(eng,args);
			};
		}
	}
	throw haxe_Exception.thrown(new blub_prolog_PrologError("Cannot find built-in " + indicator.toString()));
};
blub_prolog_engine_Operations.call_pred = function(db,indicator,args) {
	var predicate = db.lookup(indicator);
	if(predicate != null) {
		if(predicate.isBuiltin) {
			return function(eng) {
				predicate.builtin.execute(eng,args);
			};
		} else {
			return function(eng) {
				if(args != null) {
					var args1 = [];
					var env = eng.environment;
					var _g = 0;
					while(_g < args.length) {
						var t = args[_g];
						++_g;
						args1.push(t.toValue(env));
					}
					eng.arguments = args1;
				} else {
					eng.arguments = null;
				}
				eng.codeStack = new blub_prolog_engine_parts_CodeFrame(eng);
				eng.codePointer = predicate.code;
			};
		}
	}
	return function(eng) {
		var predicate = db.lookup(indicator);
		if(predicate == null) {
			eng.raiseException(blub_prolog_RuntimeError.existenceError(blub_prolog_ExistenceError.ee_procedure,blub_prolog_terms_Atom.unregisteredAtom(indicator.toString()),eng.context));
			return;
		}
		if(args != null) {
			var args1 = [];
			var env = eng.environment;
			var _g = 0;
			while(_g < args.length) {
				var t = args[_g];
				++_g;
				args1.push(t.toValue(env));
			}
			eng.arguments = args1;
		} else {
			eng.arguments = null;
		}
		eng.codeStack = new blub_prolog_engine_parts_CodeFrame(eng);
		eng.codePointer = predicate.code;
	};
};
blub_prolog_engine_Operations.tail_call = function(db,indicator,args) {
	var predicate = db.lookup(indicator);
	if(predicate != null) {
		return function(eng) {
			if(args != null) {
				var args1 = [];
				var env = eng.environment;
				var _g = 0;
				while(_g < args.length) {
					var t = args[_g];
					++_g;
					args1.push(t.toValue(env));
				}
				eng.arguments = args1;
			} else {
				eng.arguments = null;
			}
			eng.codePointer = predicate.code;
		};
	}
	return function(eng) {
		var predicate = db.lookup(indicator);
		if(predicate == null) {
			eng.raiseException(blub_prolog_RuntimeError.existenceError(blub_prolog_ExistenceError.ee_procedure,blub_prolog_terms_Atom.unregisteredAtom(indicator.toString()),eng.context));
			return;
		}
		if(args != null) {
			var args1 = [];
			var env = eng.environment;
			var _g = 0;
			while(_g < args.length) {
				var t = args[_g];
				++_g;
				args1.push(t.toValue(env));
			}
			eng.arguments = args1;
		} else {
			eng.arguments = null;
		}
		eng.codePointer = predicate.code;
	};
};
blub_prolog_engine_Operations.choice_point = function(alternative) {
	return function(eng) {
		new blub_prolog_engine_parts_ChoicePoint(eng,new blub_prolog_engine_parts_CodeFrame(eng,alternative));
	};
};
blub_prolog_engine_Operations.succeed = function(eng) {
	eng.succeed();
};
blub_prolog_engine_Operations.no_op = function(eng) {
};
blub_prolog_engine_Operations.fail = function(eng) {
	eng.fail();
};
blub_prolog_engine_Operations.cut = function(eng) {
	eng.cut();
};
blub_prolog_engine_Operations.cut_point = function(eng) {
	var cp = new blub_prolog_engine_parts_CutPoint(eng);
	eng.cutBarrier = { prev : eng.cutBarrier, choice : cp};
};
blub_prolog_engine_Operations.log = function(msg) {
	return function(eng) {
		if(eng.logger != null) {
			eng.logger(msg);
		}
	};
};
blub_prolog_engine_Operations.debug_trace = function(msg) {
	return function(eng) {
		haxe_Log.trace(msg,{ fileName : "src/blub/prolog/engine/Operations.hx", lineNumber : 381, className : "blub.prolog.engine.Operations", methodName : "debug_trace"});
	};
};
blub_prolog_engine_Operations.call_back = function(fn) {
	return fn;
};
blub_prolog_engine_Operations.dump = function(eng) {
	eng.dump();
};
blub_prolog_engine_Operations.halt = function(eng) {
	eng.halt();
};
blub_prolog_engine_Operations.new_environment = function(size) {
	return function(eng) {
		eng.environment = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			eng.environment.push(new blub_prolog_terms_Reference());
		}
	};
};
blub_prolog_engine_Operations.push_code_frame = function(eng) {
	eng.codeStack = new blub_prolog_engine_parts_CodeFrame(eng);
};
blub_prolog_engine_Operations.call_nested = function(code) {
	return function(eng) {
		eng.codeStack = new blub_prolog_engine_parts_CodeFrame(eng);
		eng.codePointer = code;
	};
};
blub_prolog_engine_Operations.pop_code_frame = function(eng) {
	if(eng.codeStack != null) {
		eng.codeStack.restore();
	}
};
blub_prolog_engine_Operations.jump_to = function(code) {
	return function(eng) {
		eng.codePointer = code;
	};
};
var blub_prolog_engine_AsyncCallbackType = $hxEnums["blub.prolog.engine.AsyncCallbackType"] = { __ename__ : "blub.prolog.engine.AsyncCallbackType", __constructs__ : ["asyncSoln","asyncDone","asyncHalt","asyncStart"]
	,asyncSoln: {_hx_index:0,__enum__:"blub.prolog.engine.AsyncCallbackType",toString:$estr}
	,asyncDone: {_hx_index:1,__enum__:"blub.prolog.engine.AsyncCallbackType",toString:$estr}
	,asyncHalt: {_hx_index:2,__enum__:"blub.prolog.engine.AsyncCallbackType",toString:$estr}
	,asyncStart: {_hx_index:3,__enum__:"blub.prolog.engine.AsyncCallbackType",toString:$estr}
};
blub_prolog_engine_AsyncCallbackType.__empty_constructs__ = [blub_prolog_engine_AsyncCallbackType.asyncSoln,blub_prolog_engine_AsyncCallbackType.asyncDone,blub_prolog_engine_AsyncCallbackType.asyncHalt,blub_prolog_engine_AsyncCallbackType.asyncStart];
var blub_prolog_terms_BindingTrail = function() { };
$hxClasses["blub.prolog.terms.BindingTrail"] = blub_prolog_terms_BindingTrail;
blub_prolog_terms_BindingTrail.__name__ = "blub.prolog.terms.BindingTrail";
blub_prolog_terms_BindingTrail.__isInterface__ = true;
blub_prolog_terms_BindingTrail.prototype = {
	newBinding: null
	,bookmark: null
	,undo: null
	,__class__: blub_prolog_terms_BindingTrail
};
var blub_prolog_engine_QueryEngine = function(database,code) {
	this.database = database;
	this.codePointer = code;
	this.isAsync = false;
	this.isHalted = false;
	this.atBreakpoint = false;
};
$hxClasses["blub.prolog.engine.QueryEngine"] = blub_prolog_engine_QueryEngine;
blub_prolog_engine_QueryEngine.__name__ = "blub.prolog.engine.QueryEngine";
blub_prolog_engine_QueryEngine.__interfaces__ = [blub_prolog_terms_BindingTrail];
blub_prolog_engine_QueryEngine.prototype = {
	database: null
	,arithmetic: null
	,isHalted: null
	,atBreakpoint: null
	,exception: null
	,logger: null
	,codeStack: null
	,codePointer: null
	,bindings: null
	,cutBarrier: null
	,choiceStack: null
	,solutionFound: null
	,'arguments': null
	,environment: null
	,context: null
	,_arithmetic: null
	,get_arithmetic: function() {
		if(this._arithmetic == null) {
			this._arithmetic = new blub_prolog_engine_ArithmeticEvaluator(this);
		}
		return this._arithmetic;
	}
	,transaction: null
	,makeTransaction: function() {
		if(this.transaction == null) {
			this.transaction = new blub_prolog_engine_DatabaseTransaction(this.database);
		}
		return this.transaction;
	}
	,findSolution: function() {
		if(this.isHalted) {
			return false;
		}
		this.isAsync = false;
		if(this.codePointer == null && !this.backtrack()) {
			return false;
		}
		this.solutionFound = false;
		while(this.codePointer != null) {
			var op = this.codePointer.op;
			this.codePointer = this.codePointer.next;
			op(this);
		}
		return this.solutionFound;
	}
	,executeStep: function() {
		this.atBreakpoint = false;
		if(this.exception != null) {
			var e = this.exception;
			this.exception = null;
			throw haxe_Exception.thrown(this.exception);
		}
		if(this.isHalted) {
			return;
		}
		this.isAsync = false;
		this.solutionFound = false;
		if(this.codePointer == null) {
			this.backtrack();
			return;
		}
		if(this.codePointer != null) {
			var op = this.codePointer.op;
			this.codePointer = this.codePointer.next;
			op(this);
		}
	}
	,debugRun: function() {
		this.atBreakpoint = false;
		if(this.exception != null) {
			var e = this.exception;
			this.exception = null;
			throw haxe_Exception.thrown(this.exception);
		}
		if(this.isHalted) {
			return;
		}
		this.isAsync = false;
		this.solutionFound = false;
		try {
			if(this.codePointer == null) {
				if(!this.backtrack()) {
					return;
				}
			}
			while(this.codePointer != null) {
				var op = this.codePointer.op;
				this.codePointer = this.codePointer.next;
				op(this);
				if(this.atBreakpoint) {
					return;
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof blub_prolog_PrologError)) {
				var ex = _g1;
				this.exception = ex;
			} else {
				throw _g;
			}
		}
	}
	,clearBreakpoint: function() {
		this.atBreakpoint = false;
		if(this.exception != null) {
			var e = this.exception;
			this.exception = null;
			throw haxe_Exception.thrown(this.exception);
		}
	}
	,asyncCallback: null
	,asyncUnderway: null
	,asyncOp: null
	,isAsync: null
	,asyncResult: null
	,getCurrentAsyncOp: function() {
		return this.asyncOp;
	}
	,executeAsync: function(asyncCallback) {
		this.asyncCallback = asyncCallback;
		this.continueAsync();
	}
	,beginAsync: function(operation) {
		if(!this.isAsync) {
			throw haxe_Exception.thrown(new blub_prolog_PrologError("Async predicate can only be used in an async query, op:" + operation.getDescription()));
		}
		this.asyncOp = operation;
		this.asyncResult = null;
		this.asyncUnderway = true;
	}
	,continueAsync: function(result) {
		if(this.isHalted) {
			return;
		}
		this.asyncOp = null;
		this.isAsync = true;
		this.asyncResult = result;
		this.asyncUnderway = false;
		while(true) {
			if(this.codePointer == null && !this.backtrack()) {
				if(this.asyncCallback != null) {
					this.asyncCallback(this,blub_prolog_engine_AsyncCallbackType.asyncDone);
				}
				return;
			}
			this.solutionFound = false;
			while(this.codePointer != null && !this.asyncUnderway) {
				var op = this.codePointer.op;
				this.codePointer = this.codePointer.next;
				op(this);
			}
			if(this.asyncCallback != null) {
				this.asyncCallback(this,this.asyncUnderway ? blub_prolog_engine_AsyncCallbackType.asyncStart : blub_prolog_engine_AsyncCallbackType.asyncSoln);
			}
			if(this.asyncUnderway) {
				return;
			}
		}
	}
	,halt: function() {
		if(this.logger != null) {
			this.logger("*** HALTED ***");
		}
		this.codePointer = null;
		this.codeStack = null;
		this.solutionFound = false;
		this.isHalted = true;
		if(this.choiceStack != null) {
			var cp = this.choiceStack;
			while(cp != null) {
				cp.halt();
				cp = cp.prev;
			}
			this.choiceStack = null;
		}
		if(this.asyncOp != null) {
			this.asyncOp.cancel();
			this.asyncOp = null;
		}
		this.asyncResult = null;
		this.asyncUnderway = false;
		if(this.asyncCallback != null) {
			this.asyncCallback(this,blub_prolog_engine_AsyncCallbackType.asyncHalt);
		}
	}
	,backtrack: function() {
		this.solutionFound = false;
		this.codePointer = null;
		this.codeStack = null;
		while(this.choiceStack != null) {
			this.choiceStack.undoBindings();
			if(this.choiceStack.nextChoice()) {
				return true;
			}
		}
		return false;
	}
	,breakpoint: function() {
		this.atBreakpoint = true;
	}
	,processBuiltinChoices: function() {
		this.backtrack();
	}
	,log: function(msg) {
		if(this.logger != null) {
			this.logger(msg);
		}
	}
	,setLogger: function(fn) {
		this.logger = fn;
	}
	,raiseException: function(exception) {
		throw haxe_Exception.thrown(exception);
	}
	,unify: function(termA,termB) {
		if(termA.unify(termB,this)) {
			return true;
		}
		this.fail();
		return false;
	}
	,succeed: function() {
		if(this.codeStack != null) {
			if(this.codeStack != null) {
				this.codeStack.restore();
			}
			return;
		}
		this.solutionFound = true;
		this.codePointer = null;
	}
	,fail: function() {
		this.backtrack();
	}
	,cut: function() {
		if(this.cutBarrier != null) {
			this.choiceStack = this.cutBarrier.choice.prev;
			this.cutBarrier = this.cutBarrier.prev;
		} else {
			this.choiceStack = null;
		}
	}
	,newBinding: function(ref,oldValue) {
		this.bindings = { next : this.bindings, ref : ref, old : oldValue};
	}
	,bookmark: function() {
		return this.bindings;
	}
	,undo: function(bookmark) {
		var prevBind = bookmark;
		var bind = this.bindings;
		while(bind != null && bind != prevBind) {
			bind.ref.unbind(bind.old);
			bind = bind.next;
		}
		this.bindings = prevBind;
	}
	,undoBindings: function(prevBind) {
		var bind = this.bindings;
		while(bind != null && bind != prevBind) {
			bind.ref.unbind(bind.old);
			bind = bind.next;
		}
		this.bindings = prevBind;
	}
	,pushCutPoint: function() {
		var cp = new blub_prolog_engine_parts_CutPoint(this);
		this.cutBarrier = { prev : this.cutBarrier, choice : cp};
	}
	,pushCutBarrier: function(cpnt) {
		this.cutBarrier = { prev : this.cutBarrier, choice : cpnt};
	}
	,pushCodeFrame: function() {
		this.codeStack = new blub_prolog_engine_parts_CodeFrame(this);
	}
	,popCodeFrame: function() {
		if(this.codeStack != null) {
			this.codeStack.restore();
		}
	}
	,createEnvironment: function(size) {
		this.environment = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			this.environment.push(new blub_prolog_terms_Reference());
		}
	}
	,setArguments: function(newArgs) {
		if(newArgs != null) {
			var args = [];
			var env = this.environment;
			var _g = 0;
			while(_g < newArgs.length) {
				var t = newArgs[_g];
				++_g;
				args.push(t.toValue(env));
			}
			this.arguments = args;
		} else {
			this.arguments = null;
		}
	}
	,useTraceLogger: function(prefix) {
		if(prefix == null) {
			prefix = ":";
		}
		this.traceCount = 0;
		this.tracePrefix = prefix;
		this.logger = $bind(this,this.traceLogger);
	}
	,tracePrefix: null
	,traceCount: null
	,traceLogger: function(msg) {
		haxe_Log.trace(msg,{ methodName : null, lineNumber : this.traceCount++, fileName : this.tracePrefix, customParams : null, className : null});
	}
	,dump: function() {
		if(this.logger != null) {
			this.logger("---------------------------------------");
		}
		if(this.logger != null) {
			this.logger("codeStack:     " + Std.string(this.codeStack));
		}
		if(this.logger != null) {
			this.logger("codePointer:   " + Std.string(this.codePointer));
		}
		if(this.logger != null) {
			this.logger("cutBarrier:    " + Std.string(this.cutBarrier));
		}
		if(this.logger != null) {
			this.logger("choiceStack:   " + Std.string(this.choiceStack));
		}
		if(this.logger != null) {
			this.logger("solutionFound: " + Std.string(this.solutionFound));
		}
		if(this.logger != null) {
			this.logger("arguments:     " + Std.string(this.arguments));
		}
		if(this.logger != null) {
			this.logger("environment:   " + Std.string(this.environment));
		}
		if(this.logger != null) {
			this.logger("---------------------------------------");
		}
	}
	,__class__: blub_prolog_engine_QueryEngine
	,__properties__: {get_arithmetic:"get_arithmetic"}
};
var blub_prolog_engine_parts_ClauseChoices = function(eng,clauses) {
	blub_prolog_engine_parts_ChoicePoint.call(this,eng);
	this.clauses = clauses;
	this.index = 0;
	this.jumpToChoice();
};
$hxClasses["blub.prolog.engine.parts.ClauseChoices"] = blub_prolog_engine_parts_ClauseChoices;
blub_prolog_engine_parts_ClauseChoices.__name__ = "blub.prolog.engine.parts.ClauseChoices";
blub_prolog_engine_parts_ClauseChoices.__super__ = blub_prolog_engine_parts_ChoicePoint;
blub_prolog_engine_parts_ClauseChoices.prototype = $extend(blub_prolog_engine_parts_ChoicePoint.prototype,{
	clauses: null
	,index: null
	,nextChoice: function() {
		this.frame.restore();
		return this.jumpToChoice();
	}
	,jumpToChoice: function() {
		var clause = this.clauses[this.index++];
		if(this.index == this.clauses.length) {
			this.popThisChoicePoint();
		}
		var _this = this.engine;
		_this.cutBarrier = { prev : _this.cutBarrier, choice : this};
		this.engine.context = clause;
		this.engine.codePointer = clause.code;
		return true;
	}
	,toString: function() {
		return "Next clause: " + Std.string(this.clauses[this.index].head);
	}
	,__class__: blub_prolog_engine_parts_ClauseChoices
});
var blub_prolog_engine_parts_CodeFrame = function(eng,continuation) {
	this.engine = eng;
	this.codeStack = this.engine.codeStack;
	this.codePointer = continuation == null ? this.engine.codePointer : continuation;
	this.cutBarrier = this.engine.cutBarrier;
	this.arguments = this.engine.arguments;
	this.environment = this.engine.environment;
	this.context = this.engine.context;
};
$hxClasses["blub.prolog.engine.parts.CodeFrame"] = blub_prolog_engine_parts_CodeFrame;
blub_prolog_engine_parts_CodeFrame.__name__ = "blub.prolog.engine.parts.CodeFrame";
blub_prolog_engine_parts_CodeFrame.prototype = {
	engine: null
	,codeStack: null
	,codePointer: null
	,cutBarrier: null
	,'arguments': null
	,environment: null
	,context: null
	,restore: function() {
		this.engine.codeStack = this.codeStack;
		this.engine.codePointer = this.codePointer;
		this.engine.cutBarrier = this.cutBarrier;
		this.engine.arguments = this.arguments;
		this.engine.environment = this.environment;
		this.engine.context = this.context;
	}
	,toString: function() {
		return "Frame: " + Std.string(this.environment);
	}
	,__class__: blub_prolog_engine_parts_CodeFrame
};
var blub_prolog_engine_parts_CutPoint = function(eng) {
	blub_prolog_engine_parts_ChoicePoint.call(this,eng);
};
$hxClasses["blub.prolog.engine.parts.CutPoint"] = blub_prolog_engine_parts_CutPoint;
blub_prolog_engine_parts_CutPoint.__name__ = "blub.prolog.engine.parts.CutPoint";
blub_prolog_engine_parts_CutPoint.__super__ = blub_prolog_engine_parts_ChoicePoint;
blub_prolog_engine_parts_CutPoint.prototype = $extend(blub_prolog_engine_parts_ChoicePoint.prototype,{
	nextChoice: function() {
		this.frame.engine.choiceStack = this.prev;
		return false;
	}
	,__class__: blub_prolog_engine_parts_CutPoint
});
var blub_prolog_engine_parts_RepeatingChoicePoint = function(eng) {
	blub_prolog_engine_parts_ChoicePoint.call(this,eng,eng.codeStack);
};
$hxClasses["blub.prolog.engine.parts.RepeatingChoicePoint"] = blub_prolog_engine_parts_RepeatingChoicePoint;
blub_prolog_engine_parts_RepeatingChoicePoint.__name__ = "blub.prolog.engine.parts.RepeatingChoicePoint";
blub_prolog_engine_parts_RepeatingChoicePoint.__super__ = blub_prolog_engine_parts_ChoicePoint;
blub_prolog_engine_parts_RepeatingChoicePoint.prototype = $extend(blub_prolog_engine_parts_ChoicePoint.prototype,{
	nextChoice: function() {
		this.frame.restore();
		return true;
	}
	,toString: function() {
		return "Repeating: " + Std.string(this.frame);
	}
	,__class__: blub_prolog_engine_parts_RepeatingChoicePoint
});
var blub_prolog_stopgap_parse_Char = function(line,col,text,index) {
	this.line = line;
	this.col = col;
	this.value = HxOverrides.substr(text,index,1);
	this.code = HxOverrides.cca(this.value,0);
};
$hxClasses["blub.prolog.stopgap.parse.Char"] = blub_prolog_stopgap_parse_Char;
blub_prolog_stopgap_parse_Char.__name__ = "blub.prolog.stopgap.parse.Char";
blub_prolog_stopgap_parse_Char.isOpChar_ = function(value) {
	return "#$&*+-./:<=>?@^~\\".indexOf(value) >= 0;
};
blub_prolog_stopgap_parse_Char.prototype = {
	line: null
	,col: null
	,value: null
	,code: null
	,toString: function() {
		return this.value;
	}
	,isOpChar: function() {
		return "#$&*+-./:<=>?@^~\\".indexOf(this.value) >= 0;
	}
	,isComma: function() {
		return this.value == ",";
	}
	,isExclamation: function() {
		return this.value == "!";
	}
	,isSemicolon: function() {
		return this.value == ";";
	}
	,isBar: function() {
		return this.value == "|";
	}
	,isUnderscore: function() {
		return this.value == "_";
	}
	,isSingleQuote: function() {
		return this.value == "'";
	}
	,isDoubleQuote: function() {
		return this.value == "\"";
	}
	,isUppercase: function() {
		if(this.code >= 65) {
			return this.code <= 90;
		} else {
			return false;
		}
	}
	,isLowercase: function() {
		if(this.code >= 97) {
			return this.code <= 122;
		} else {
			return false;
		}
	}
	,isLetter: function() {
		if(!this.isUppercase()) {
			return this.isLowercase();
		} else {
			return true;
		}
	}
	,isAtomChar: function() {
		if(!(this.isUppercase() || this.isLowercase() || this.isDigit())) {
			return this.isUnderscore();
		} else {
			return true;
		}
	}
	,isVarChar: function() {
		if(!(this.isUppercase() || this.isLowercase() || this.isDigit())) {
			return this.isUnderscore();
		} else {
			return true;
		}
	}
	,isDigit: function() {
		if(this.code >= 48) {
			return this.code <= 57;
		} else {
			return false;
		}
	}
	,isHexDigit: function() {
		if(!(this.isDigit() || this.code >= 65 && this.code <= 70)) {
			if(this.code >= 97) {
				return this.code <= 102;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isHexX: function() {
		if(this.value != "x") {
			return this.value == "X";
		} else {
			return true;
		}
	}
	,isExponentE: function() {
		if(this.value != "e") {
			return this.value == "E";
		} else {
			return true;
		}
	}
	,isNumericSign: function() {
		if(this.value != "-") {
			return this.value == "+";
		} else {
			return true;
		}
	}
	,isZero: function() {
		return this.value == "0";
	}
	,isNewline: function() {
		return this.value == "\n";
	}
	,isReturn: function() {
		return this.value == "\r";
	}
	,isPeriod: function() {
		return this.value == ".";
	}
	,isMinus: function() {
		return this.value == "-";
	}
	,isLineComment: function() {
		return this.value == "%";
	}
	,isSlash: function() {
		return this.value == "/";
	}
	,isBackslash: function() {
		return this.value == "\\";
	}
	,isAsterisk: function() {
		return this.value == "*";
	}
	,isOpenParen: function() {
		return this.value == "(";
	}
	,isCloseParen: function() {
		return this.value == ")";
	}
	,isOpenBrace: function() {
		return this.value == "{";
	}
	,isCloseBrace: function() {
		return this.value == "}";
	}
	,isOpenBracket: function() {
		return this.value == "[";
	}
	,isCloseBracket: function() {
		return this.value == "]";
	}
	,isWhitespace: function() {
		return " \n\r\t\x0C".indexOf(this.value) >= 0;
	}
	,__class__: blub_prolog_stopgap_parse_Char
};
var blub_prolog_stopgap_parse_Lexer = function(text,origin,line,col) {
	if(col == null) {
		col = 1;
	}
	if(line == null) {
		line = 1;
	}
	if(origin == null) {
		origin = "<unknown>";
	}
	this.text = text;
	this.origin = origin;
	this.buffer = [];
	this.sanitize();
	this.readAllChars(line,col);
};
$hxClasses["blub.prolog.stopgap.parse.Lexer"] = blub_prolog_stopgap_parse_Lexer;
blub_prolog_stopgap_parse_Lexer.__name__ = "blub.prolog.stopgap.parse.Lexer";
blub_prolog_stopgap_parse_Lexer.prototype = {
	buffer: null
	,token: null
	,text: null
	,origin: null
	,next: function(skipWS) {
		if(skipWS == null) {
			skipWS = true;
		}
		this.token = [];
		if(skipWS) {
			this.skipWS();
		}
		if(this.buffer.length == 0) {
			return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_eof,this.token);
		}
		var type;
		while(this.isCommentStart()) this.skipComment();
		var ch = this.buffer[0];
		if(ch.isWhitespace()) {
			return this.gatherWS();
		}
		if(ch.isUnderscore() || ch.isUppercase()) {
			return this.gatherVar();
		}
		if(ch.isDigit()) {
			return this.gatherNumber();
		}
		if(ch.isPeriod() && (this.buffer.length == 1 || this.buffer[1].isWhitespace() || this.buffer[1].isLineComment() || this.buffer.length > 2 && this.buffer[1].isSlash() && this.buffer[2].isAsterisk())) {
			this.token.push(this.buffer.shift());
			return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_term_end,this.token);
		}
		if(ch.isOpChar()) {
			return this.gatherOp();
		}
		if(ch.isLowercase()) {
			return this.gatherAtom();
		}
		if(ch.isSingleQuote()) {
			return this.gatherQuotedAtom();
		}
		if(ch.isDoubleQuote()) {
			return this.gatherString();
		}
		if(ch.isComma()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_atom);
		}
		if(ch.isSemicolon()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_atom);
		}
		if(ch.isExclamation()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_atom);
		}
		if(ch.isBar()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_atom);
		}
		if(ch.isOpenParen()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_open_paren);
		}
		if(ch.isCloseParen()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_close_paren);
		}
		if(ch.isOpenBrace()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_open_brace);
		}
		if(ch.isCloseBrace()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_close_brace);
		}
		if(ch.isOpenBracket()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_open_bracket);
		}
		if(ch.isCloseBracket()) {
			return this.one(blub_prolog_stopgap_parse_TokenType.token_close_bracket);
		}
		throw haxe_Exception.thrown(new blub_prolog_stopgap_parse_ParseError("unrecognized character '" + ch.value + "'",this.origin,ch.line,ch.col));
	}
	,gatherString: function() {
		var start = this.buffer.shift();
		var end = null;
		while(true) {
			if(this.buffer.length == 0) {
				var last = this.token.pop();
				throw haxe_Exception.thrown(new blub_prolog_stopgap_parse_ParseError("unterminated string",this.origin,last.line,last.col));
			}
			if(this.buffer[0].isBackslash() && this.buffer.length > 1) {
				this.token.push(this.buffer.shift());
				this.token.push(this.buffer.shift());
				continue;
			}
			if(this.buffer[0].isDoubleQuote()) {
				end = this.buffer.shift();
				break;
			}
			this.token.push(this.buffer.shift());
		}
		return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_string,this.token,start,end);
	}
	,escapeReadChar: function() {
		if(this.buffer.length == 0) {
			return null;
		}
		var ch = this.buffer.shift();
		if(ch.isBackslash()) {
			if(this.buffer.length == 0) {
				throw haxe_Exception.thrown(new blub_prolog_stopgap_parse_ParseError("bad character escape",this.origin,ch.line,ch.col));
			}
			var ch2 = this.buffer.shift();
			switch(ch2.value) {
			case "\"":
				ch.value = "\"";
				break;
			case "'":
				ch.value = "'";
				break;
			case "\\":
				ch.value = "\\";
				break;
			case "`":
				ch.value = "`";
				break;
			case "a":
				ch.value = "\x07";
				break;
			case "b":
				ch.value = "\t";
				break;
			case "f":
				ch.value = "\x0C";
				break;
			case "n":
				ch.value = "\n";
				break;
			case "r":
				ch.value = "\r";
				break;
			case "t":
				ch.value = "\t";
				break;
			case "v":
				ch.value = "\x0B";
				break;
			case "X":case "x":
				var s = "0x";
				while(true) {
					if(this.buffer.length == 0) {
						throw haxe_Exception.thrown(new blub_prolog_stopgap_parse_ParseError("unterminated escape char",this.origin,ch2.line,ch2.col));
					}
					ch2 = this.buffer.shift();
					if(ch2.isDigit()) {
						s += ch2.value;
						continue;
					}
					if(ch2.isBackslash()) {
						var code = Std.parseInt(s);
						ch.value = String.fromCodePoint(code);
						break;
					}
					throw haxe_Exception.thrown(new blub_prolog_stopgap_parse_ParseError("non-digit in hex escape char",this.origin,ch2.line,ch2.col));
				}
				break;
			default:
				throw haxe_Exception.thrown(new blub_prolog_stopgap_parse_ParseError("bad character escape",this.origin,ch.line,ch.col));
			}
		}
		return ch;
	}
	,gatherQuotedAtom: function() {
		this.buffer.shift();
		while(true) {
			if(this.buffer.length == 0) {
				var buf = new StringBuf();
				var _g = 0;
				var _g1 = this.token;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					buf.b += Std.string(c.value);
				}
				var last = this.token.pop();
				throw haxe_Exception.thrown(new blub_prolog_stopgap_parse_ParseError("unterminated atom: " + Std.string(buf),this.origin,last.line,last.col));
			}
			if(this.buffer[0].isBackslash() && this.buffer.length > 1) {
				this.buffer.shift();
				var escChr = this.buffer.shift();
				var tmp;
				switch(escChr.value) {
				case "\\":
					tmp = "\\";
					break;
				case "n":
					tmp = "\n";
					break;
				case "r":
					tmp = "\r";
					break;
				case "t":
					tmp = "\t";
					break;
				default:
					tmp = "\\" + escChr.value;
				}
				escChr.value = tmp;
				this.token.push(escChr);
				continue;
			}
			if(this.buffer[0].isSingleQuote()) {
				if(this.buffer.length > 1 && this.buffer[1].isSingleQuote()) {
					this.token.push(this.buffer.shift());
					this.buffer.shift();
					continue;
				}
				this.buffer.shift();
				break;
			}
			this.token.push(this.buffer.shift());
		}
		return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_atom,this.token);
	}
	,gatherAtom: function() {
		this.token.push(this.buffer.shift());
		while(this.buffer.length > 0 && this.buffer[0].isAtomChar()) this.token.push(this.buffer.shift());
		return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_atom,this.token);
	}
	,gatherOp: function() {
		while(this.buffer.length > 0 && this.buffer[0].isOpChar()) this.token.push(this.buffer.shift());
		return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_atom,this.token);
	}
	,gatherNumber: function() {
		var ch = this.buffer.shift();
		this.token.push(ch);
		var type = blub_prolog_stopgap_parse_TokenType.token_int;
		if(ch.isZero() && this.buffer.length > 0 && this.buffer[0].isHexX()) {
			this.token.push(this.buffer.shift());
			return this.gatherHex();
		}
		this.gatherDigits();
		if(this.buffer.length > 1 && this.buffer[0].isPeriod() && this.buffer[1].isDigit()) {
			type = blub_prolog_stopgap_parse_TokenType.token_float;
			this.token.push(this.buffer.shift());
			this.gatherDigits();
		}
		if(this.buffer.length > 1 && this.buffer[0].isExponentE() && (this.buffer[1].isDigit() || this.buffer.length > 2 && this.buffer[1].isNumericSign() && this.buffer[2].isDigit())) {
			type = blub_prolog_stopgap_parse_TokenType.token_float;
			this.token.push(this.buffer.shift());
			if(this.buffer[0].isNumericSign()) {
				this.token.push(this.buffer.shift());
			}
			this.gatherDigits();
		}
		if(this.buffer.length > 0 && (this.buffer[0].isLetter() || this.buffer[0].isUnderscore())) {
			throw haxe_Exception.thrown(new blub_prolog_stopgap_parse_ParseError("invalid char after a number '" + this.buffer[0].value + "'",this.origin,this.buffer[0].line,this.buffer[0].col));
		}
		return new blub_prolog_stopgap_parse_Token(type,this.token);
	}
	,gatherDigits: function() {
		while(this.buffer.length > 0 && this.buffer[0].isDigit()) this.token.push(this.buffer.shift());
	}
	,gatherHex: function() {
		while(this.buffer.length > 0 && this.buffer[0].isHexDigit()) this.token.push(this.buffer.shift());
		return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_int,this.token);
	}
	,one: function(type) {
		this.token.push(this.buffer.shift());
		return new blub_prolog_stopgap_parse_Token(type,this.token);
	}
	,gatherVar: function() {
		while(this.buffer.length > 0 && this.buffer[0].isVarChar()) this.token.push(this.buffer.shift());
		return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_variable,this.token);
	}
	,gatherWS: function() {
		while(this.buffer.length > 0 && this.buffer[0].isWhitespace()) {
			if(this.isCommentStart()) {
				this.skipComment();
			}
			this.token.push(this.buffer.shift());
		}
		return new blub_prolog_stopgap_parse_Token(blub_prolog_stopgap_parse_TokenType.token_whitespace,this.token);
	}
	,skipWS: function() {
		while(this.buffer.length > 0 && (this.buffer[0].isWhitespace() || this.isCommentStart())) {
			if(this.isCommentStart()) {
				this.skipComment();
				continue;
			}
			this.buffer.shift();
		}
	}
	,isCommentStart: function() {
		if(this.buffer.length > 0 && this.buffer[0].isLineComment()) {
			return true;
		}
		if(this.buffer.length > 1 && this.buffer[0].isSlash() && this.buffer[1].isAsterisk()) {
			return true;
		}
		return false;
	}
	,skipComment: function() {
		if(this.buffer[0].isLineComment()) {
			this.skipToEndOfLine();
		} else {
			while(this.buffer.length > 0) if(this.buffer.shift().isAsterisk() && this.buffer.length > 0 && this.buffer[0].isSlash()) {
				this.buffer.shift();
				break;
			}
		}
	}
	,skipToEndOfLine: function() {
		while(this.buffer.length > 0) if(this.buffer.shift().isNewline()) {
			break;
		}
	}
	,sanitize: function() {
		this.text = StringTools.replace(this.text,"\r\n","\n");
		this.text = StringTools.replace(this.text,"\r","\n");
	}
	,readAllChars: function(line,col) {
		var _g = 0;
		var _g1 = this.text.length;
		while(_g < _g1) {
			var i = _g++;
			var c = new blub_prolog_stopgap_parse_Char(line,col,this.text,i);
			if(c.isNewline()) {
				++line;
				col = 1;
			} else {
				++col;
			}
			this.buffer.push(c);
		}
	}
	,__class__: blub_prolog_stopgap_parse_Lexer
};
var blub_prolog_stopgap_parse_Operator = function(atom,spec,priority) {
	this.priority = priority;
	this.spec = spec;
	this.atom = atom;
	var tmp;
	switch(spec._hx_index) {
	case 0:case 1:case 2:case 3:
		tmp = 1;
		break;
	case 4:case 5:case 6:
		tmp = 2;
		break;
	}
	this.arity = tmp;
	this.functor = atom.text + "/" + this.arity;
};
$hxClasses["blub.prolog.stopgap.parse.Operator"] = blub_prolog_stopgap_parse_Operator;
blub_prolog_stopgap_parse_Operator.__name__ = "blub.prolog.stopgap.parse.Operator";
blub_prolog_stopgap_parse_Operator.functorForOp = function(name,arity) {
	return name + "/" + arity;
};
blub_prolog_stopgap_parse_Operator.opSpec = function(s) {
	switch(s) {
	case "fx":
		return blub_prolog_stopgap_parse_OperatorSpec.op_fx;
	case "fy":
		return blub_prolog_stopgap_parse_OperatorSpec.op_fy;
	case "xf":
		return blub_prolog_stopgap_parse_OperatorSpec.op_xf;
	case "xfx":
		return blub_prolog_stopgap_parse_OperatorSpec.op_xfx;
	case "xfy":
		return blub_prolog_stopgap_parse_OperatorSpec.op_xfy;
	case "yf":
		return blub_prolog_stopgap_parse_OperatorSpec.op_yf;
	case "yfx":
		return blub_prolog_stopgap_parse_OperatorSpec.op_yfx;
	default:
		return null;
	}
};
blub_prolog_stopgap_parse_Operator.prototype = {
	atom: null
	,spec: null
	,priority: null
	,arity: null
	,functor: null
	,expectsLeft: function() {
		return this.get_leftSpec() != null;
	}
	,expectsRight: function() {
		return this.get_rightSpec() != null;
	}
	,rightSpec: null
	,get_rightSpec: function() {
		switch(this.spec._hx_index) {
		case 1:case 6:
			return blub_prolog_stopgap_parse_Specifier.spec_y;
		case 2:case 3:
			return null;
		case 0:case 4:case 5:
			return blub_prolog_stopgap_parse_Specifier.spec_x;
		}
	}
	,leftSpec: null
	,get_leftSpec: function() {
		switch(this.spec._hx_index) {
		case 0:case 1:
			return null;
		case 3:case 5:
			return blub_prolog_stopgap_parse_Specifier.spec_y;
		case 2:case 4:case 6:
			return blub_prolog_stopgap_parse_Specifier.spec_x;
		}
	}
	,compareToRight: function(right) {
		if(this.priority > right.priority) {
			return 1;
		}
		if(this.priority < right.priority) {
			return 2;
		}
		var rspec = this.get_rightSpec();
		var lspec = right.get_leftSpec();
		if(rspec == lspec) {
			return 0;
		}
		if(rspec == blub_prolog_stopgap_parse_Specifier.spec_y) {
			return 1;
		}
		return 2;
	}
	,__class__: blub_prolog_stopgap_parse_Operator
	,__properties__: {get_leftSpec:"get_leftSpec",get_rightSpec:"get_rightSpec"}
};
var blub_prolog_stopgap_parse_Specifier = $hxEnums["blub.prolog.stopgap.parse.Specifier"] = { __ename__ : "blub.prolog.stopgap.parse.Specifier", __constructs__ : ["spec_x","spec_y"]
	,spec_x: {_hx_index:0,__enum__:"blub.prolog.stopgap.parse.Specifier",toString:$estr}
	,spec_y: {_hx_index:1,__enum__:"blub.prolog.stopgap.parse.Specifier",toString:$estr}
};
blub_prolog_stopgap_parse_Specifier.__empty_constructs__ = [blub_prolog_stopgap_parse_Specifier.spec_x,blub_prolog_stopgap_parse_Specifier.spec_y];
var blub_prolog_stopgap_parse_OperatorSpec = $hxEnums["blub.prolog.stopgap.parse.OperatorSpec"] = { __ename__ : "blub.prolog.stopgap.parse.OperatorSpec", __constructs__ : ["op_fx","op_fy","op_xf","op_yf","op_xfx","op_yfx","op_xfy"]
	,op_fx: {_hx_index:0,__enum__:"blub.prolog.stopgap.parse.OperatorSpec",toString:$estr}
	,op_fy: {_hx_index:1,__enum__:"blub.prolog.stopgap.parse.OperatorSpec",toString:$estr}
	,op_xf: {_hx_index:2,__enum__:"blub.prolog.stopgap.parse.OperatorSpec",toString:$estr}
	,op_yf: {_hx_index:3,__enum__:"blub.prolog.stopgap.parse.OperatorSpec",toString:$estr}
	,op_xfx: {_hx_index:4,__enum__:"blub.prolog.stopgap.parse.OperatorSpec",toString:$estr}
	,op_yfx: {_hx_index:5,__enum__:"blub.prolog.stopgap.parse.OperatorSpec",toString:$estr}
	,op_xfy: {_hx_index:6,__enum__:"blub.prolog.stopgap.parse.OperatorSpec",toString:$estr}
};
blub_prolog_stopgap_parse_OperatorSpec.__empty_constructs__ = [blub_prolog_stopgap_parse_OperatorSpec.op_fx,blub_prolog_stopgap_parse_OperatorSpec.op_fy,blub_prolog_stopgap_parse_OperatorSpec.op_xf,blub_prolog_stopgap_parse_OperatorSpec.op_yf,blub_prolog_stopgap_parse_OperatorSpec.op_xfx,blub_prolog_stopgap_parse_OperatorSpec.op_yfx,blub_prolog_stopgap_parse_OperatorSpec.op_xfy];
var blub_prolog_stopgap_parse_Operators = function() {
	this.operators = new haxe_ds_StringMap();
};
$hxClasses["blub.prolog.stopgap.parse.Operators"] = blub_prolog_stopgap_parse_Operators;
blub_prolog_stopgap_parse_Operators.__name__ = "blub.prolog.stopgap.parse.Operators";
blub_prolog_stopgap_parse_Operators.prototype = {
	operators: null
	,add: function(op) {
		this.operators.h[op.functor] = op;
	}
	,newOp: function(name,spec,priority,context) {
		var op = new blub_prolog_stopgap_parse_Operator(context.getAtom(name),spec,priority);
		this.add(op);
		return op;
	}
	,lookup: function(name,arity) {
		return this.operators.h[name + "/" + arity];
	}
	,lookupAny: function(name) {
		var op = this.lookup(name,1);
		if(op != null) {
			return op;
		}
		return this.lookup(name,2);
	}
	,couldBeOp: function(name) {
		if(this.lookup(name,1) == null) {
			return this.lookup(name,2) != null;
		} else {
			return true;
		}
	}
	,new_op: function(name,spec,priority) {
		this.newOp(name,spec,priority,blub_prolog_AtomContext.GLOBALS);
	}
	,addStandardOps: function() {
		this.new_op("dynamic",blub_prolog_stopgap_parse_OperatorSpec.op_fx,1150);
		this.new_op("discontiguous",blub_prolog_stopgap_parse_OperatorSpec.op_fx,1150);
		this.new_op("multifile",blub_prolog_stopgap_parse_OperatorSpec.op_fx,1150);
		this.new_op(":-",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,1200);
		this.new_op("-->",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,1200);
		this.new_op("?-",blub_prolog_stopgap_parse_OperatorSpec.op_fx,1200);
		this.new_op(";",blub_prolog_stopgap_parse_OperatorSpec.op_xfy,1100);
		this.new_op("|",blub_prolog_stopgap_parse_OperatorSpec.op_xfy,1100);
		this.new_op("->",blub_prolog_stopgap_parse_OperatorSpec.op_xfy,1050);
		this.new_op(",",blub_prolog_stopgap_parse_OperatorSpec.op_xfy,1000);
		this.new_op("\\+",blub_prolog_stopgap_parse_OperatorSpec.op_fy,900);
		this.new_op("<",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("=..",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("=@=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("=:=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("=<",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("==",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("=\\=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op(">",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op(">=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("@<",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("@=<",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("@>",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("@>=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("\\=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("\\==",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("is",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op(":",blub_prolog_stopgap_parse_OperatorSpec.op_xfy,600);
		this.new_op("+",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,500);
		this.new_op("-",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,500);
		this.new_op("/\\",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,500);
		this.new_op("\\/",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,500);
		this.new_op("xor",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,500);
		this.new_op("?",blub_prolog_stopgap_parse_OperatorSpec.op_fx,500);
		this.new_op("*",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,400);
		this.new_op("/",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,400);
		this.new_op("//",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,400);
		this.new_op("<<",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,400);
		this.new_op(">>",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,400);
		this.new_op("mod",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,400);
		this.new_op("rem",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,400);
		this.new_op("**",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,200);
		this.new_op("^",blub_prolog_stopgap_parse_OperatorSpec.op_xfy,200);
		this.new_op("#",blub_prolog_stopgap_parse_OperatorSpec.op_fx,1);
		this.new_op("from_global",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,530);
		this.new_op("to_global",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,530);
		this.new_op("<-",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,510);
		this.new_op(".",blub_prolog_stopgap_parse_OperatorSpec.op_yfx,100);
		this.new_op("<=&",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,510);
		this.new_op("<=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,510);
		this.new_op("<#&",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,510);
		this.new_op("<#",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,510);
		this.new_op("spawn",blub_prolog_stopgap_parse_OperatorSpec.op_fx,910);
		this.new_op("spawns",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,910);
		this.new_op("change_in",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,910);
		this.new_op("@",blub_prolog_stopgap_parse_OperatorSpec.op_fx,110);
		this.new_op("@=",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,700);
		this.new_op("chr_constraint",blub_prolog_stopgap_parse_OperatorSpec.op_fx,1150);
		this.new_op("<=>",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,1190);
		this.new_op("==>",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,1190);
		this.new_op("\\",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,1150);
		this.new_op("or",blub_prolog_stopgap_parse_OperatorSpec.op_xfy,950);
		this.new_op("and",blub_prolog_stopgap_parse_OperatorSpec.op_xfy,930);
		this.new_op("~",blub_prolog_stopgap_parse_OperatorSpec.op_fx,100);
		this.new_op("=>",blub_prolog_stopgap_parse_OperatorSpec.op_xfx,1200);
	}
	,__class__: blub_prolog_stopgap_parse_Operators
};
var blub_prolog_stopgap_parse_ParseError = function(msg,origin,line,col) {
	blub_prolog_PrologError.call(this,msg);
	this.origin = origin;
	this.line = line;
	this.col = col;
};
$hxClasses["blub.prolog.stopgap.parse.ParseError"] = blub_prolog_stopgap_parse_ParseError;
blub_prolog_stopgap_parse_ParseError.__name__ = "blub.prolog.stopgap.parse.ParseError";
blub_prolog_stopgap_parse_ParseError.__super__ = blub_prolog_PrologError;
blub_prolog_stopgap_parse_ParseError.prototype = $extend(blub_prolog_PrologError.prototype,{
	origin: null
	,line: null
	,col: null
	,toString: function() {
		return this.origin + "<" + this.line + ":" + this.col + "> " + this.message;
	}
	,__class__: blub_prolog_stopgap_parse_ParseError
});
var blub_prolog_stopgap_parse_ParseNode = function(parser,term) {
	this.parser = parser;
	this.term = term;
	if(term != null && ((term) instanceof blub_prolog_terms_Atom)) {
		this.op = parser.operators.lookupAny((js_Boot.__cast(term , blub_prolog_terms_Atom)).text);
	}
};
$hxClasses["blub.prolog.stopgap.parse.ParseNode"] = blub_prolog_stopgap_parse_ParseNode;
blub_prolog_stopgap_parse_ParseNode.__name__ = "blub.prolog.stopgap.parse.ParseNode";
blub_prolog_stopgap_parse_ParseNode.prototype = {
	term: null
	,op: null
	,left: null
	,right: null
	,parent: null
	,parser: null
	,toString: function() {
		return this.term.toString();
	}
	,getRoot: function() {
		var root = this;
		while(root.parent != null) root = root.parent;
		return root;
	}
	,assembleTerm: function() {
		if(this.op != null) {
			var struct = new blub_prolog_terms_Structure(js_Boot.__cast(this.term , blub_prolog_terms_Atom));
			if(this.left != null) {
				struct.addArg(this.left.assembleTerm());
			}
			if(this.right != null) {
				struct.addArg(this.right.assembleTerm());
			}
			struct = this.checkIfThenElse(struct);
			return struct;
		}
		return this.term;
	}
	,checkIfThenElse: function(struct) {
		if(struct.getName().text == ";" && struct.getArity() == 2 && ((struct.argAt(0)) instanceof blub_prolog_terms_Structure) && (js_Boot.__cast(struct.argAt(0) , blub_prolog_terms_Structure)).getName().text == "->") {
			var ifThen = js_Boot.__cast(struct.argAt(0) , blub_prolog_terms_Structure);
			return new blub_prolog_terms_Structure(this.parser.context.getAtom("#if_then_else"),[ifThen.argAt(0),ifThen.argAt(1),struct.argAt(1)]);
		}
		return struct;
	}
	,assimilate: function(node) {
		if(node == null) {
			if(this.op != null) {
				if(this.parent == null && this.left == null && this.right == null) {
					return null;
				}
				if(this.right == null && this.op.expectsRight()) {
					throw haxe_Exception.thrown(this.parser.oops("operator '" + this.op.atom.text + "' expects a term to the right"));
				}
			}
			return null;
		}
		if(this.op != null && node.op == null) {
			if(!this.op.expectsRight()) {
				throw haxe_Exception.thrown(this.parser.oops("operator '" + this.op.atom.text + "' does not expect a term to the right"));
			}
			if(this.right != null) {
				throw haxe_Exception.thrown(this.parser.oops("*** IMPL ERROR - op right arg not empty ***"));
			}
			this.right = node;
			node.parent = this;
		} else if(this.op != null && node.op != null) {
			var op2 = node.op;
			if(this.op.expectsRight() && !op2.expectsLeft()) {
				this.right = node;
				node.parent = this;
			} else {
				throw haxe_Exception.thrown(this.parser.oops("*** IMPL ERROR - op clash *** " + Std.string(this.op) + " " + Std.string(op2)));
			}
		} else if(node.op != null) {
			var op2 = node.op;
			if(!op2.expectsLeft()) {
				throw haxe_Exception.thrown(this.parser.oops("operator '" + op2.atom.text + "' {" + op2.priority + "} does not expect a term to the left: " + Std.string(this.op.atom) + " {" + this.op.priority + "}"));
			}
			var leftChild = this.findInsertionPoint(op2);
			leftChild.makeLeftChildOf(node);
		} else if(this.op == null && node.op == null) {
			throw haxe_Exception.thrown(this.parser.oops("unexpected term - operator expected: " + Std.string(node)));
		}
		return node;
	}
	,makeLeftChildOf: function(node) {
		node.left = this;
		if(this.parent != null) {
			node.parent = this.parent;
			if(this.parent.left == this) {
				this.parent.left = node;
			} else {
				this.parent.right = node;
			}
		}
		this.parent = node;
	}
	,findInsertionPoint: function(op) {
		if(this.op != null) {
			switch(this.op.compareToRight(op)) {
			case 0:
				throw haxe_Exception.thrown(this.parser.oops("operator priority clash " + Std.string(this) + " " + Std.string(op.atom)));
			case 1:
				return this.right;
			case 2:
				if(this.parent != null) {
					return this.parent.findInsertionPoint(op);
				}
				return this;
			}
		}
		if(this.parent != null) {
			return this.parent.findInsertionPoint(op);
		}
		return this;
	}
	,__class__: blub_prolog_stopgap_parse_ParseNode
};
var blub_prolog_stopgap_parse_Parser = function(context,operators,text,origin,line,col) {
	if(col == null) {
		col = 1;
	}
	if(line == null) {
		line = 1;
	}
	if(origin == null) {
		origin = "<unknown>";
	}
	this.lastWasOp = true;
	this.origin = origin;
	this.operators = operators;
	this.context = context;
	if(this.context == null) {
		this.context = new blub_prolog_AtomContext();
	}
	this.lexer = new blub_prolog_stopgap_parse_Lexer(text,origin,line,col);
};
$hxClasses["blub.prolog.stopgap.parse.Parser"] = blub_prolog_stopgap_parse_Parser;
blub_prolog_stopgap_parse_Parser.__name__ = "blub.prolog.stopgap.parse.Parser";
blub_prolog_stopgap_parse_Parser.prototype = {
	lexer: null
	,origin: null
	,next: null
	,context: null
	,operators: null
	,lastReadToken: null
	,lastWasOp: null
	,nextTerm: function() {
		var tok = this.getNext(true);
		if(tok.type == blub_prolog_stopgap_parse_TokenType.token_eof) {
			return null;
		}
		if(tok.type == blub_prolog_stopgap_parse_TokenType.token_atom && tok.value == ":-") {
			var directive = this.readUntil(blub_prolog_stopgap_parse_TokenType.token_term_end);
			var stru = null;
			if(directive != null) {
				stru = directive.asStructure();
				if(stru != null) {
					stru = stru.unpackParentheses().asStructure();
				}
			}
			if(stru == null) {
				throw haxe_Exception.thrown(this.oops("Malformed directive",tok));
			}
			return blub_prolog_terms_Structure.make(this.context.getAtom(":-"),stru);
		} else {
			this.pushback(tok);
		}
		var term = this.readUntil(blub_prolog_stopgap_parse_TokenType.token_term_end);
		var s = term.asStructure();
		if(s != null) {
			term = s.unpackParentheses();
		}
		return term;
	}
	,readUntil: function(tokenType) {
		this.lastWasOp = true;
		var node = null;
		var term;
		while(true) {
			term = this.nextRawTerm(tokenType);
			if(!(term != null)) {
				break;
			}
			var newNode = new blub_prolog_stopgap_parse_ParseNode(this,term);
			if(node != null) {
				node = node.assimilate(newNode);
			} else {
				node = newNode;
			}
		}
		if(node != null) {
			node.assimilate(null);
			return node.getRoot().assembleTerm();
		} else {
			return null;
		}
	}
	,nextRawTerm: function(endType) {
		var t = this._nextRawTerm(endType);
		if(t == null) {
			return null;
		}
		var atom = t.asAtom();
		this.lastWasOp = atom != null && (this.operators.lookup(atom.text,1) != null || this.operators.lookup(atom.text,2) != null);
		return t;
	}
	,_nextRawTerm: function(endType) {
		if(endType == null) {
			endType = blub_prolog_stopgap_parse_TokenType.token_term_end;
		}
		var tok = this.getNext(true);
		if(tok.type == endType) {
			return null;
		}
		switch(tok.type._hx_index) {
		case 0:
			return new blub_prolog_terms_Variable(js_Boot.__cast(tok.value , String));
		case 1:
			return this.structureCheck(tok);
		case 2:case 3:
			return new blub_prolog_terms_NumberTerm(js_Boot.__cast(tok.value , Float));
		case 5:
			return this.stringList(js_Boot.__cast(tok.value , String));
		case 6:
			throw haxe_Exception.thrown(this.oops("unexpected end of term",tok));
		case 7:
			throw haxe_Exception.thrown(this.oops("unexpected end of source"));
		case 8:
			return blub_prolog_terms_Structure.make(this.context.getAtom("()"),this.readUntil(blub_prolog_stopgap_parse_TokenType.token_close_paren));
		case 10:
			return blub_prolog_terms_Structure.make(this.context.getAtom("{}"),this.readUntil(blub_prolog_stopgap_parse_TokenType.token_close_brace));
		case 12:
			return this.readList();
		default:
		}
		throw haxe_Exception.thrown(this.oops("unexpected token: " + Std.string(tok),tok));
	}
	,stringList: function(s) {
		var t = blub_prolog_terms_Structure.EMPTY_LIST;
		var i = s.length - 1;
		while(i >= 0) {
			var bar = new blub_prolog_terms_Structure(blub_prolog_terms_Structure.CONS_LIST,[new blub_prolog_terms_NumberTerm(HxOverrides.cca(s,i)),t]);
			t = bar;
			--i;
		}
		return t;
	}
	,readList: function() {
		var t = this.readUntil(blub_prolog_stopgap_parse_TokenType.token_close_bracket);
		if(t == null) {
			return blub_prolog_terms_Structure.EMPTY_LIST;
		}
		var tail;
		var head;
		if(((t) instanceof blub_prolog_terms_Structure)) {
			var s = js_Boot.__cast(t , blub_prolog_terms_Structure);
			if(s.getName().text == "|") {
				if(s.getArity() != 2) {
					throw haxe_Exception.thrown(this.oops("list bar '|' requires terms on either side"));
				}
				tail = s.argAt(1);
				head = s.argAt(0);
			} else {
				tail = blub_prolog_terms_Structure.EMPTY_LIST;
				head = s;
			}
		} else {
			tail = blub_prolog_terms_Structure.EMPTY_LIST;
			head = t;
		}
		if(((head) instanceof blub_prolog_terms_Structure) && (js_Boot.__cast(head , blub_prolog_terms_Structure)).getName().text == ",") {
			var headTerms = (js_Boot.__cast(head , blub_prolog_terms_Structure)).flattenTree(",");
			while(headTerms.length > 0) {
				var tailNode = new blub_prolog_terms_Structure(blub_prolog_terms_Structure.CONS_LIST,[headTerms.pop(),tail]);
				tail = tailNode;
			}
			return tail;
		}
		var list = new blub_prolog_terms_Structure(blub_prolog_terms_Structure.CONS_LIST,[head,tail]);
		return list;
	}
	,structureCheck: function(atom) {
		var tok = this.getNext(false);
		if(this.lastWasOp && atom.value == "-" && (tok.type == blub_prolog_stopgap_parse_TokenType.token_int || tok.type == blub_prolog_stopgap_parse_TokenType.token_float)) {
			var val = js_Boot.__cast(tok.value , Float);
			val = -val;
			return new blub_prolog_terms_NumberTerm(val);
		}
		if(!this.operators.couldBeOp(atom.value) && tok.type == blub_prolog_stopgap_parse_TokenType.token_open_paren) {
			return this.readStructure(atom);
		}
		this.pushback(tok);
		var text = atom.value;
		var a = this.context.getAtom(text);
		return a;
	}
	,readStructure: function(functor) {
		var args = this.readUntil(blub_prolog_stopgap_parse_TokenType.token_close_paren);
		if(args == null) {
			throw haxe_Exception.thrown(this.oops("invalid structure - empty parentheses",functor));
		}
		var argTerms;
		var stru = args.asStructure();
		if(stru != null) {
			argTerms = stru.flattenTree(",");
		} else {
			argTerms = [];
			argTerms.push(args);
		}
		return new blub_prolog_terms_Structure(this.context.getAtom(js_Boot.__cast(functor.value , String)),argTerms);
	}
	,pushback: function(tok) {
		if(this.next != null) {
			throw haxe_Exception.thrown(this.oops("Pushback queue is too small",tok));
		}
		this.next = tok;
	}
	,getNext: function(skipWS) {
		if(skipWS == null) {
			skipWS = true;
		}
		var tok;
		if(this.next == null) {
			tok = this.lexer.next(skipWS);
		} else if(skipWS && this.next.type == blub_prolog_stopgap_parse_TokenType.token_whitespace) {
			tok = this.lexer.next(true);
		} else {
			tok = this.next;
		}
		this.next = null;
		if(tok.type != blub_prolog_stopgap_parse_TokenType.token_eof) {
			this.lastReadToken = tok;
		}
		return tok;
	}
	,oops: function(msg,tok) {
		if(tok == null) {
			tok = this.lastReadToken;
		}
		return new blub_prolog_stopgap_parse_ParseError(msg,this.origin,tok.startLine,tok.startCol);
	}
	,__class__: blub_prolog_stopgap_parse_Parser
};
var blub_prolog_stopgap_parse_Token = function(type,chars,start,end) {
	this.type = type;
	if(type == blub_prolog_stopgap_parse_TokenType.token_eof) {
		return;
	}
	if(start == null) {
		start = chars[0];
	}
	if(end == null) {
		end = chars[chars.length - 1];
	}
	this.startLine = start.line;
	this.startCol = start.col;
	this.endLine = end.line;
	this.endCol = end.col;
	var s = chars.join("");
	if(type == blub_prolog_stopgap_parse_TokenType.token_int) {
		this.value = Std.parseInt(s);
	} else if(type == blub_prolog_stopgap_parse_TokenType.token_float) {
		this.value = parseFloat(s);
	} else {
		this.value = s;
	}
};
$hxClasses["blub.prolog.stopgap.parse.Token"] = blub_prolog_stopgap_parse_Token;
blub_prolog_stopgap_parse_Token.__name__ = "blub.prolog.stopgap.parse.Token";
blub_prolog_stopgap_parse_Token.prototype = {
	startLine: null
	,startCol: null
	,endLine: null
	,endCol: null
	,value: null
	,type: null
	,toString: function() {
		return Std.string(this.type) + " [" + this.startLine + ":" + this.startCol + "-" + this.endLine + ":" + this.endCol + "] = '" + Std.string(this.value) + "'";
	}
	,__class__: blub_prolog_stopgap_parse_Token
};
var blub_prolog_stopgap_parse_TokenType = $hxEnums["blub.prolog.stopgap.parse.TokenType"] = { __ename__ : "blub.prolog.stopgap.parse.TokenType", __constructs__ : ["token_variable","token_atom","token_int","token_float","token_whitespace","token_string","token_term_end","token_eof","token_open_paren","token_close_paren","token_open_brace","token_close_brace","token_open_bracket","token_close_bracket"]
	,token_variable: {_hx_index:0,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_atom: {_hx_index:1,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_int: {_hx_index:2,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_float: {_hx_index:3,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_whitespace: {_hx_index:4,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_string: {_hx_index:5,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_term_end: {_hx_index:6,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_eof: {_hx_index:7,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_open_paren: {_hx_index:8,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_close_paren: {_hx_index:9,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_open_brace: {_hx_index:10,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_close_brace: {_hx_index:11,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_open_bracket: {_hx_index:12,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
	,token_close_bracket: {_hx_index:13,__enum__:"blub.prolog.stopgap.parse.TokenType",toString:$estr}
};
blub_prolog_stopgap_parse_TokenType.__empty_constructs__ = [blub_prolog_stopgap_parse_TokenType.token_variable,blub_prolog_stopgap_parse_TokenType.token_atom,blub_prolog_stopgap_parse_TokenType.token_int,blub_prolog_stopgap_parse_TokenType.token_float,blub_prolog_stopgap_parse_TokenType.token_whitespace,blub_prolog_stopgap_parse_TokenType.token_string,blub_prolog_stopgap_parse_TokenType.token_term_end,blub_prolog_stopgap_parse_TokenType.token_eof,blub_prolog_stopgap_parse_TokenType.token_open_paren,blub_prolog_stopgap_parse_TokenType.token_close_paren,blub_prolog_stopgap_parse_TokenType.token_open_brace,blub_prolog_stopgap_parse_TokenType.token_close_brace,blub_prolog_stopgap_parse_TokenType.token_open_bracket,blub_prolog_stopgap_parse_TokenType.token_close_bracket];
var blub_prolog_terms_ListTerm = function() { };
$hxClasses["blub.prolog.terms.ListTerm"] = blub_prolog_terms_ListTerm;
blub_prolog_terms_ListTerm.__name__ = "blub.prolog.terms.ListTerm";
blub_prolog_terms_ListTerm.__isInterface__ = true;
blub_prolog_terms_ListTerm.__interfaces__ = [blub_prolog_terms_ValueTerm];
blub_prolog_terms_ListTerm.prototype = {
	listToArray: null
	,__class__: blub_prolog_terms_ListTerm
};
var blub_prolog_terms_Atom = function(text) {
	this.text = text;
};
$hxClasses["blub.prolog.terms.Atom"] = blub_prolog_terms_Atom;
blub_prolog_terms_Atom.__name__ = "blub.prolog.terms.Atom";
blub_prolog_terms_Atom.__interfaces__ = [blub_prolog_terms_ListTerm,blub_prolog_terms_ClauseTerm];
blub_prolog_terms_Atom.newUniqueAtom = function(prefix) {
	return new blub_prolog_terms_Atom(prefix + blub_prolog_terms_Atom.ID_GEN++);
};
blub_prolog_terms_Atom.unregisteredAtom = function(text) {
	return new blub_prolog_terms_Atom(text);
};
blub_prolog_terms_Atom.unquote = function(text) {
	if(StringTools.startsWith(text,"'") && StringTools.endsWith(text,"'")) {
		return HxOverrides.substr(text,1,text.length - 2);
	}
	return null;
};
blub_prolog_terms_Atom.escape = function(s) {
	if(s == null) {
		return null;
	}
	if(s.length == 0) {
		return "''";
	}
	if(s == "{}" || s == "[]") {
		return s;
	}
	var b = new StringBuf();
	var needsEscape = false;
	var code = HxOverrides.cca(s,0);
	var char = s.charAt(0);
	if(code >= blub_prolog_terms_Atom.a_CODE && code <= blub_prolog_terms_Atom.z_CODE || blub_prolog_stopgap_parse_Char.isOpChar_(char)) {
		needsEscape = false;
	} else {
		needsEscape = true;
	}
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		code = HxOverrides.cca(s,i);
		if(code == blub_prolog_terms_Atom.under_CODE || code >= blub_prolog_terms_Atom.A_CODE && code <= blub_prolog_terms_Atom.Z_CODE || code >= blub_prolog_terms_Atom.a_CODE && code <= blub_prolog_terms_Atom.z_CODE || code >= blub_prolog_terms_Atom.zero_CODE && code <= blub_prolog_terms_Atom.nine_CODE) {
			b.b += String.fromCodePoint(code);
			continue;
		}
		char = s.charAt(i);
		if(blub_prolog_stopgap_parse_Char.isOpChar_(char)) {
			b.b += char == null ? "null" : "" + char;
			continue;
		}
		needsEscape = true;
		var b1 = b;
		var b2 = b1.b;
		var tmp;
		switch(char) {
		case "\t":
			tmp = " ";
			break;
		case "\n":
			tmp = " ";
			break;
		case "\r":
			tmp = " ";
			break;
		case "'":
			tmp = "''";
			break;
		case "\\":
			tmp = "\\\\";
			break;
		default:
			tmp = char;
		}
		b1.b = b2 + Std.string(tmp);
	}
	if(needsEscape) {
		return "'" + Std.string(b) + "'";
	} else {
		return s;
	}
};
blub_prolog_terms_Atom.prototype = {
	object: null
	,text: null
	,getIndicator: function() {
		return new blub_prolog_PredicateIndicator(this,0);
	}
	,getHead: function() {
		return this;
	}
	,getBody: function() {
		return null;
	}
	,getFunctor: function() {
		return this.text + "/0";
	}
	,getArgs: function() {
		return [];
	}
	,getNameText: function() {
		return this.text;
	}
	,toString: function() {
		return blub_prolog_terms_Atom.escape(this.text);
	}
	,asValueTerm: function() {
		return this;
	}
	,asAtom: function() {
		return this;
	}
	,asStructure: function() {
		return null;
	}
	,asNumber: function() {
		return null;
	}
	,asReference: function() {
		return null;
	}
	,asUnchasedReference: function() {
		return null;
	}
	,isGround: function() {
		return true;
	}
	,hasReferences: function() {
		return false;
	}
	,hasVariables: function() {
		return false;
	}
	,dereference: function() {
		return this;
	}
	,toValue: function(env) {
		return this;
	}
	,commaSeparated: function() {
		return [this];
	}
	,gatherReferences: function(refs) {
		if(refs != null) {
			return refs;
		}
		return [];
	}
	,couldMatch: function(arg) {
		if(arg.asReference() != null) {
			return true;
		}
		return this.equals(arg);
	}
	,match: function(other,env,trail) {
		return this.equals(other.dereference());
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		var otherAtom = other.asAtom();
		if(otherAtom == null) {
			return false;
		}
		if(this == otherAtom) {
			return true;
		}
		if(this.object != null && otherAtom.object != null) {
			return this.object == otherAtom.object;
		}
		return this.text == otherAtom.text;
	}
	,unify: function(other,trail) {
		if(other.asReference() != null) {
			return other.unify(this,trail);
		}
		return this.equals(other);
	}
	,isList: function() {
		return this == blub_prolog_terms_Structure.EMPTY_LIST;
	}
	,listToArray: function() {
		if(this.isList()) {
			return [];
		}
		return null;
	}
	,__class__: blub_prolog_terms_Atom
};
var blub_prolog_terms_NumberTerm = function(value) {
	this.value = value;
};
$hxClasses["blub.prolog.terms.NumberTerm"] = blub_prolog_terms_NumberTerm;
blub_prolog_terms_NumberTerm.__name__ = "blub.prolog.terms.NumberTerm";
blub_prolog_terms_NumberTerm.__interfaces__ = [blub_prolog_terms_ValueTerm];
blub_prolog_terms_NumberTerm.prototype = {
	value: null
	,asValueTerm: function() {
		return this;
	}
	,asAtom: function() {
		return null;
	}
	,asStructure: function() {
		return null;
	}
	,asNumber: function() {
		return this;
	}
	,asReference: function() {
		return null;
	}
	,asUnchasedReference: function() {
		return null;
	}
	,isGround: function() {
		return true;
	}
	,hasReferences: function() {
		return false;
	}
	,hasVariables: function() {
		return false;
	}
	,dereference: function() {
		return this;
	}
	,toValue: function(env) {
		return this;
	}
	,commaSeparated: function() {
		return [this];
	}
	,gatherReferences: function(refs) {
		if(refs != null) {
			return refs;
		}
		return [];
	}
	,toString: function() {
		return Std.string(this.value);
	}
	,equals: function(other) {
		var otherNum = other.asNumber();
		if(otherNum == null) {
			return false;
		}
		return otherNum.value == this.value;
	}
	,match: function(other,env,trail) {
		return this.equals(other.dereference());
	}
	,couldMatch: function(arg) {
		if(arg.asReference() != null) {
			return true;
		}
		return this.equals(arg);
	}
	,unify: function(other,trail) {
		if(other.asReference() != null) {
			return other.unify(this,trail);
		}
		return this.equals(other);
	}
	,__class__: blub_prolog_terms_NumberTerm
};
var blub_prolog_terms_Structure = function(name,$arguments) {
	this.atom = name;
	if($arguments != null) {
		this.args = $arguments;
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			this.hasRefs = this.hasRefs || arg.hasReferences();
			this.hasVars = this.hasVars || arg.hasVariables();
		}
	} else {
		this.args = [];
	}
};
$hxClasses["blub.prolog.terms.Structure"] = blub_prolog_terms_Structure;
blub_prolog_terms_Structure.__name__ = "blub.prolog.terms.Structure";
blub_prolog_terms_Structure.__interfaces__ = [blub_prolog_terms_ListTerm,blub_prolog_terms_ClauseTerm];
blub_prolog_terms_Structure.make = function(functor,arg) {
	var s = new blub_prolog_terms_Structure(functor,[arg]);
	return s;
};
blub_prolog_terms_Structure.make2 = function(functor,arg1,arg2) {
	var s = new blub_prolog_terms_Structure(functor,[arg1,arg2]);
	return s;
};
blub_prolog_terms_Structure.makeList = function(elems) {
	if(elems.length == 0) {
		return blub_prolog_terms_Structure.EMPTY_LIST;
	}
	var tail = blub_prolog_terms_Structure.EMPTY_LIST;
	while(elems.length > 0) {
		var elem = elems.pop();
		var s = new blub_prolog_terms_Structure(blub_prolog_terms_Structure.CONS_LIST);
		s.addArg(elem);
		s.addArg(tail);
		tail = s;
	}
	return tail;
};
blub_prolog_terms_Structure.prototype = {
	args: null
	,atom: null
	,hasVars: null
	,hasRefs: null
	,varContext: null
	,variableContext: null
	,addArg: function(t) {
		this.args.push(t);
		this.hasRefs = this.hasRefs || t.hasReferences();
		this.hasVars = this.hasVars || t.hasVariables();
	}
	,prependArg: function(t) {
		this.args.unshift(t);
		this.hasRefs = this.hasRefs || t.hasReferences();
		this.hasVars = this.hasVars || t.hasVariables();
	}
	,updateArg: function(arg) {
		this.hasRefs = this.hasRefs || arg.hasReferences();
		this.hasVars = this.hasVars || arg.hasVariables();
	}
	,forceHasRefs: function() {
		this.hasRefs = true;
	}
	,asValueTerm: function() {
		return this;
	}
	,asAtom: function() {
		return null;
	}
	,asStructure: function() {
		return this;
	}
	,asNumber: function() {
		return null;
	}
	,asReference: function() {
		return null;
	}
	,asUnchasedReference: function() {
		return null;
	}
	,hasReferences: function() {
		return this.hasRefs;
	}
	,hasVariables: function() {
		return this.hasVars;
	}
	,isGround: function() {
		if(this.hasVars) {
			return false;
		}
		return !this.hasUnboundRefs();
	}
	,equals: function(other) {
		var otherS = other.asStructure();
		if(otherS == null) {
			return false;
		}
		if(!this.atom.equals(otherS.atom)) {
			return false;
		}
		if(this.args.length != otherS.args.length) {
			return false;
		}
		var _g = 0;
		var _g1 = this.args.length;
		while(_g < _g1) {
			var i = _g++;
			if(!this.args[i].equals(otherS.args[i])) {
				return false;
			}
		}
		return true;
	}
	,match: function(other,env,trail) {
		var otherStruct = other.asStructure();
		if(otherStruct == null) {
			return false;
		}
		if(!this.atom.equals(otherStruct.atom)) {
			return false;
		}
		if(this.args.length != otherStruct.args.length) {
			return false;
		}
		var otherArgs = otherStruct.args;
		var _g = 0;
		var _g1 = this.args.length;
		while(_g < _g1) {
			var i = _g++;
			if(!this.args[i].match(otherArgs[i].asValueTerm(),env,trail)) {
				return false;
			}
		}
		return true;
	}
	,couldMatch: function(arg) {
		if(arg.asReference() != null) {
			return true;
		}
		var argStruct = arg.asStructure();
		if(argStruct == null) {
			return false;
		}
		if(argStruct.atom.equals(this.atom)) {
			return argStruct.getArity() == this.getArity();
		} else {
			return false;
		}
	}
	,unify: function(other,trail) {
		if(other.asReference() != null) {
			return other.unify(this,trail);
		}
		var stru = other.asStructure();
		if(stru == null) {
			return false;
		}
		if(!this.atom.equals(stru.atom)) {
			return false;
		}
		if(this.args.length != stru.args.length) {
			return false;
		}
		var _g = 0;
		var _g1 = this.args.length;
		while(_g < _g1) {
			var i = _g++;
			var arg1 = this.args[i].asValueTerm();
			var arg2 = stru.args[i].asValueTerm();
			if(!arg1.unify(arg2,trail)) {
				return false;
			}
		}
		return true;
	}
	,isConjunction: function() {
		if(this.args.length == 2) {
			return this.atom.text == ",";
		} else {
			return false;
		}
	}
	,isDisjunction: function() {
		if(this.args.length == 2) {
			return this.atom.text == ";";
		} else {
			return false;
		}
	}
	,variablize: function(varMap) {
		if(this.hasVars) {
			return this;
		}
		if(!this.hasRefs) {
			return this;
		}
		if(varMap == null) {
			varMap = new haxe_ds_ObjectMap();
		}
		var copy = new blub_prolog_terms_Structure(this.atom);
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			var ref = arg.asReference();
			if(ref != null) {
				var v = varMap.h[ref.__id__];
				if(v == null) {
					v = new blub_prolog_terms_Variable(ref.get_name());
					varMap.set(ref,v);
				}
				copy.addArg(v);
			} else {
				var stru = arg.asStructure();
				if(stru != null) {
					copy.addArg(stru.variablize(varMap));
				} else {
					copy.addArg(arg);
				}
			}
		}
		return copy;
	}
	,unpackParentheses: function() {
		if(this.atom.text == "()") {
			var s = this.argAt(0).asStructure();
			if(s != null) {
				return s.unpackParentheses();
			}
			return this.argAt(0);
		}
		var _g = 0;
		var _g1 = this.args.length;
		while(_g < _g1) {
			var i = _g++;
			var s = this.args[i].asStructure();
			if(s != null) {
				this.args[i] = s.unpackParentheses();
			}
		}
		return this;
	}
	,toValue: function(env) {
		if(!this.hasVars) {
			return this;
		}
		var copy = new blub_prolog_terms_Structure(this.atom);
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			copy.addArg(arg.toValue(env));
		}
		return copy;
	}
	,varsToReferences: function() {
		if(!this.hasVars) {
			return this;
		}
		var env = this.get_variableContext().createNamedEnvironment();
		return this.toValue(env);
	}
	,hasUnboundRefs: function() {
		if(!this.hasRefs) {
			return false;
		}
		if(this.atom == blub_prolog_terms_Structure.CONS_LIST) {
			var queue = new haxe_ds_List();
			queue.add(this);
			while(!queue.isEmpty()) {
				var s = queue.pop();
				var arg1 = s.argAt(0);
				if(!arg1.isGround()) {
					return true;
				}
				var arg2 = s.argAt(1);
				var str = arg2.asStructure();
				if(str != null && str.atom == blub_prolog_terms_Structure.CONS_LIST) {
					queue.add(str);
				} else if(!arg2.isGround()) {
					return true;
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.args;
			while(_g < _g1.length) {
				var arg = _g1[_g];
				++_g;
				if(!arg.isGround()) {
					return true;
				}
			}
		}
		return false;
	}
	,gatherReferences: function(refs) {
		if(refs == null) {
			refs = [];
		}
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			var vt = arg.asValueTerm();
			if(vt != null) {
				vt.gatherReferences(refs);
			}
		}
		return refs;
	}
	,dereference: function() {
		if(!this.hasRefs) {
			return this;
		}
		if(this.atom == blub_prolog_terms_Structure.CONS_LIST) {
			var elems = [];
			var head = this;
			while(true) {
				if(!head.hasRefs) {
					elems.push(head);
					break;
				}
				var headCopy = new blub_prolog_terms_Structure(head.getName());
				headCopy.addArg(head.argAt(0).asValueTerm().dereference());
				elems.push(headCopy);
				if(head.argAt(1) == null) {
					break;
				}
				var next = head.argAt(1).asValueTerm();
				if(next.asStructure() != null) {
					head = next.asStructure();
				} else {
					headCopy.addArg(next.dereference());
					break;
				}
			}
			var tail = null;
			while(elems.length > 0) {
				var elem = elems.pop();
				if(tail != null) {
					elem.addArg(tail);
				}
				tail = elem;
			}
			return tail.asStructure();
		} else {
			var copy = new blub_prolog_terms_Structure(this.atom);
			var _g = 0;
			var _g1 = this.args;
			while(_g < _g1.length) {
				var arg = _g1[_g];
				++_g;
				var valTerm = arg;
				copy.addArg(valTerm.dereference());
			}
			return copy;
		}
	}
	,getHead: function() {
		if(this.atom.text == ":-" && this.args.length == 2 && js_Boot.__implements(this.args[0],blub_prolog_terms_ClauseTerm)) {
			return js_Boot.__cast(this.args[0] , blub_prolog_terms_ClauseTerm);
		}
		return this;
	}
	,getBody: function() {
		if(this.atom.text == ":-" && this.args.length == 2 && js_Boot.__implements(this.args[1],blub_prolog_terms_ClauseTerm)) {
			return js_Boot.__cast(this.args[1] , blub_prolog_terms_ClauseTerm);
		}
		return null;
	}
	,get_variableContext: function() {
		if(this.varContext == null) {
			var name2var = new haxe_ds_StringMap();
			var index2var = [];
			this.initContext(new blub_prolog_terms_VariableContext(this,name2var,index2var),name2var,index2var);
		}
		return this.varContext;
	}
	,useVarContext: function(context,name2var,index2var) {
		this.initContext(context,name2var,index2var);
	}
	,initContext: function(context,name2var,index2var) {
		this.varContext = context;
		var _g = 0;
		var _g1 = this.args.length;
		while(_g < _g1) {
			var i = _g++;
			var arg = this.args[i];
			if(((arg) instanceof blub_prolog_terms_Variable)) {
				var argVar = js_Boot.__cast(arg , blub_prolog_terms_Variable);
				if(argVar.get_name() == "_") {
					continue;
				}
				var key = argVar.get_name();
				var v = name2var.h[key];
				if(v == null) {
					if(argVar.index != -1) {
						haxe_Log.trace("OOPS " + argVar.get_name() + " " + Std.string(this),{ fileName : "src/blub/prolog/terms/Structure.hx", lineNumber : 434, className : "blub.prolog.terms.Structure", methodName : "initContext"});
					}
					argVar.initIndex(index2var.length);
					var key1 = argVar.get_name();
					name2var.h[key1] = argVar;
					index2var.push(argVar);
				} else {
					this.args[i] = v;
				}
			} else if(((arg) instanceof blub_prolog_terms_Structure)) {
				var argStruct = js_Boot.__cast(arg , blub_prolog_terms_Structure);
				argStruct.initContext(context,name2var,index2var);
			}
		}
	}
	,argAt: function(index) {
		return this.args[index];
	}
	,getArgs: function() {
		return this.args;
	}
	,getArity: function() {
		return this.args.length;
	}
	,getName: function() {
		return this.atom;
	}
	,getIndicator: function() {
		return new blub_prolog_PredicateIndicator(this.atom,this.args.length);
	}
	,getFunctor: function() {
		return this.atom.text + "/" + this.args.length;
	}
	,getNameText: function() {
		return this.atom.text;
	}
	,clone: function(fn) {
		var s = new blub_prolog_terms_Structure(this.atom);
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			s.addArg(fn(a));
		}
		return s;
	}
	,flattenTree: function(func) {
		if(func == null) {
			func = this.atom.text;
		}
		var terms = [];
		var tree = this;
		while(true) if(tree.atom.text == func && tree.args.length == 2) {
			var args = tree.args;
			terms.push(args[0]);
			if(((args[1]) instanceof blub_prolog_terms_Structure)) {
				tree = js_Boot.__cast(args[1] , blub_prolog_terms_Structure);
			} else {
				terms.push(args[1]);
				break;
			}
		} else {
			terms.push(tree);
			break;
		}
		return terms;
	}
	,commaSeparated: function() {
		return this.commaList();
	}
	,commaList: function(array) {
		if(array == null) {
			array = [];
		}
		if(this.atom.text == ",") {
			array.push(this.args[0]);
			var arg1struct = this.args[1].asStructure();
			if(arg1struct != null) {
				arg1struct.commaList(array);
			} else {
				array.push(this.args[1]);
			}
			return array;
		} else {
			array.push(this);
		}
		return array;
	}
	,couldBeList: function() {
		if(this.atom == blub_prolog_terms_Structure.CONS_LIST) {
			return this.getArity() == 2;
		} else {
			return false;
		}
	}
	,isList: function() {
		var str = this;
		while(str.atom == blub_prolog_terms_Structure.CONS_LIST && str.getArity() == 2) {
			var tail = str.argAt(1);
			var atm = tail.asAtom();
			if(atm != null) {
				return atm.isList();
			}
			var ref = tail.asReference();
			if(ref != null) {
				return true;
			}
			str = tail.asStructure();
			if(str == null) {
				return false;
			}
		}
		return false;
	}
	,listIterator: function() {
		return new blub_prolog_terms__$Structure_ListIterator(this);
	}
	,listStructureIterator: function() {
		return new blub_prolog_terms__$Structure_ListStructureIterator(this);
	}
	,listToArray: function() {
		return this.toArray();
	}
	,toArray: function(array) {
		if(this.atom == blub_prolog_terms_Structure.CONS_LIST) {
			if(array == null) {
				array = [];
			}
			array.push(this.args[0]);
			var s = this.args[1].asStructure();
			if(s != null) {
				s.toArray(array);
			}
			return array;
		}
		return null;
	}
	,listToString: function() {
		var buf_b = "";
		buf_b += "[";
		var stru = this;
		while(true) {
			var arg0 = stru.argAt(0);
			if(arg0 == null) {
				buf_b += "<???>";
				break;
			}
			buf_b += Std.string(arg0.toString());
			var tail = stru.argAt(1);
			if(tail == null) {
				buf_b += "|<???>";
				break;
			}
			if(tail.asReference() != null) {
				tail = tail.asReference().dereference();
			}
			if(tail == blub_prolog_terms_Structure.EMPTY_LIST) {
				break;
			}
			var tailS = tail.asStructure();
			if(tailS != null && tailS.atom == blub_prolog_terms_Structure.CONS_LIST) {
				buf_b += ",";
				stru = tailS;
				continue;
			}
			buf_b += "|";
			buf_b += Std.string(tail.toString());
			break;
		}
		buf_b += "]";
		return buf_b;
	}
	,commaToString: function(s) {
		if(s == null) {
			s = "(";
		}
		if(this.atom.text == ",") {
			var _g = 0;
			var _g1 = this.args.length;
			while(_g < _g1) {
				var i = _g++;
				if(i > 0) {
					s += ",";
				}
				if(((this.args[i]) instanceof blub_prolog_terms_Structure)) {
					s = (js_Boot.__cast(this.args[i] , blub_prolog_terms_Structure)).commaToString(s);
				} else {
					s += "" + Std.string(this.args[i]);
				}
			}
		} else {
			s += this.toString();
		}
		return s;
	}
	,toString: function() {
		if(this.atom == blub_prolog_terms_Structure.CONS_LIST) {
			return this.listToString();
		}
		if(this.atom.text == ",") {
			return this.commaToString() + ")";
		}
		var s = this.atom.toString();
		s += "( ";
		var first = true;
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(first) {
				first = false;
			} else {
				s += ", ";
			}
			s += Std.string(t);
		}
		s += " )";
		return s;
	}
	,__class__: blub_prolog_terms_Structure
	,__properties__: {get_variableContext:"get_variableContext"}
};
var blub_prolog_terms__$Structure_ListStructureIterator = function(s) {
	this.s = s;
};
$hxClasses["blub.prolog.terms._Structure.ListStructureIterator"] = blub_prolog_terms__$Structure_ListStructureIterator;
blub_prolog_terms__$Structure_ListStructureIterator.__name__ = "blub.prolog.terms._Structure.ListStructureIterator";
blub_prolog_terms__$Structure_ListStructureIterator.prototype = {
	s: null
	,next: function() {
		if(this.s.getName() == blub_prolog_terms_Structure.CONS_LIST) {
			var stru = this.s;
			this.s = this.s.argAt(1).asStructure();
			return stru;
		}
		return null;
	}
	,hasNext: function() {
		return this.s.getName() == blub_prolog_terms_Structure.CONS_LIST;
	}
	,__class__: blub_prolog_terms__$Structure_ListStructureIterator
};
var blub_prolog_terms__$Structure_ListIterator = function(s) {
	this.s = s;
};
$hxClasses["blub.prolog.terms._Structure.ListIterator"] = blub_prolog_terms__$Structure_ListIterator;
blub_prolog_terms__$Structure_ListIterator.__name__ = "blub.prolog.terms._Structure.ListIterator";
blub_prolog_terms__$Structure_ListIterator.prototype = {
	s: null
	,next: function() {
		if(this.s.getName() == blub_prolog_terms_Structure.CONS_LIST) {
			var elem = this.s.argAt(0);
			this.s = this.s.argAt(1).asStructure();
			return elem;
		}
		return null;
	}
	,hasNext: function() {
		return this.s.getName() == blub_prolog_terms_Structure.CONS_LIST;
	}
	,__class__: blub_prolog_terms__$Structure_ListIterator
};
var blub_prolog_terms_TermParse = $hx_exports["blub"]["prolog"]["terms"]["TermParse"] = function() { };
$hxClasses["blub.prolog.terms.TermParse"] = blub_prolog_terms_TermParse;
blub_prolog_terms_TermParse.__name__ = "blub.prolog.terms.TermParse";
blub_prolog_terms_TermParse.parse = function(s,context,operators) {
	if(context == null) {
		context = blub_prolog_AtomContext.GLOBALS;
	}
	if(operators == null) {
		operators = new blub_prolog_stopgap_parse_Operators();
		operators.addStandardOps();
	}
	if(s.charAt(s.length - 1) != ".") {
		s += " .";
	}
	var parser = new blub_prolog_stopgap_parse_Parser(context,operators,s,"method=Term.parse()");
	return parser.nextTerm();
};
var blub_prolog_terms_Variable = function(name) {
	this._name = name;
	this.index = -1;
};
$hxClasses["blub.prolog.terms.Variable"] = blub_prolog_terms_Variable;
blub_prolog_terms_Variable.__name__ = "blub.prolog.terms.Variable";
blub_prolog_terms_Variable.__interfaces__ = [blub_prolog_terms_Term];
blub_prolog_terms_Variable.prototype = {
	index: null
	,_name: null
	,name: null
	,asValueTerm: function() {
		return null;
	}
	,asAtom: function() {
		return null;
	}
	,asStructure: function() {
		return null;
	}
	,asNumber: function() {
		return null;
	}
	,asReference: function() {
		return null;
	}
	,asUnchasedReference: function() {
		return null;
	}
	,isGround: function() {
		return false;
	}
	,hasReferences: function() {
		return false;
	}
	,hasVariables: function() {
		return true;
	}
	,toValue: function(env) {
		if(this.index < 0) {
			return new blub_prolog_terms_Reference();
		}
		return env[this.index];
	}
	,commaSeparated: function() {
		return [this];
	}
	,equals: function(other) {
		return this == other;
	}
	,match: function(other,env,trail) {
		if(env == null || this.get_name() == "_") {
			return true;
		}
		if(this.index >= env.length) {
			return false;
		}
		var ref = env[this.index];
		return ref.match(other,env,trail);
	}
	,couldMatch: function(arg) {
		return true;
	}
	,initIndex: function(index) {
		if(this.index != -1) {
			throw haxe_Exception.thrown("Cannot set var index more than once - " + this._name + " was " + this.index + ", setting to " + index);
		}
		this.index = index;
	}
	,toString: function() {
		return this.get_name();
	}
	,get_name: function() {
		if(this._name == null) {
			this._name = "_G" + blub_prolog_terms_Variable.nameCount++;
		}
		return this._name;
	}
	,__class__: blub_prolog_terms_Variable
	,__properties__: {get_name:"get_name"}
};
var blub_prolog_terms_VariableContext = function(root,name2var,index2var) {
	this.root = root;
	this.index2var = index2var;
	this.name2var = name2var;
};
$hxClasses["blub.prolog.terms.VariableContext"] = blub_prolog_terms_VariableContext;
blub_prolog_terms_VariableContext.__name__ = "blub.prolog.terms.VariableContext";
blub_prolog_terms_VariableContext.prototype = {
	root: null
	,count: null
	,name2var: null
	,index2var: null
	,varNamed: function(name) {
		return this.name2var.h[name];
	}
	,varAt: function(index) {
		return this.index2var[index];
	}
	,variables: function() {
		return new haxe_iterators_ArrayIterator(this.index2var);
	}
	,variableNames: function() {
		var names = [];
		var v = this.variables();
		while(v.hasNext()) {
			var v1 = v.next();
			names.push(v1.get_name());
		}
		return names;
	}
	,createEnvironment: function() {
		var c = this.get_count();
		if(c == 0) {
			return null;
		}
		var environment = [];
		var _g = 0;
		var _g1 = c;
		while(_g < _g1) {
			var i = _g++;
			environment.push(new blub_prolog_terms_Reference());
		}
		return environment;
	}
	,createNamedEnvironment: function() {
		if(this.get_count() == 0) {
			return null;
		}
		var environment = [];
		var _g = 0;
		var _g1 = this.index2var;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			environment.push(new blub_prolog_terms_Reference(v.get_name()));
		}
		return environment;
	}
	,get_count: function() {
		return this.index2var.length;
	}
	,toString: function() {
		return "VariableContext:" + Std.string(this.index2var);
	}
	,__class__: blub_prolog_terms_VariableContext
	,__properties__: {get_count:"get_count"}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = {};
haxe_CallStack.__properties__ = {get_length:"get_length"};
haxe_CallStack.get_length = function(this1) {
	return this1.length;
};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function() {
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.copy = function(this1) {
	return this1.slice();
};
haxe_CallStack.get = function(this1,index) {
	return this1[index];
};
haxe_CallStack.asArray = function(this1) {
	return this1;
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.exceptionToString = function(e) {
	if(e.get_previous() == null) {
		var tmp = "Exception: " + e.get_message();
		var tmp1 = e.get_stack();
		return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
	}
	var result = "";
	var e1 = e;
	var prev = null;
	while(e1 != null) {
		if(prev == null) {
			var result1 = "Exception: " + e1.get_message();
			var tmp = e1.get_stack();
			result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
		} else {
			var prevStack = haxe_CallStack.subtract(e1.get_stack(),prev.get_stack());
			result = "Exception: " + e1.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
		}
		prev = e1;
		e1 = e1.get_previous();
	}
	return result;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
	,__class__: haxe_IMap
};
var haxe_DynamicAccess = {};
haxe_DynamicAccess._new = function() {
	var this1 = { };
	return this1;
};
haxe_DynamicAccess.get = function(this1,key) {
	return this1[key];
};
haxe_DynamicAccess.set = function(this1,key,value) {
	return this1[key] = value;
};
haxe_DynamicAccess.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
haxe_DynamicAccess.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
haxe_DynamicAccess.keys = function(this1) {
	return Reflect.fields(this1);
};
haxe_DynamicAccess.copy = function(this1) {
	return Reflect.copy(this1);
};
haxe_DynamicAccess.iterator = function(this1) {
	return new haxe_iterators_DynamicAccessIterator(this1);
};
haxe_DynamicAccess.keyValueIterator = function(this1) {
	return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,details: function() {
		if(this.get_previous() == null) {
			var tmp = "Exception: " + this.get_message();
			var tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			var result = "";
			var e = this;
			var prev = null;
			while(e != null) {
				if(prev == null) {
					var result1 = "Exception: " + e.get_message();
					var tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					var prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_previous: function() {
		return this.__previousException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,get___exceptionStack: function() {
		return this.__exceptionStack;
	}
	,set___exceptionStack: function(value) {
		this.setProperty("__exceptionStack",value);
		return value;
	}
	,get___skipStack: function() {
		return this.__skipStack;
	}
	,set___skipStack: function(value) {
		this.setProperty("__skipStack",value);
		return value;
	}
	,get___nativeException: function() {
		return this.__nativeException;
	}
	,set___nativeException: function(value) {
		this.setProperty("__nativeException",value);
		return value;
	}
	,get___previousException: function() {
		return this.__previousException;
	}
	,set___previousException: function(value) {
		this.setProperty("__previousException",value);
		return value;
	}
	,__class__: haxe_Exception
	,__properties__: {set___exceptionStack:"set___exceptionStack",get___exceptionStack:"get___exceptionStack",get_native:"get_native",get_previous:"get_previous",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Int32 = {};
haxe_Int32.negate = function(this1) {
	return ~this1 + 1 | 0;
};
haxe_Int32.preIncrement = function(this1) {
	this1 = ++this1 | 0;
	return this1;
};
haxe_Int32.postIncrement = function(this1) {
	var ret = this1++;
	this1 |= 0;
	return ret;
};
haxe_Int32.preDecrement = function(this1) {
	this1 = --this1 | 0;
	return this1;
};
haxe_Int32.postDecrement = function(this1) {
	var ret = this1--;
	this1 |= 0;
	return ret;
};
haxe_Int32.add = function(a,b) {
	return a + b | 0;
};
haxe_Int32.addInt = function(a,b) {
	return a + b | 0;
};
haxe_Int32.sub = function(a,b) {
	return a - b | 0;
};
haxe_Int32.subInt = function(a,b) {
	return a - b | 0;
};
haxe_Int32.intSub = function(a,b) {
	return a - b | 0;
};
haxe_Int32.mul = function(a,b) {
	return haxe_Int32._mul(a,b);
};
haxe_Int32.mulInt = function(a,b) {
	return haxe_Int32._mul(a,b);
};
haxe_Int32.toFloat = function(this1) {
	return this1;
};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
haxe_Int32.clamp = function(x) {
	return x | 0;
};
var haxe_Int64 = {};
haxe_Int64.__properties__ = {get_low:"get_low",get_high:"get_high"};
haxe_Int64._new = function(x) {
	var this1 = x;
	return this1;
};
haxe_Int64.copy = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	return this2;
};
haxe_Int64.make = function(high,low) {
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.ofInt = function(x) {
	var this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	return this1;
};
haxe_Int64.toInt = function(x) {
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	return x.low;
};
haxe_Int64.is = function(val) {
	return ((val) instanceof haxe__$Int64__$_$_$Int64);
};
haxe_Int64.isInt64 = function(val) {
	return ((val) instanceof haxe__$Int64__$_$_$Int64);
};
haxe_Int64.getHigh = function(x) {
	return x.high;
};
haxe_Int64.getLow = function(x) {
	return x.low;
};
haxe_Int64.isNeg = function(x) {
	return x.high < 0;
};
haxe_Int64.isZero = function(x) {
	var b_high = 0;
	var b_low = 0;
	if(x.high == b_high) {
		return x.low == b_low;
	} else {
		return false;
	}
};
haxe_Int64.compare = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	if(a.high < 0) {
		if(b.high < 0) {
			return v;
		} else {
			return -1;
		}
	} else if(b.high >= 0) {
		return v;
	} else {
		return 1;
	}
};
haxe_Int64.ucompare = function(a,b) {
	var v = haxe_Int32.ucompare(a.high,b.high);
	if(v != 0) {
		return v;
	} else {
		return haxe_Int32.ucompare(a.low,b.low);
	}
};
haxe_Int64.toStr = function(x) {
	return haxe_Int64.toString(x);
};
haxe_Int64.toString = function(this1) {
	var i = this1;
	var b_high = 0;
	var b_low = 0;
	if(i.high == b_high && i.low == b_low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,10);
	var ten = this1;
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(i.high != b_high || i.low != b_low)) {
			break;
		}
		var r = haxe_Int64.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this_high = high;
			var this_low = low;
			str = this_low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = ~x1.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
			i = this1;
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe_Int64.parseString = function(sParam) {
	return haxe_Int64Helper.parseString(sParam);
};
haxe_Int64.fromFloat = function(f) {
	return haxe_Int64Helper.fromFloat(f);
};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			var this2 = new haxe__$Int64__$_$_$Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		modulus = this1;
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		divisor = this1;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var quotient = this1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,1);
	var mask = this1;
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
			divisor = this3;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this4 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this4;
		} else if(b1 < 32) {
			var this5 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this5;
		} else {
			var this6 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
			mask = this6;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this1;
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			var this2 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this2;
		}
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this3 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this3;
		} else if(b < 32) {
			var this4 = new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b);
			mask = this4;
		} else {
			var this5 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
			mask = this5;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this6 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this6;
		} else if(b1 < 32) {
			var this7 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1);
			divisor = this7;
		} else {
			var this8 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
			divisor = this8;
		}
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		quotient = this1;
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this1;
	}
	return { quotient : quotient, modulus : modulus};
};
haxe_Int64.neg = function(x) {
	var high = ~x.high;
	var low = ~x.low + 1 | 0;
	if(low == 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.preIncrement = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	var ret = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret = this1.high++;
		this1.high = this1.high | 0;
	}
	return this1;
};
haxe_Int64.postIncrement = function(this1) {
	var ret = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	var ret1 = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret1 = this1.high++;
		this1.high = this1.high | 0;
	}
	return ret;
};
haxe_Int64.preDecrement = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret = this1.low--;
	this1.low = this1.low | 0;
	return this1;
};
haxe_Int64.postDecrement = function(this1) {
	var ret = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret1 = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret1 = this1.low--;
	this1.low = this1.low | 0;
	return ret;
};
haxe_Int64.add = function(a,b) {
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe_Int32.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.addInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var high = a.high + b_high | 0;
	var low = a.low + b_low | 0;
	if(haxe_Int32.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.sub = function(a,b) {
	var high = a.high - b.high | 0;
	var low = a.low - b.low | 0;
	if(haxe_Int32.ucompare(a.low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.subInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var high = a.high - b_high | 0;
	var low = a.low - b_low | 0;
	if(haxe_Int32.ucompare(a.low,b_low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.intSub = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var high = a_high - b.high | 0;
	var low = a_low - b.low | 0;
	if(haxe_Int32.ucompare(a_low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.mul = function(a,b) {
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b.low & mask;
	var bh = b.low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a.low,b.high) + haxe_Int32._mul(a.high,b.low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.mulInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a.low,b_high) + haxe_Int32._mul(a.high,b_low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.div = function(a,b) {
	return haxe_Int64.divMod(a,b).quotient;
};
haxe_Int64.divInt = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
	return haxe_Int64.divMod(a,this1).quotient;
};
haxe_Int64.intDiv = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
	var x = haxe_Int64.divMod(this1,b).quotient;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.mod = function(a,b) {
	return haxe_Int64.divMod(a,b).modulus;
};
haxe_Int64.modInt = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
	var x = haxe_Int64.divMod(a,this1).modulus;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.intMod = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
	var x = haxe_Int64.divMod(this1,b).modulus;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.eq = function(a,b) {
	if(a.high == b.high) {
		return a.low == b.low;
	} else {
		return false;
	}
};
haxe_Int64.eqInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	if(a.high == b_high) {
		return a.low == b_low;
	} else {
		return false;
	}
};
haxe_Int64.neq = function(a,b) {
	if(a.high == b.high) {
		return a.low != b.low;
	} else {
		return true;
	}
};
haxe_Int64.neqInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	if(a.high == b_high) {
		return a.low != b_low;
	} else {
		return true;
	}
};
haxe_Int64.lt = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe_Int64.ltInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
};
haxe_Int64.intLt = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe_Int64.lte = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe_Int64.lteInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) <= 0;
};
haxe_Int64.intLte = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe_Int64.gt = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe_Int64.gtInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0;
};
haxe_Int64.intGt = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe_Int64.gte = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe_Int64.gteInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) >= 0;
};
haxe_Int64.intGte = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe_Int64.complement = function(a) {
	var this1 = new haxe__$Int64__$_$_$Int64(~a.high,~a.low);
	return this1;
};
haxe_Int64.and = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	return this1;
};
haxe_Int64.or = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high | b.high,a.low | b.low);
	return this1;
};
haxe_Int64.xor = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high ^ b.high,a.low ^ b.low);
	return this1;
};
haxe_Int64.shl = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
		return this1;
	}
};
haxe_Int64.shr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >> 31,a.high >> b - 32);
		return this1;
	}
};
haxe_Int64.ushr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
		return this1;
	}
};
haxe_Int64.get_high = function(this1) {
	return this1.high;
};
haxe_Int64.set_high = function(this1,x) {
	return this1.high = x;
};
haxe_Int64.get_low = function(this1) {
	return this1.low;
};
haxe_Int64.set_low = function(this1,x) {
	return this1.low = x;
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,toString: function() {
		return haxe_Int64.toString(this);
	}
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
haxe_Int64Helper.parseString = function(sParam) {
	var base_high = 0;
	var base_low = 10;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var current = this1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,1);
	var multiplier = this1;
	var sIsNegative = false;
	var s = StringTools.trim(sParam);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var digitInt = HxOverrides.cca(s,len - 1 - i) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw haxe_Exception.thrown("NumberFormatError");
		}
		if(digitInt != 0) {
			var digit_high = digitInt >> 31;
			var digit_low = digitInt;
			if(sIsNegative) {
				var mask = 65535;
				var al = multiplier.low & mask;
				var ah = multiplier.low >>> 16;
				var bl = digit_low & mask;
				var bh = digit_low >>> 16;
				var p00 = haxe_Int32._mul(al,bl);
				var p10 = haxe_Int32._mul(ah,bl);
				var p01 = haxe_Int32._mul(al,bh);
				var p11 = haxe_Int32._mul(ah,bh);
				var low = p00;
				var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 <<= 16;
				low = low + p01 | 0;
				if(haxe_Int32.ucompare(low,p01) < 0) {
					var ret = high++;
					high = high | 0;
				}
				p10 <<= 16;
				low = low + p10 | 0;
				if(haxe_Int32.ucompare(low,p10) < 0) {
					var ret1 = high++;
					high = high | 0;
				}
				high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high = high;
				var b_low = low;
				var high1 = current.high - b_high | 0;
				var low1 = current.low - b_low | 0;
				if(haxe_Int32.ucompare(current.low,b_low) < 0) {
					var ret2 = high1--;
					high1 = high1 | 0;
				}
				var this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
				current = this1;
				if(!(current.high < 0)) {
					throw haxe_Exception.thrown("NumberFormatError: Underflow");
				}
			} else {
				var mask1 = 65535;
				var al1 = multiplier.low & mask1;
				var ah1 = multiplier.low >>> 16;
				var bl1 = digit_low & mask1;
				var bh1 = digit_low >>> 16;
				var p001 = haxe_Int32._mul(al1,bl1);
				var p101 = haxe_Int32._mul(ah1,bl1);
				var p011 = haxe_Int32._mul(al1,bh1);
				var p111 = haxe_Int32._mul(ah1,bh1);
				var low2 = p001;
				var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
				p011 <<= 16;
				low2 = low2 + p011 | 0;
				if(haxe_Int32.ucompare(low2,p011) < 0) {
					var ret3 = high2++;
					high2 = high2 | 0;
				}
				p101 <<= 16;
				low2 = low2 + p101 | 0;
				if(haxe_Int32.ucompare(low2,p101) < 0) {
					var ret4 = high2++;
					high2 = high2 | 0;
				}
				high2 = high2 + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high1 = high2;
				var b_low1 = low2;
				var high3 = current.high + b_high1 | 0;
				var low3 = current.low + b_low1 | 0;
				if(haxe_Int32.ucompare(low3,current.low) < 0) {
					var ret5 = high3++;
					high3 = high3 | 0;
				}
				var this2 = new haxe__$Int64__$_$_$Int64(high3,low3);
				current = this2;
				if(current.high < 0) {
					throw haxe_Exception.thrown("NumberFormatError: Overflow");
				}
			}
		}
		var mask2 = 65535;
		var al2 = multiplier.low & mask2;
		var ah2 = multiplier.low >>> 16;
		var bl2 = base_low & mask2;
		var bh2 = base_low >>> 16;
		var p002 = haxe_Int32._mul(al2,bl2);
		var p102 = haxe_Int32._mul(ah2,bl2);
		var p012 = haxe_Int32._mul(al2,bh2);
		var p112 = haxe_Int32._mul(ah2,bh2);
		var low4 = p002;
		var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 <<= 16;
		low4 = low4 + p012 | 0;
		if(haxe_Int32.ucompare(low4,p012) < 0) {
			var ret6 = high4++;
			high4 = high4 | 0;
		}
		p102 <<= 16;
		low4 = low4 + p102 | 0;
		if(haxe_Int32.ucompare(low4,p102) < 0) {
			var ret7 = high4++;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe_Int32._mul(multiplier.low,base_high) + haxe_Int32._mul(multiplier.high,base_low) | 0) | 0;
		var this3 = new haxe__$Int64__$_$_$Int64(high4,low4);
		multiplier = this3;
	}
	return current;
};
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw haxe_Exception.thrown("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw haxe_Exception.thrown("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw haxe_Exception.thrown("Conversion underflow");
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var result = this1;
	var neg = noFractions < 0;
	var rest = neg ? -noFractions : noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var a_high = 0;
			var a_low = 1;
			var b = i;
			b &= 63;
			var b1;
			if(b == 0) {
				var this1 = new haxe__$Int64__$_$_$Int64(a_high,a_low);
				b1 = this1;
			} else if(b < 32) {
				var this2 = new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b);
				b1 = this2;
			} else {
				var this3 = new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
				b1 = this3;
			}
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe_Int32.ucompare(low,result.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			var this4 = new haxe__$Int64__$_$_$Int64(high,low);
			result = this4;
		}
		++i;
	}
	if(neg) {
		var high = ~result.high;
		var low = ~result.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		result = this1;
	}
	return result;
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.content = null;
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = HxOverrides.now() / 1000;
	var r = f();
	haxe_Log.trace(HxOverrides.now() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return HxOverrides.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
haxe_crypto_Base64.urlEncode = function(bytes,complement) {
	if(complement == null) {
		complement = false;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.URL_BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.urlDecode = function(str,complement) {
	if(complement == null) {
		complement = false;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.URL_BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.encode = function(s,base) {
	var b = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base));
	return b.encodeString(s);
};
haxe_crypto_BaseCode.decode = function(s,base) {
	var b = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base));
	return b.decodeString(s);
};
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,encodeString: function(s) {
		return this.encodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,decodeString: function(s) {
		return this.decodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,copy: function() {
		var copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	,clear: function() {
		this.root = null;
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,copy: function() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_HashMap = {};
haxe_ds_HashMap._new = function() {
	var this1 = new haxe_ds__$HashMap_HashMapData();
	return this1;
};
haxe_ds_HashMap.set = function(this1,k,v) {
	var _this = this1.keys;
	var key = k.hashCode();
	_this.h[key] = k;
	var _this = this1.values;
	var key = k.hashCode();
	_this.h[key] = v;
};
haxe_ds_HashMap.get = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h[key];
};
haxe_ds_HashMap.exists = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h.hasOwnProperty(key);
};
haxe_ds_HashMap.remove = function(this1,k) {
	this1.values.remove(k.hashCode());
	return this1.keys.remove(k.hashCode());
};
haxe_ds_HashMap.keys = function(this1) {
	return this1.keys.iterator();
};
haxe_ds_HashMap.copy = function(this1) {
	var copied = new haxe_ds__$HashMap_HashMapData();
	copied.keys = this1.keys.copy();
	copied.values = this1.values.copy();
	return copied;
};
haxe_ds_HashMap.iterator = function(this1) {
	return this1.values.iterator();
};
haxe_ds_HashMap.keyValueIterator = function(this1) {
	return new haxe_iterators_HashMapKeyValueIterator(this1);
};
haxe_ds_HashMap.clear = function(this1) {
	this1.keys.h = { };
	this1.values.h = { };
};
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
haxe_ds__$HashMap_HashMapData.prototype = {
	keys: null
	,values: null
	,__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { };
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$List_ListKeyValueIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,filter: function(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,map: function(f) {
		var b = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds__$List_ListKeyValueIterator = function(head) {
	this.head = head;
	this.idx = 0;
};
$hxClasses["haxe.ds._List.ListKeyValueIterator"] = haxe_ds__$List_ListKeyValueIterator;
haxe_ds__$List_ListKeyValueIterator.__name__ = "haxe.ds._List.ListKeyValueIterator";
haxe_ds__$List_ListKeyValueIterator.prototype = {
	idx: null
	,head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return { value : val, key : this.idx++};
	}
	,__class__: haxe_ds__$List_ListKeyValueIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.assignId = function(obj) {
	return (obj.__id__ = $global.$haxeUID++);
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { __keys__ : { }};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_ReadOnlyArray = {};
haxe_ds_ReadOnlyArray.__properties__ = {get_length:"get_length"};
haxe_ds_ReadOnlyArray.get_length = function(this1) {
	return this1.length;
};
haxe_ds_ReadOnlyArray.get = function(this1,i) {
	return this1[i];
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,keyValueIterator: function() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	,copy: function() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	,clear: function() {
		this.h = Object.create(null);
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds_WeakMap = function() {
	throw haxe_Exception.thrown("Not implemented for this platform");
};
$hxClasses["haxe.ds.WeakMap"] = haxe_ds_WeakMap;
haxe_ds_WeakMap.__name__ = "haxe.ds.WeakMap";
haxe_ds_WeakMap.__interfaces__ = [haxe_IMap];
haxe_ds_WeakMap.prototype = {
	set: function(key,value) {
	}
	,get: function(key) {
		return null;
	}
	,exists: function(key) {
		return false;
	}
	,remove: function(key) {
		return false;
	}
	,keys: function() {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,keyValueIterator: function() {
		return null;
	}
	,copy: function() {
		return null;
	}
	,toString: function() {
		return null;
	}
	,clear: function() {
	}
	,__class__: haxe_ds_WeakMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_ArrayKeyValueIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
haxe_iterators_ArrayKeyValueIterator.prototype = {
	current: null
	,array: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return { value : this.array[this.current], key : this.current++};
	}
	,__class__: haxe_iterators_ArrayKeyValueIterator
};
var haxe_iterators_DynamicAccessIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
haxe_iterators_DynamicAccessIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		return this.access[this.keys[this.index++]];
	}
	,__class__: haxe_iterators_DynamicAccessIterator
};
var haxe_iterators_DynamicAccessKeyValueIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
haxe_iterators_DynamicAccessKeyValueIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
	,__class__: haxe_iterators_DynamicAccessKeyValueIterator
};
var haxe_iterators_HashMapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys.iterator();
};
$hxClasses["haxe.iterators.HashMapKeyValueIterator"] = haxe_iterators_HashMapKeyValueIterator;
haxe_iterators_HashMapKeyValueIterator.__name__ = "haxe.iterators.HashMapKeyValueIterator";
haxe_iterators_HashMapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		var _this = this.map.values;
		var key1 = key.hashCode();
		return { value : _this.h[key1], key : key};
	}
	,__class__: haxe_iterators_HashMapKeyValueIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_iterators_StringIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
haxe_iterators_StringIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return this.s.charCodeAt(this.offset++);
	}
	,__class__: haxe_iterators_StringIterator
};
var haxe_iterators_StringIteratorUnicode = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
haxe_iterators_StringIteratorUnicode.unicodeIterator = function(s) {
	return new haxe_iterators_StringIteratorUnicode(s);
};
haxe_iterators_StringIteratorUnicode.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		var s = this.s;
		var index = this.offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	,__class__: haxe_iterators_StringIteratorUnicode
};
var haxe_iterators_StringKeyValueIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
haxe_iterators_StringKeyValueIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
	,__class__: haxe_iterators_StringKeyValueIterator
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_self:"get_self"};
js_Browser.get_self = function() {
	return $global;
};
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
js_Browser.getSessionStorage = function() {
	try {
		var s = window.sessionStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
js_Browser.alert = function(v) {
	window.alert(Std.string(v));
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib.eval = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
js_Lib.rethrow = function() {
};
js_Lib.getOriginalException = function() {
	return null;
};
js_Lib.getNextHaxeUID = function() {
	return $global.$haxeUID++;
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_lib_KeyValue = {};
js_lib_KeyValue.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_lib_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_lib_ObjectEntry = {};
js_lib_ObjectEntry.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib_ObjectEntry.get_key = function(this1) {
	return this1[0];
};
js_lib_ObjectEntry.get_value = function(this1) {
	return this1[1];
};
var theories_EightQueens = function() { };
$hxClasses["theories.EightQueens"] = theories_EightQueens;
theories_EightQueens.__name__ = "theories.EightQueens";
var theories_OKeefe8Queens = function() { };
$hxClasses["theories.OKeefe8Queens"] = theories_OKeefe8Queens;
theories_OKeefe8Queens.__name__ = "theories.OKeefe8Queens";
var theories_Zebra = function() { };
$hxClasses["theories.Zebra"] = theories_Zebra;
theories_Zebra.__name__ = "theories.Zebra";
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
haxe_Resource.content = [{ name : "DefiniteClauseGrammar.prolog", data : "cHJlcHJvY2Vzc29yKCBwcmVwcm9jZXNzRENHICkuCgolPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiUgRGVmaW5pdGUgQ2xhdXNlIEdyYW1tYXJzCiU9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KcHJlcHJvY2Vzc0RDRyhfICxbXSxbXSkgOi0gIS4KcHJlcHJvY2Vzc0RDRyhEQiwoSGVhZC0tPlRhaWwpLE91dCkgOi0gZGNnKEhlYWQsVGFpbCxPdXQpLgoKZGNnKEgsVCxPdXQpIDotIGRjZyhULEEsQixUMiksIEg9Li5IMiwgYXBwZW5kKEgyLFtBLEJdLEgzKSwgSDQ9Li5IMywgT3V0PShINDotVDIpLgoKJS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KJSBSZXdyaXRlIGEgdGVybSBpbiB0aGUgYm9keQolIFQgLSB0ZXJtIGluLCBBIC0gaW5jb21pbmcgbGlzdCwgQiAtIG91dGdvaW5nIGxpc3QsIE91dCAtIHJld3JpdHRlbiB0ZXJtIAolLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKZGNnKChYLFkpICxBLEIsT3V0KSA6LSBkY2coWCxBLEEyLFgyKSwgZGNnKFksQTIsQixZMiksIE91dD0oWDIsWTIpLCAhLgpkY2coKFg7WSkgLEEsQixPdXQpIDotIGRjZyhYLEEsQixYMiksICBkY2coWSxBLEIsWTIpLCAgT3V0PShYMjtZMiksICEuCmRjZygoISkgICAsQSxBLCghKSkgOi0gIS4KZGNnKChcK1QpICxBLEIsT3V0KSA6LSBkY2coVCxBLEIsVDIpLCBPdXQ9KFwrVDIpLCAhLgpkY2coe091dH0gLEEsQSxPdXQpIDotICEuCmRjZyhUICAgICAsQSxCLE91dCkgOi0gaXNfbGlzdChUKSwgYXBwZW5kKFQsQixUMiksIE91dD0oQT1UMiksICEuCgpkY2coKFQ+PkMpLEEsQixPdXQpIDotIGRjZyhULEEsQixUMiksIE91dD0oVDIsbGlzdF9zbGljZShBLEIsQykpLCAhLgoKZGNnKChJLT5UKSxBLEIsT3V0KSA6LSBkY2coSSxBLEEyLEkyKSwgIGRjZyhULEEyLEIsVDIpLCAgT3V0PShJMi0+VDIpLCAhLgoKZGNnKCcjaWZfdGhlbl9lbHNlJyhJLFQsRSksQSxCLE91dCkgOi0gCiAgICBkY2coSSxBICxBMixJMiksCiAgICBkY2coVCxBMixCICxUMiksCiAgICBkY2coRSxBICxCICxFMiksCiAgICBPdXQ9JyNpZl90aGVuX2Vsc2UnKEkyLFQyLEUyKSwgIS4KCmRjZyhULEEsQixPdXQpIDotIFQ9Li5UMiwgYXBwZW5kKFQyLFtBLEJdLFQzKSwgT3V0PS4uVDMuCg"},{ name : "ConstraintHandlingRules.prolog", data : "cHJlcHJvY2Vzc29yKCBwcmVwcm9jZXNzQ0hSICkuCgolPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiUgQ29uc3RyYWludCBIYW5kbGluZyBSdWxlcyAoRXh0ZW5kZWQpCiU9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCnByZXByb2Nlc3NDSFIoREIsQSxbXSkgOi0gIAogICAgY29uc3RyYWludF9kZWNsKERCLEEpIDsKCXNpbXBsaWZpY2F0aW9uX3J1bGUoREIsQSkgOyAKCXByb3BhZ2F0aW9uX3J1bGUoREIsQSkuICAKCiUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiUgCiUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpwcm9wYWdhdGlvbl9ydWxlKERCLChIZWFkID09PiBUYWlsKSkgOi0gISwgCiAgICBSdWxlIDwtIERCLmdldENvbnN0cmFpbnRDb250ZXh0KHZvaWQpLm5ld1J1bGVCdWlsZGVyKCB0ZXJtKEhlYWQgPT0+IFRhaWwpICksCiAgICBSdWxlLnByb2Nlc3NSdWxlSGVhZCggdGVybSggSGVhZCApICksCglSdWxlLnByb2Nlc3NSdWxlQm9keSggdGVybSggVGFpbCApICksCiAgICB3cml0ZShwcm9wYWdhdGlvbl9ydWxlKERCLChIZWFkID09PiBUYWlsKSkpIC4KCgoKCgpzaW1wbGlmaWNhdGlvbl9ydWxlKERCLChIZWFkIDw9PiBUYWlsKSkgOi0gISwgd3JpdGUoc2ltcGxpZmljYXRpb25fcnVsZShEQiwoSGVhZCA8PT4gVGFpbCkpKSAuCgoKCgolLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQolIENvbnN0cmFpbnQgZGVjbGFyYXRpb24gZGlyZWN0aXZlCiUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjb25zdHJhaW50X2RlY2woREIsKDotIGNocl9jb25zdHJhaW50KENDKSkpIDotICEsIGZpbmRhbGwoXyxkZWNsYXJlX2NvbnN0cmFpbnRzKCBEQiwgQ0MgKSwgXykuCgpkZWNsYXJlX2NvbnN0cmFpbnRzKCBEQiwgKENvbnMsTW9yZSkgKSA6LSAhLCAgCiAgICBkZWNsYXJlX2NvbnN0cmFpbnQoIERCLCBDb25zICksCglkZWNsYXJlX2NvbnN0cmFpbnRzKCBEQiwgTW9yZSApLgoJCmRlY2xhcmVfY29uc3RyYWludHMoIERCLCBDb25zICkgOi0gZGVjbGFyZV9jb25zdHJhaW50KCBEQiwgQ29ucyApLgoJCmRlY2xhcmVfY29uc3RyYWludCggREIsIE5hbWUvQXJpdHkgKSA6LSAhLAogICAgREIuZGVjbGFyZUNvbnN0cmFpbnRQcmVkaWNhdGUoICdibHViLnByb2xvZy5QcmVkaWNhdGVJbmRpY2F0b3InKHRlcm0oTmFtZSksQXJpdHkpICkuCgkKZGVjbGFyZV9jb25zdHJhaW50KCBEQiwgT3RoZXIgKSA6LSB0aHJvd191cCggaW52YWxpZF9jb25zdHJhaW50X2RlY2xhcmF0aW9uKE90aGVyKSApLg"}];
haxe_ds_ObjectMap.count = 0;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
TimingTests.queens_theory = "queens([]).                                  % when place queen in empty list, solution found\n \nqueens([ Row/Col | Rest]) :-                 % otherwise, for each row\n            queens(Rest),                    % place a queen in each higher numbered row\n            member(Col, [1,2,3,4,5,6,7,8]),  % pick one of the possible column positions\n            safe( Row/Col, Rest).            % and see if that is a safe position\n                                             % if not, fail back and try another column, until\n                                             % the columns are all tried, when fail back to\n                                             % previous row\n \nsafe(_, []).                                 % the empty board is always safe\n \nsafe(Row/Col, [Row1/Col1 | Rest]) :-         % see if attack the queen in next row down\n            Col =\\= Col1,                   % same column?\n            Col1 - Col =\\= Row1 - Row,      % check diagonal\n            Col1 - Col =\\= Row - Row1,\n            safe(Row/Col, Rest).             % no attack on next row, try the rest of board\n  \nboard([1/_, 2/_, 3/_, 4/_, 5/_, 6/_, 7/_, 8/_]).  % prototype board\n\nrun_queens(B) :- board(B),queens(B).\n";
TimingTests.okeefe_queens_theory = "queens(Queens) :-\n    board(Queens, Board, 0, 8, _, _),\n    queens(Board, 0, Queens).\n\nboard([], [], N, N, _, _).\nboard([_|Queens], [Col-Vars|Board], Col0, N, [_|VR], VC) :-\n    Col is Col0+1,\n    functor(Vars, f, N),\n    constraints(N, Vars, VR, VC),\n    board(Queens, Board, Col, N, VR, [_|VC]).\n\nconstraints(0, _, _, _) :- !.\nconstraints(N, Row, [R|Rs], [C|Cs]) :-\n    arg(N, Row, R-C),\n    M is N-1,\n    constraints(M, Row, Rs, Cs).\n\nqueens([], _, []).\nqueens([C|Cs], Row0, [Col|Solution]) :-\n    Row is Row0+1,\n    select(Col-Vars, [C|Cs], Board),\n    arg(Row, Vars, Row-Row),\n    queens(Board, Row, Solution).\n\nrun_queens(B) :- B= [_,_,_,_,_,_,_,_], queens(B).\n\nselect(X, [Head|Tail], Rest) :-\n    select3_(Tail, Head, X, Rest).\n\nselect3_(Tail, Head, Head, Tail).\nselect3_([Head2|Tail], Head, X, [Head|Rest]) :-\n    select3_(Tail, Head2, X, Rest).\n";
TimingTests.zebra_theory = "zebra(Owner) :- solve(S),member([_, Owner, zebra, _, _], S).\n\nsolve(S) :-\n    S = [[C1,N1,P1,D1,S1],\n         [C2,N2,P2,D2,S2],\n         [C3,N3,P3,D3,S3],\n         [C4,N4,P4,D4,S4],\n         [C5,N5,P5,D5,S5]],\n    member([red, 'English man', _, _, _], S),\n    member([_, 'Swede', dog, _, _], S),\n    member([_, 'Dane', _, tea, _], S),\n    left_of([green |_], [white |_], S),\n    member([green, _, _, coffee, _], S),\n    member([_, _, birds, _, pall_mall], S),\n    member([yellow, _, _, _, dunhill], S),\n    D3 = milk,\n    N1 = 'Norwegian',\n    next_to([_, _, _, _, blend], [_, _, cats |_], S),\n    next_to([_, _, _, _, dunhill], [_, _, horse |_], S),\n    member([_, _, _, beer, blue_master], S),\n    member([_, 'German', _, _, prince], S),\n    next_to([_, 'Norwegian' |_], [blue |_], S),\n    next_to([_, _, _, water,_], [_, _, _, _, blend], S),\n    C1 \\== C2, C1 \\== C3, C1 \\== C4, C1 \\== C5,\n    C2 \\== C3, C2 \\== C4, C2 \\== C5,\n    C3 \\== C4, C3 \\== C5, C4 \\== C5,\n    N1 \\== N2, N1 \\== N3, N1 \\== N4, N1 \\== N5,\n    N2 \\== N3, N2 \\== N4, N2 \\== N5,\n    N3 \\== N4, N3 \\== N5, N4 \\== N5,\n    P1 \\== P2, P1 \\== P3, P1 \\== P4, P1 \\== P5,\n    P2 \\== P3, P2 \\== P4, P2 \\== P5,\n    P3 \\== P4, P3 \\== P5, P4 \\== P5,\n    D1 \\== D2, D1 \\== D3, D1 \\== D4, D1 \\== D5,\n    D2 \\== D3, D2 \\== D4, D2 \\== D5,\n    D3 \\== D4, D3 \\== D5, D4 \\== D5,\n    S1 \\== S2, S1 \\== S3, S1 \\== S4, S1 \\== S5,\n    S2 \\== S3, S2 \\== S4, S2 \\== S5,\n    S3 \\== S4, S3 \\== S5, S4 \\== S5.\n\nleft_of(L1, L2, [L1, L2 |_]).\nleft_of(L1, L2, [_| Rest ]) :- left_of(L1, L2, Rest).\n    \nnext_to(L1, L2, S) :- left_of(L1, L2, S).\nnext_to(L1, L2, S) :- left_of(L2, L1, S).\n\n";
blub_prolog_AtomContext.GLOBALS = new blub_prolog_AtomContext();
blub_prolog_Marshal.object_atom_id = 0;
blub_prolog_PredicateIndicator.SLASH = blub_prolog_AtomContext.GLOBALS.getAtom("/");
blub_prolog_Preprocessor.THEORIES = ["DefiniteClauseGrammar.prolog","ConstraintHandlingRules.prolog"];
blub_prolog_RuntimeError.ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("error");
blub_prolog_RuntimeError.CONTEXT = blub_prolog_AtomContext.GLOBALS.getAtom("context");
blub_prolog_RuntimeError.NONE = blub_prolog_AtomContext.GLOBALS.getAtom("none");
blub_prolog_RuntimeError.INSTANTIATION_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("instantiation_error");
blub_prolog_RuntimeError.TYPE_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("type_error");
blub_prolog_RuntimeError.EXISTENCE_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("existence_error");
blub_prolog_RuntimeError.DOMAIN_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("domain_error");
blub_prolog_RuntimeError.PERMISSION_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("permission_error");
blub_prolog_RuntimeError.REPRESENTATION_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("representation_error");
blub_prolog_RuntimeError.EVALUATION_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("evaluation_error");
blub_prolog_RuntimeError.RESOURCE_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("resource_error");
blub_prolog_RuntimeError.SYNTAX_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("syntax_error");
blub_prolog_RuntimeError.SYSTEM_ERROR = blub_prolog_AtomContext.GLOBALS.getAtom("system_error");
blub_prolog_RuntimeError.EXIST_PROCEDURE = blub_prolog_AtomContext.GLOBALS.getAtom("procedure");
blub_prolog_RuntimeError.EXIST_SRC_SINK = blub_prolog_AtomContext.GLOBALS.getAtom("source_sink");
blub_prolog_RuntimeError.EXIST_STREAM = blub_prolog_AtomContext.GLOBALS.getAtom("stream");
blub_prolog_TypeError.VALID_TYPE_atom = blub_prolog_AtomContext.GLOBALS.getAtom("atom");
blub_prolog_TypeError.VALID_TYPE_atomic = blub_prolog_AtomContext.GLOBALS.getAtom("atomic");
blub_prolog_TypeError.VALID_TYPE_byte = blub_prolog_AtomContext.GLOBALS.getAtom("byte");
blub_prolog_TypeError.VALID_TYPE_callable = blub_prolog_AtomContext.GLOBALS.getAtom("callable");
blub_prolog_TypeError.VALID_TYPE_character = blub_prolog_AtomContext.GLOBALS.getAtom("character");
blub_prolog_TypeError.VALID_TYPE_evaluable = blub_prolog_AtomContext.GLOBALS.getAtom("evaluable");
blub_prolog_TypeError.VALID_TYPE_in_byte = blub_prolog_AtomContext.GLOBALS.getAtom("in_byte");
blub_prolog_TypeError.VALID_TYPE_in_character = blub_prolog_AtomContext.GLOBALS.getAtom("in_character");
blub_prolog_TypeError.VALID_TYPE_integer = blub_prolog_AtomContext.GLOBALS.getAtom("integer");
blub_prolog_TypeError.VALID_TYPE_list = blub_prolog_AtomContext.GLOBALS.getAtom("list");
blub_prolog_TypeError.VALID_TYPE_number = blub_prolog_AtomContext.GLOBALS.getAtom("number");
blub_prolog_TypeError.VALID_TYPE_predicate_indicator = blub_prolog_AtomContext.GLOBALS.getAtom("predicate_indicator");
blub_prolog_TypeError.VALID_TYPE_variable = blub_prolog_AtomContext.GLOBALS.getAtom("variable");
blub_prolog_TypeError.VALID_TYPE_compound = blub_prolog_AtomContext.GLOBALS.getAtom("compound");
blub_prolog_engine_parts_ChoicePoint.ID = 1;
blub_prolog_builtins_Call.INDICATOR = blub_prolog_PredicateIndicator.fromString("call/1");
blub_prolog_builtins_Gensym.count = 1;
blub_prolog_builtins_Builtins.builtins = [new blub_prolog_builtins_True(),new blub_prolog_builtins_Fail(),new blub_prolog_builtins_Repeat(),new blub_prolog_builtins_Is(),new blub_prolog_builtins_Unify(),new blub_prolog_builtins_Identical(),new blub_prolog_builtins_NotIdentical(),new blub_prolog_builtins_Cut(),new blub_prolog_builtins_Call(),new blub_prolog_builtins_Once(),new blub_prolog_builtins_NotUnifiable(),new blub_prolog_builtins_NotProvable(),new blub_prolog_builtins_IfThen(),new blub_prolog_builtins_IfThenElse(),new blub_prolog_builtins_AssertA(),new blub_prolog_builtins_AssertZ(),new blub_prolog_builtins_Retract(),new blub_prolog_builtins_Abolish(),new blub_prolog_builtins_Timestamp(),new blub_prolog_builtins_Gensym(),new blub_prolog_builtins_Univ(),new blub_prolog_builtins_Write(),new blub_prolog_builtins_Clear(),new blub_prolog_builtins_Stop(),new blub_prolog_builtins_Functor(),new blub_prolog_builtins_Arg(),new blub_prolog_builtins_AtomCodes(),new blub_prolog_builtins_ListSlice(),new blub_prolog_builtins_Stack(),new blub_prolog_builtins_Member(),new blub_prolog_builtins_Breakpoint(),new blub_prolog_builtins_Listing(),new blub_prolog_builtins_ThrowUp()].concat(blub_prolog_builtins_BinaryArithmeticPred.get()).concat(blub_prolog_builtins_TermTypes.get()).concat(blub_prolog_builtins_Globals.get()).concat(blub_prolog_builtins_RebindVar.get()).concat(blub_prolog_builtins_objects_ObjectBuiltins.get()).concat(blub_prolog_builtins_async_AsyncBuiltins.get()).concat(blub_prolog_builtins_meta_MetaBuiltins.get());
blub_prolog_compiler_CompilerBase.ADD_LOGGING = true;
blub_prolog_terms_Reference.nameGen = 0;
blub_prolog_engine_ArithmeticEvaluator.arithmeticFuncs = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["+/2"] = true;
	h.h["-/2"] = true;
	h.h["*/2"] = true;
	h.h["//2"] = true;
	$r = h;
	return $r;
}(this));
blub_prolog_stopgap_parse_Char.OP_CHARS = "#$&*+-./:<=>?@^~\\";
blub_prolog_stopgap_parse_Char.WHITESPACE = " \n\r\t\x0C";
blub_prolog_terms_Atom.ID_GEN = 0;
blub_prolog_terms_Atom.A_CODE = HxOverrides.cca("A",0);
blub_prolog_terms_Atom.Z_CODE = HxOverrides.cca("Z",0);
blub_prolog_terms_Atom.a_CODE = HxOverrides.cca("a",0);
blub_prolog_terms_Atom.z_CODE = HxOverrides.cca("z",0);
blub_prolog_terms_Atom.zero_CODE = HxOverrides.cca("0",0);
blub_prolog_terms_Atom.nine_CODE = HxOverrides.cca("9",0);
blub_prolog_terms_Atom.under_CODE = HxOverrides.cca("_",0);
blub_prolog_terms_Structure.CONS_LIST = blub_prolog_AtomContext.GLOBALS.getAtom("CONS");
blub_prolog_terms_Structure.EMPTY_LIST = blub_prolog_AtomContext.GLOBALS.getAtom("[]");
blub_prolog_terms_Variable.nameCount = 0;
blub_prolog_terms_VariableContext.EMPTY = new blub_prolog_terms_VariableContext(null,new haxe_ds_StringMap(),[]);
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_crypto_Base64.URL_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
haxe_crypto_Base64.URL_BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.URL_CHARS);
theories_EightQueens.theory = "queens([]).                                  % when place queen in empty list, solution found\n \nqueens([ Row/Col | Rest]) :-                 % otherwise, for each row\n            queens(Rest),                    % place a queen in each higher numbered row\n            member(Col, [1,2,3,4,5,6,7,8]),  % pick one of the possible column positions\n            safe( Row/Col, Rest).            % and see if that is a safe position\n                                             % if not, fail back and try another column, until\n                                             % the columns are all tried, when fail back to\n                                             % previous row\n \nsafe(_, []).                                 % the empty board is always safe\n \nsafe(Row/Col, [Row1/Col1 | Rest]) :-         % see if attack the queen in next row down\n            Col =\\= Col1,                   % same column?\n            Col1 - Col =\\= Row1 - Row,      % check diagonal\n            Col1 - Col =\\= Row - Row1,\n            safe(Row/Col, Rest).             % no attack on next row, try the rest of board\n  \nboard([1/_, 2/_, 3/_, 4/_, 5/_, 6/_, 7/_, 8/_]).  % prototype board\n\nrun_queens(B) :- board(B),queens(B).\n";
theories_OKeefe8Queens.theory = "queens(Queens) :-\n    board(Queens, Board, 0, 8, _, _),\n    queens(Board, 0, Queens).\n\nboard([], [], N, N, _, _).\nboard([_|Queens], [Col-Vars|Board], Col0, N, [_|VR], VC) :-\n    Col is Col0+1,\n    functor(Vars, f, N),\n    constraints(N, Vars, VR, VC),\n    board(Queens, Board, Col, N, VR, [_|VC]).\n\nconstraints(0, _, _, _) :- !.\nconstraints(N, Row, [R|Rs], [C|Cs]) :-\n    arg(N, Row, R-C),\n    M is N-1,\n    constraints(M, Row, Rs, Cs).\n\nqueens([], _, []).\nqueens([C|Cs], Row0, [Col|Solution]) :-\n    Row is Row0+1,\n    select(Col-Vars, [C|Cs], Board),\n    arg(Row, Vars, Row-Row),\n    queens(Board, Row, Solution).\n\nrun_queens(B) :- B= [_,_,_,_,_,_,_,_], queens(B).\n\nselect(X, [Head|Tail], Rest) :-\n    select3_(Tail, Head, X, Rest).\n\nselect3_(Tail, Head, Head, Tail).\nselect3_([Head2|Tail], Head, X, [Head|Rest]) :-\n    select3_(Tail, Head2, X, Rest).\n";
theories_Zebra.theory = "zebra(Owner) :- solve(S),member([_, Owner, zebra, _, _], S).\n\nsolve(S) :-\n    S = [[C1,N1,P1,D1,S1],\n         [C2,N2,P2,D2,S2],\n         [C3,N3,P3,D3,S3],\n         [C4,N4,P4,D4,S4],\n         [C5,N5,P5,D5,S5]],\n    member([red, 'English man', _, _, _], S),\n    member([_, 'Swede', dog, _, _], S),\n    member([_, 'Dane', _, tea, _], S),\n    left_of([green |_], [white |_], S),\n    member([green, _, _, coffee, _], S),\n    member([_, _, birds, _, pall_mall], S),\n    member([yellow, _, _, _, dunhill], S),\n    D3 = milk,\n    N1 = 'Norwegian',\n    next_to([_, _, _, _, blend], [_, _, cats |_], S),\n    next_to([_, _, _, _, dunhill], [_, _, horse |_], S),\n    member([_, _, _, beer, blue_master], S),\n    member([_, 'German', _, _, prince], S),\n    next_to([_, 'Norwegian' |_], [blue |_], S),\n    next_to([_, _, _, water,_], [_, _, _, _, blend], S),\n    C1 \\== C2, C1 \\== C3, C1 \\== C4, C1 \\== C5,\n    C2 \\== C3, C2 \\== C4, C2 \\== C5,\n    C3 \\== C4, C3 \\== C5, C4 \\== C5,\n    N1 \\== N2, N1 \\== N3, N1 \\== N4, N1 \\== N5,\n    N2 \\== N3, N2 \\== N4, N2 \\== N5,\n    N3 \\== N4, N3 \\== N5, N4 \\== N5,\n    P1 \\== P2, P1 \\== P3, P1 \\== P4, P1 \\== P5,\n    P2 \\== P3, P2 \\== P4, P2 \\== P5,\n    P3 \\== P4, P3 \\== P5, P4 \\== P5,\n    D1 \\== D2, D1 \\== D3, D1 \\== D4, D1 \\== D5,\n    D2 \\== D3, D2 \\== D4, D2 \\== D5,\n    D3 \\== D4, D3 \\== D5, D4 \\== D5,\n    S1 \\== S2, S1 \\== S3, S1 \\== S4, S1 \\== S5,\n    S2 \\== S3, S2 \\== S4, S2 \\== S5,\n    S3 \\== S4, S3 \\== S5, S4 \\== S5.\n\nleft_of(L1, L2, [L1, L2 |_]).\nleft_of(L1, L2, [_| Rest ]) :- left_of(L1, L2, Rest).\n    \nnext_to(L1, L2, S) :- left_of(L1, L2, S).\nnext_to(L1, L2, S) :- left_of(L2, L1, S).\n\n";
TimingTests.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
